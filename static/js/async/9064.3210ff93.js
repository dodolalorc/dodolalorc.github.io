"use strict";(self.webpackChunkblogsite_rspress=self.webpackChunkblogsite_rspress||[]).push([["9064"],{3881:function(e,n,s){s.r(n),s.d(n,{default:()=>o});var i=s(2676),r=s(453),c=s(5523);function t(e){let n=Object.assign({h2:"h2",a:"a",p:"p",ul:"ul",li:"li",code:"code",h3:"h3",pre:"pre"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h2,{id:"前言",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前言",children:"#"}),"前言"]}),"\n",(0,i.jsx)(c.Z,{defaultLocale:"zh-CN"}),"\n",(0,i.jsx)(n.p,{children:"本篇记录利用 github action 实现自动化构建和部署的过程。"}),"\n",(0,i.jsx)(n.p,{children:"本站除了部署在 github page 上，还部署在本人的服务器上，懒惰的 ddl 直到现在才去上手实验，因此利用在 github action 中实现两种部署方式。"}),"\n",(0,i.jsxs)(n.h2,{id:"github-action",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#github-action",children:"#"}),"Github Action"]}),"\n",(0,i.jsx)(n.p,{children:"Github Action 是 Github 提供的持续集成服务，可以在代码仓库中配置 workflow，实现自动化构建、测试、部署等功能。"}),"\n",(0,i.jsx)(n.p,{children:"有一些术语需要了解："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Workflow"}),"：一个 workflow 由一个或多个 job 组成，可以在不同的操作系统环境中运行。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Job"}),"：一个 job 由一系列 step 组成，可以在同一个 runner 上运行。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Step"}),"：一个 step 由一个或多个 action 组成，可以在同一个 runner 上运行。"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Action"}),"：一个 action 是一个独立的任务，可以在不同的 runner 上运行。"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"配置",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置",children:"#"}),"配置"]}),"\n",(0,i.jsxs)(n.p,{children:["这里我使用的是 github action 自带的",(0,i.jsx)(n.code,{children:"SSH Deploy"})," action，使用 ssh 链接远程服务器，将代码部署到服务器上。使用方法可以参考",(0,i.jsx)(n.a,{href:"https://github.com/marketplace/actions/ssh-deploy",rel:"noopener noreferrer",target:"_blank",children:"这里"}),"。"]}),"\n",(0,i.jsxs)(n.h3,{id:"1-创建-ssh-key-并添加到-github-secrets",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-创建-ssh-key-并添加到-github-secrets",children:"#"}),"1. 创建 SSH Key 并添加到 github secrets"]}),"\n",(0,i.jsx)(n.p,{children:"首先需要在服务器上生成一个 SSH Key，用于 github action 登录服务器。"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ssh-keygen -m PEM -t rsa -b 4096\n"})}),"\n",(0,i.jsxs)(n.p,{children:["key 的生成过程中会提示输入密码，可以不输入，直接回车，默认保存在",(0,i.jsx)(n.code,{children:"/root/.ssh"}),"目录下（这个可能不同的服务器环境会有区别，具体的默认位置在生成",(0,i.jsx)(n.code,{children:"ssh-key"}),"的时候命令行有提示。"]}),"\n",(0,i.jsxs)(n.p,{children:["生成的 key 包含一个私钥",(0,i.jsx)(n.code,{children:"id_rsa"}),"和一个公钥",(0,i.jsx)(n.code,{children:"id_rsa.pub"}),"，私钥保存在本地，我们需要将公钥添加到服务器的",(0,i.jsx)(n.code,{children:"/root/.ssh/authorized_keys"}),"文件中。"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cat ./id_rsa.pub >> /root/.ssh/authorized_keys\n"})}),"\n",(0,i.jsxs)(n.p,{children:["考虑到我们并不想把私钥暴露在 github 公开仓库上，我们需要将私钥",(0,i.jsx)(n.code,{children:"id_rsa"}),"添加到 github 的 secrets 中。"]}),"\n",(0,i.jsxs)(n.p,{children:["在仓库的",(0,i.jsx)(n.code,{children:"Settings"}),"->",(0,i.jsx)(n.code,{children:"Security"}),"->",(0,i.jsx)(n.code,{children:"Secrets and variables"}),"->",(0,i.jsx)(n.code,{children:"Actions"}),"中，选择",(0,i.jsx)(n.code,{children:"New repository secret"}),"，添加一个",(0,i.jsx)(n.code,{children:"SSH_PRIVATE_KEY"}),"，将私钥内容粘贴进去。"]}),"\n",(0,i.jsxs)(n.p,{children:["再新建三个 secrets，分别是",(0,i.jsx)(n.code,{children:"REMOTE_HOST"}),"、",(0,i.jsx)(n.code,{children:"REMOTE_USER"}),"、",(0,i.jsx)(n.code,{children:"REMOTE_TARGET"}),"，分别对应服务器的地址、用户名、目标路径。"]}),"\n",(0,i.jsxs)(n.h3,{id:"2-创建-workflow",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-创建-workflow",children:"#"}),"2. 创建 workflow"]}),"\n",(0,i.jsxs)(n.p,{children:["在代码仓库的",(0,i.jsx)(n.code,{children:".github/workflows"}),"目录下创建一个",(0,i.jsx)(n.code,{children:".yml"}),"文件，文件名可以自定义，如",(0,i.jsx)(n.code,{children:"deploy.yml"}),"。"]}),"\n",(0,i.jsxs)(n.p,{children:["一个库可以有多个 workflow，github 只要发现",(0,i.jsx)(n.code,{children:".github/workflows"}),"目录下有",(0,i.jsx)(n.code,{children:".yml"}),"文件，就会自动运行 workflow。"]}),"\n",(0,i.jsx)(n.p,{children:"内容可以参考如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: Deploy\n\n# 触发条件\non:\n  push:\n    branches: [main]\n  workflow_dispatch: # 手动触发\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: "16.x"\n      - name: ssh deploy\n        uses: easingthemes/ssh-deploy@v5.0.3\n        with:\n          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}\n          ARGS: "-rlgoDzvc -i"\n          SOURCE: ""\n          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}\n          REMOTE_USER: ${{ secrets.REMOTE_USER }}\n          TARGET: ${{ secrets.REMOTE_TARGET }}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["向 github 仓库 push 代码之后，我们在",(0,i.jsx)(n.code,{children:"Actions"}),"选项卡中可以看到 workflow 的运行情况。假如运行失败，可以点进去查看具体的错误信息，进行调试。"]}),"\n",(0,i.jsx)(n.p,{children:"之后每次 push 到 main 分支或者手动触发 workflow，github action 就会自动运行 workflow，将代码部署到服务器上。"}),"\n",(0,i.jsxs)(n.h2,{id:"更新-2024-09-22",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#更新-2024-09-22",children:"#"}),"更新 2024-09-22"]}),"\n",(0,i.jsxs)(n.p,{children:["之前部署的时候只上传了",(0,i.jsx)(n.code,{children:"public/"}),"文件夹，最近有同步源码的需求，但是源码包含一些隐私信息，并不适合上传到 github 的公开仓库，所以现在的需求是："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"将源码上传到一个私有仓库"}),"\n",(0,i.jsxs)(n.li,{children:["从私有仓库中将",(0,i.jsx)(n.code,{children:"public/"}),"文件夹同步到",(0,i.jsx)(n.code,{children:"<username>.github.io"}),"公开仓库中，并部署到",(0,i.jsx)(n.code,{children:"github page"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["因此新增了一个在源码仓库根目录下的 workflow，将源码上传到私有仓库，通过 hugo 官方提供的 action，将生产的站点文件同步到",(0,i.jsx)(n.code,{children:"<username>.github.io"}),"公开仓库中。"]}),"\n",(0,i.jsxs)(n.h3,{id:"创建私有仓库",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建私有仓库",children:"#"}),"创建私有仓库"]}),"\n",(0,i.jsx)(n.p,{children:"首先在 github 上创建一个私有仓库，用于存放源码。"}),"\n",(0,i.jsxs)(n.h3,{id:"创建-personal-access-token",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建-personal-access-token",children:"#"}),"创建 personal access token"]}),"\n",(0,i.jsxs)(n.p,{children:["在 github 的",(0,i.jsx)(n.code,{children:"Settings"}),"->",(0,i.jsx)(n.code,{children:"Developer settings"}),"->",(0,i.jsx)(n.code,{children:"Personal access tokens"}),"中，点击",(0,i.jsx)(n.code,{children:"Generate new token"}),"，勾选",(0,i.jsx)(n.code,{children:"repo"}),"权限，生成一个 token，将 token 复制下来。"]}),"\n",(0,i.jsxs)(n.h3,{id:"添加-secrets",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#添加-secrets",children:"#"}),"添加 secrets"]}),"\n",(0,i.jsxs)(n.p,{children:["在源码仓库的",(0,i.jsx)(n.code,{children:"Settings"}),"->",(0,i.jsx)(n.code,{children:"Security"}),"->",(0,i.jsx)(n.code,{children:"Secrets and variables"}),"->",(0,i.jsx)(n.code,{children:"Actions"}),"中，添加一个",(0,i.jsx)(n.code,{children:"ACTION_ACCESS_TOKEN"}),"，将刚刚生成的 token 粘贴进去，这个命名要和 workflow 文件中的一致。"]}),"\n",(0,i.jsxs)(n.h3,{id:"创建-workflow",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建-workflow",children:"#"}),"创建 workflow"]}),"\n",(0,i.jsxs)(n.p,{children:["在私有仓库的",(0,i.jsx)(n.code,{children:".github/workflows"}),"目录下创建一个",(0,i.jsx)(n.code,{children:"gh-page.yml"}),"文件。"]}),"\n",(0,i.jsx)(n.p,{children:"文件内容如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: github pages deploy\n\non:\n  push:\n    branches:\n      - main\n\npermissions:\n  contents: read\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3 # 引用actions/checkout这个action，与所在的github仓库同名\n        with:\n          submodules: flase # 是否获取子模块\n          fetch-depth: 0\n\n      - name: Install Node.js\n        uses: actions/setup-node@v3\n\n      - name: Setup Hugo # 步骤名自取\n        uses: peaceiris/actions-hugo@v3 # hugo官方提供的action，用于在任务环境中获取hugo\n        with:\n          hugo-version: "latest" # 获取最新版本的hugo\n          extended: true\n\n      - name: Build\n        run: hugo --minify # 使用hugo构建静态网页\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v4 # 一个自动发布github pages的action\n        with:\n          # github_token: ${{ secrets.GITHUB_TOKEN }} 该项适用于发布到源码相同repo的情况，不能用于发布到其他repo\n          external_repository: dodolalorc/dodolalorc.github.io # 发布到哪个repo\n          personal_token: ${{ secrets.ACTION_ACCESS_TOKEN }} # 发布到其他repo需要提供上面生成的personal access token\n          publish_dir: ./public/ # 注意这里指的是要发布哪个文件夹的内容，而不是指发布到目的仓库的什么位置，因为hugo默认生成静态网页到public文件夹，所以这里发布public文件夹里的内容\n          keep_files: true # 是否保留其他文件\n          publish_branch: main # 发布到哪个branch\n          commit_message: ${{ github.event.head_commit.message }} # 提交信息\n'})}),"\n",(0,i.jsxs)(n.p,{children:["由于现在的",(0,i.jsx)(n.code,{children:"xxx.github.io"}),"对应的仓库是在 GitHub action 中构建站点后直接 commit 同步的，故原来在公开仓库中的 workflows 并不方便添加到这个 commit 里，我这里的解决思路是将原来 ssh 连接云服务器进行 deploy 的代码进行修改，添加自动构建内容，再直接用 ssh 连接到云服务器，完成云服务器的内容更新。修改后的",(0,i.jsx)(n.code,{children:"remote-deploy.yml"}),"参考如下："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: Deploy to remote server\n\n# 触发条件\non:\n  push:\n    branches: [main]\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: "16.x"\n\n      - name: Setup Hugo\n        uses: peaceiris/actions-hugo@v2\n        with:\n          hugo-version: "latest"\n          extended: true\n\n      - name: Build\n        run: hugo --minify\n\n      - name: ssh deploy\n        uses: easingthemes/ssh-deploy@v5.1.0\n        with:\n          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}\n          ARGS: "-rlgoDzvc -i"\n          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}\n          REMOTE_USER: ${{ secrets.REMOTE_USER }}\n          TARGET: ${{ secrets.REMOTE_TARGET }}\n          SOURCE: "public/"\n          # SCRIPT_BEFORE: |\n          #   whoami\n          #   ls -al\n          # SCRIPT_AFTER: |\n          #   cd ${{ secrets.REMOTE_TARGET }}\n          #   ls -al\n          #   pwd\n          #   echo "Deployed successfully"\n'})})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(t,e)})):t(e)}let o=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["posts%2Ffool%2Fgithub_action.md"]={toc:[{id:"前言",text:"前言",depth:2},{id:"github-action",text:"Github Action",depth:2},{id:"配置",text:"配置",depth:2},{id:"1-创建-ssh-key-并添加到-github-secrets",text:"1. 创建 SSH Key 并添加到 github secrets",depth:3},{id:"2-创建-workflow",text:"2. 创建 workflow",depth:3},{id:"更新-2024-09-22",text:"更新 2024-09-22",depth:2},{id:"创建私有仓库",text:"创建私有仓库",depth:3},{id:"创建-personal-access-token",text:"创建 personal access token",depth:3},{id:"添加-secrets",text:"添加 secrets",depth:3},{id:"创建-workflow",text:"创建 workflow",depth:3}],title:"Github Action实践",headingTitle:"",frontmatter:{title:"Github Action实践",subtitle:"",date:"2024-07-05T15:11:39.000Z",lastmod:"2024-09-22T14:11:39.000Z",draft:!1,authors:[],description:"",tags:["Github Action","自动化部署"],categories:["我们需要更多的鱼"],series:[],hiddenFromHomePage:!1,hiddenFromSearch:!1,featuredImage:"",featuredImagePreview:"",toc:{enable:!0},math:{enable:!1},lightgallery:!1,license:""}}},5523:function(e,n,s){s.d(n,{Z:()=>o});var i=s(2676),r=s(5271),c=s(2815);s(7995);let t={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function h(e,n,s){let i=Object.keys(t).includes(n)?n:s;return t[i](e)}let o=e=>{let{defaultLocale:n="en-US"}=e,s=(0,c.Vi)().page.readingTimeData,t=(0,c.Jr)(),o=(0,c.e7)(),[d,l]=(0,r.useState)(h(s,t,n));return(0,r.useEffect)(()=>{l(h(s,t,n))},[t,s]),(0,i.jsx)("span",{"data-dark":String(o),className:"rp-reading-time",children:d})}}}]);