"use strict";(self.webpackChunkblogsite_rspress=self.webpackChunkblogsite_rspress||[]).push([["5055"],{7198:function(n,r,e){e.r(r),e.d(r,{default:()=>t});var s=e(2676),i=e(453),a=e(3208);function d(n){let r=Object.assign({p:"p",h1:"h1",a:"a",h2:"h2",strong:"strong",h3:"h3",h4:"h4",pre:"pre",code:"code",img:"img",ol:"ol",li:"li",span:"span",math:"math",semantics:"semantics",mrow:"mrow",mi:"mi",mo:"mo",munder:"munder",mn:"mn",msub:"msub",mtable:"mtable",mtr:"mtr",mtd:"mtd",mstyle:"mstyle",msubsup:"msubsup",annotation:"annotation",em:"em"},(0,i.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.p,{children:"有的题还没写完）咕咕咕））"}),"\n",(0,s.jsxs)(r.h1,{id:"nenu-oj算法2例题",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#nenu-oj算法2例题",children:"#"}),"NENU OJ算法2例题"]}),"\n",(0,s.jsx)(a.Z,{defaultLocale:"zh-CN"}),"\n",(0,s.jsxs)(r.p,{children:["这学期写算法2的思路并不都很详细，不过如果有想交流的也可以评论区或者私信，学校oj的题大多比较简单，这里的所有代码或许只保证通过学校的弱测试数据，","因为其他地方OJ我还没有试过","。"]}),"\n",(0,s.jsxs)(r.h2,{id:"算法2递归a",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#算法2递归a",children:"#"}),(0,s.jsx)(r.strong,{children:"算法2递归A"})]}),"\n",(0,s.jsxs)(r.h3,{id:"1241-a001-猴子吃桃",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1241-a001-猴子吃桃",children:"#"}),"1241: A001 猴子吃桃"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"猴子第1天摘下若干个桃子，当即吃了一半，还不过瘾，又多吃了一个。第2天又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半另加一个。到第10天早上想再吃时，就只剩下一个桃子了。求第1天共摘了多少个桃子。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入第一行为正整数n，为测试数据组数。后面n行为测试数据，每组测试数据包括两个整数m，k，分别表示第m（m>1)天后剩余的桃子数k(k>=0)。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"输出猴子第一天摘的桃子数，每组数据占一行。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"2\r\n2  2\r\n3  0\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"6\r\n6\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\nint main() {\r\n    int n;cin >> n;\r\n    while (n--) {\r\n        int m, k;cin >> m >> k;\r\n        int sum = k;\r\n        for (int i = 0;i < m - 1;i++) {\r\n            sum++;\r\n            sum *= 2;\r\n        }\r\n        cout << sum << endl;\r\n    }\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1242-a002-最大公约数",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1242-a002-最大公约数",children:"#"}),"1242: A002 最大公约数"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-1",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-1",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"输入两个正整数，求其最大公约数。\r\n数论中有一个求最大公约数的算法称为辗转相除法，又称欧几里德算法。其基本思想及执行过程为（设m为两正整数中较大者，n为较小者）：\r\n（1）令u=m,v=n；\r\n（2）取u对v的余数，即r=u%v，如果r的值为0，则此时v的值就是m和n的最大公约数，否则执行第（3）步；\r\n（3）u=v，v=r，即u的值为v的值，而v的值为余数r。并转向第（2）步。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"第1行是测试数据的组数n，后面跟着n行输入。每组测试数据占1行，包括两个正整数m和n。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"n行，每行输出对应一个输入。输出应是一个正整数，为m和n的最大公约数。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"2\r\n48 32\r\n15 5\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"16\r\n5\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-1",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-1",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\nint main() {\r\n    int t;cin >> t;\r\n    while (t--) {\r\n        int m, n;cin >> m >> n;\r\n        int yu = m % n;\r\n        while (yu) {\r\n            m = n;n = yu;\r\n            yu = m % n;\r\n        }\r\n        cout << n << endl;\r\n    }\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1243-a003-经典的hanoi汉诺塔问题",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1243-a003-经典的hanoi汉诺塔问题",children:"#"}),"1243: A003 经典的Hanoi(汉诺塔)问题"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-2",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-2",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"有一个汉诺塔，塔内有A,B,C三个柱子。起初，A柱上有n个盘子，依次由大到小、从下往上堆放，要求将它们全部移到C柱上；在移动过程中可以利用B柱，但每次只能移到一个盘子，且必须使三个柱子上始终保持大盘在下，小盘在上的状态。要求编程输出移动的步骤。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入文件中包含多行，每行为一个整数n，代表初始A柱子上的盘子的个数。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对输入文件中的每个整数n列出具体的汉诺塔移动步骤。两组输出之间有一空行。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"3\r\n1\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"A--\x3eC\r\nA--\x3eB\r\nC--\x3eB\r\nA--\x3eC\r\nB--\x3eA\r\nB--\x3eC\r\nA--\x3eC\r\n\r\nA--\x3eC\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-2",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-2",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\nvoid hanoi(int n, int from, int to) {\r\n    if (n == 0) return;     // 全部移完，终止递归\r\n    // 把from位置上的上面的n-1个移到不是from也不是to的位置\r\n    hanoi(n - 1, from, (3 - from - to));\r\n    // 移动最底下的最大的那个，并输出记录\r\n    cout << char(from + 'A') << \"--\x3e\" << char(to + 'A') << endl;\r\n    // 把之前移走的n-1个移到to位置\r\n    hanoi(n - 1, (3 - from - to), to);\r\n}\r\nint main() {\r\n    int n;\r\n    while (cin >> n) {\r\n        hanoi(n, 0, 2);\r\n        cout << \"\\n\";\r\n    }\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1244-a004-菲波那契数列",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1244-a004-菲波那契数列",children:"#"}),"1244: A004 菲波那契数列"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-3",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-3",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"菲波那契数列是指这样的数列: 数列的第一个和第二个数都为1，接下来每个数都等于前面2个数之和。给出一个正整数a，要求菲波那契数列中第a个数是多少。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"第1行是测试数据的组数n，后面跟着n行输入。每组测试数据占1行，包括一个正整数a(1 <= a <= 20)。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"输出有n行，每行输出对应一个输入。输出应是一个正整数，为菲波那契数列中第a个数的大小。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"4\r\n5\r\n2\r\n19\r\n1\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"5\r\n1\r\n4181\r\n1\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-3",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-3",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nint fib(int n) {\r\n    if (n == 1 || n == 2)return 1;\r\n    return fib(n - 1) + fib(n - 2);\r\n}\r\n\r\nint main() {\r\n    int t;cin >> t;\r\n    while (t--) {\r\n        int a;cin >> a;\r\n        cout << fib(a) << endl;\r\n    }\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1245-a005-另一个fibonacci数列",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1245-a005-另一个fibonacci数列",children:"#"}),"1245: A005 另一个Fibonacci数列"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-4",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-4",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"定义另外一个Fibonacci数列：F(0)=7,F(1)=11,F(n)=F(n-1)+F(n-2)，（n≥2）。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入文件中包含多行，每行为一个整数n，n<1000000。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对输入文件中的每个整数n，如果F(n)能被3整除，输出yes，否则输出no。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"0\r\n1\r\n2\r\n3\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"no\r\nno\r\nyes\r\nno\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-4",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-4",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\nusing namespace std;\r\nint main() {\r\n    long long na;\r\n    while (cin >> na) {\r\n        if (na % 8 == 2 || na % 8 == 6)cout << "yes\\n";\r\n        else cout << "no\\n";\r\n    }\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1246-a006-分形fractal",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1246-a006-分形fractal",children:"#"}),"1246: A006 分形（Fractal）"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-5",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-5",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"分形是存在“自相似”的一个物体或一种量，从某种技术角度来说，这种“自相似”是全方位的。\r\n盒形分形定义如下：\r\n度数为1的分形很简单，为：\r\nX"}),"\n",(0,s.jsx)(r.p,{children:"度数为2的分形为："}),"\n",(0,s.jsx)(r.p,{children:"X X"}),"\n",(0,s.jsx)(r.p,{children:"X"}),"\n",(0,s.jsx)(r.p,{children:"X X"}),"\n",(0,s.jsx)(r.p,{children:"如果用B(n-1)代表度数为n-1的盒形分形，则度数为n的盒形分形可以递归地定义为："}),"\n",(0,s.jsx)(r.p,{children:"B(n-1) B(n-1)"}),"\n",(0,s.jsx)(r.p,{children:"B(n-1)"}),"\n",(0,s.jsx)(r.p,{children:"B(n-1) B(n-1)"}),"\n",(0,s.jsx)(r.p,{children:"你的任务是输出度数为n的盒形分形。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入文件包含多个测试数据，每个测试数据占一行，包含一个正整数n，n ≤ 7。输入文件的最后一行为-1，代表输入结束。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对每个测试数据，用符号“X”表示输出盒形分形。在每个测试数据对应的输出之后输出一个短划线符号“-”，在每行的末尾不要输出任何多余的空格，否则得到的是“格式错误”的结果。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"2\r\n3\r\n-1\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"X X\r\n X\r\nX X\r\n-\r\nX X   X X\r\n X     X\r\nX X   X X\r\n   X X\r\n    X\r\n   X X\r\nX X   X X\r\n X     X\r\nX X   X X\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-5",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-5",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int maxlen = pow(3, 8);\r\n// string mp[maxlen];\r\nchar mp[maxlen][maxlen];\r\nint xpos[maxlen];\r\n\r\nvoid tocpyRec(int deg, int tox, int toy,int fillblank) {\r\n    int len = pow(3, deg - 1);\r\n    // 左上角标记\r\n    for (int i = 0;i < len;i++) {\r\n        for (int j = 0;j < len;j++) {\r\n            // cout << mp[i][j] << \":\" << i << \"-\" << j << endl;\r\n            if (fillblank)\r\n                mp[tox * len + i][toy * len + j] = ' ';\r\n            else\r\n                mp[tox * len + i][toy * len + j] = mp[i][j];\r\n        }\r\n    }\r\n}\r\n\r\nvoid fw(int deg) {\r\n    if (deg > 1) {\r\n        fw(deg - 1);\r\n    }\r\n    for (int i = 0;i < 3;i++) {\r\n        for (int j = 0;j < 3;j++) {\r\n            if ((i + j) % 2 == 0 && (i || j)) {\r\n                // 有内容的块坐标\r\n                tocpyRec(deg - 1, i, j, 0);\r\n            }\r\n            else if (i || j) {\r\n                tocpyRec(deg - 1, i, j, 1);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nint main() {\r\n    mp[0][0] = 'X';\r\n    int n;\r\n    int flag = 0;\r\n    while (cin >> n && n != -1) {\r\n        if (flag)cout << \"-\\n\";\r\n        flag = 1;\r\n        fw(n);\r\n        int len = pow(3, n - 1);\r\n        for (int i = 0;i < len;i++) \r\n            for (int j = 0;j < len;j++) \r\n                if (mp[i][j] == 'X')\r\n                    xpos[i] = j;\r\n        \r\n        for (int i = 0;i < len;i++) {\r\n            for (int j = 0;j <= xpos[i];j++) {\r\n                cout << mp[i][j];\r\n            }\r\n            cout << endl;\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}\r\n\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1247-a007-二叉树",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1247-a007-二叉树",children:"#"}),"1247: A007 二叉树"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-6",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-6",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"如图所示，由正整数1, 2, 3, ...组成了一棵无限大的二叉树。从某一个结点到根结点（编号是1的结点）都有一条唯一的路径，比如从10到根结点的路径是(10, 5, 2, 1)，从4到根结点的路径是(4, 2, 1)，从根结点1到根结点的路径上只包含一个结点1，因此路径就是(1)。对于两个结点x和y，假设他们到根结点的路径分别是(x1, x2, ... ,1)和(y1, y2, ... ,1)（这里显然有x = x1，y = y1），那么必然存在两个正整数i和j，使得从xi 和 yj开始，有xi = yj , xi + 1 = yj + 1, xi + 2 = yj + 2,... 现在的问题就是，给定x和y，要求xi（也就是yj）。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://images.ptausercontent.com/57ecc61d-d4b0-4223-a39d-4b2b0f847fd6.jpg",alt:" "})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入有多行，每行包括两个正整数x和y，这两个正整数都不大于1000。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"每行输出只有一个正整数xi。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"10 4\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"2\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-6",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-6",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 12;\r\nint ax[N], ay[N];\r\nint main() {\r\n    int x, y;\r\n    // 找重合的路径\r\n    while (cin >> x >> y) {\r\n        int kx = 0;\r\n        while (x) {\r\n            ax[kx++] = x % 2;\r\n            x /= 2;\r\n        }\r\n        int ky = 0;\r\n        while (y) {\r\n            ay[ky++] = y % 2;\r\n            y /= 2;\r\n        }\r\n        int kmii = kx > ky ? ky : kx;\r\n        int ans = 0;\r\n        for (int i = 1;i <= kmii;i++) {\r\n            if (ax[kx - i] == ay[ky - i]) {\r\n                ans <<= 1;\r\n                ans += ax[kx - i];\r\n            }\r\n            else break;\r\n        }\r\n        cout << ans << endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1248-a008-波兰表达式",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1248-a008-波兰表达式",children:"#"}),"1248: A008 波兰表达式"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-7",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-7",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"波兰表达式是一种把运算符前置的算术表达式，例如普通的表达式2 + 3的波兰表示法为+ 2 3。波兰表达式的优点是运算符之间不必有优先级关系，也不必用括号改变运算次序，例如(2 + 3) * 4的波兰表示法为* + 2 3 4。本题求解波兰表达式的值，其中运算符包括+ - * /四个。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入第一行为一个整数n，然后是n行，每行为一组测试数据，其中运算符和运算数之间都用空格分隔，运算数是浮点数。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"输出n行，每行表达式的值，保留3位小数输出。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"1\r\n* + 11.0 12.0 + 24.0 35.0\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"1357.000\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-7",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-7",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\ndouble dox() {\r\n    string st;cin >> st;\r\n    switch (st[0])\r\n    {\r\n    case '+':\r\n        return dox() + dox();\r\n    case '-':\r\n        return dox() - dox();\r\n    case '/':\r\n        return dox() / dox();\r\n    case '*':\r\n        return dox() * dox();\r\n    default:break;\r\n    }\r\n    return atof(st.c_str());\r\n}\r\n\r\nint main() {\r\n    int t;cin >> t;\r\n    while (t--) {\r\n        cout << fixed << setprecision(3) << dox() << endl;\r\n    }\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1249-a009-放苹果",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1249-a009-放苹果",children:"#"}),"1249: A009 放苹果"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-8",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-8",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"把M个同样的苹果放在N个同样的盘子里，允许有的盘子空着不放，问共有多少种不同的分法（用K表示）？注意：5，1，1和1，5，1 是同一种分法。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"第一行是测试数据的数目t（0 <= t <= 20）。以下每行均包含二个整数M和N，以空格分开。1 <= M，N <= 10。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对输入的每组数据M和N，用一行输出相应的K。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"1\r\n7 3\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"8\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-8",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-8",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 15;\r\nint dp[N][N];\r\n\r\nint divx(int apl, int pla) {\r\n    if (apl == 0 || pla == 1)\r\n        return dp[apl][pla] = 1;\r\n    if (pla > apl)\r\n        return dp[apl][pla] = divx(apl, apl);\r\n    return dp[apl][pla] = divx(apl, pla - 1) + divx(apl - pla, pla);\r\n}\r\n\r\nint main() {\r\n    int t;cin >> t;\r\n    int m, n;\r\n    while (t--) {\r\n        cin >> m >> n;\r\n        cout << divx(m, n) << endl;\r\n    }\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1250-a010-递归练习1",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1250-a010-递归练习1",children:"#"}),"1250: A010 递归练习1"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-9",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-9",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"有5个人坐在一起，问第5个人多少岁？他说比第4个人大两岁。问第4个人的岁数，他说比第3个人大两岁。问第3个人的岁数，又说比第2个人大两岁。问第2个人的岁数，说比第1个人大两岁。最后问第1个人的岁数，他说是10岁。请问第5个人多少岁？"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入有多行，每行3个整数，依次为m,n,k。m表示一共有几个人，n表示大的岁数，k表示第一个人的岁数。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"输出第m个人的岁数，每个一行。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"5 2 10\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"18\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-9",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-9",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nint m, n, k;\r\nint age(int ind) {\r\n    if (ind == 1)return k;\r\n    return age(ind - 1) + n;\r\n}\r\n\r\nint main() {\r\n    while (cin >> m >> n >> k) {\r\n        cout << age(m) << endl;\r\n    }\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1251-a011-递归练习2",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1251-a011-递归练习2",children:"#"}),"1251: A011 递归练习2"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-10",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-10",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"根据递推式子C(m,n)=C(m-1,n)+C(m-1,n-1)，求组合数C(m,n)。注意递推的终止条件是C(m,1)=m；以及一些m和n取值的一些特殊情况，如m < 0或n < 0或m < n时，C(m,n)值为0，m和n相等时，C(m,n)=1等。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"第1行是测试数据的组数n，后面跟着n行输入。每组测试数据占1行，包括一个正整数m和一个正整数n。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"输出组合数C(m,n)。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"2\r\n1 100\r\n100 1\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"0\r\n100\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-10",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-10",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nint C(int m, int n) {\r\n    if (n == 1)return m;\r\n    if (m < 0 || n < 0 || m < n)return 0;\r\n    if (m == n)return 1;\r\n    return C(m - 1, n) + C(m - 1, n - 1);\r\n}\r\n\r\nint main() {\r\n    int t;cin >> t;\r\n    while (t--) {\r\n        int m, n;cin >> m >> n;\r\n        cout << C(m, n) << endl;\r\n    }\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1252-a012-递归练习3",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1252-a012-递归练习3",children:"#"}),"1252: A012 递归练习3"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-11",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-11",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"核反应堆中有α和β两种粒子。每秒钟内一个α粒子可以产生3个β粒子，而一个β粒子可以产生1个α粒子和2个β粒子。若在t=0时刻反应堆中有一个α粒子，求t时刻反应堆中分别有多少个α粒子和β粒子。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入有多个整数t，每个一行。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"输出t时刻反应堆里分别有多少个α粒子和β粒子。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"6\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"183 546\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-11",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-11",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\npair<int, int> qut(int n) {\r\n    if (n == 0)return make_pair(1, 0);\r\n    int tempa = qut(n - 1).first, tempb = qut(n - 1).second;\r\n    int a = tempb, b = 3 * tempa + 2 * tempb;\r\n    return make_pair(a, b);\r\n}\r\n\r\nint main() {\r\n    int t;\r\n    while (cin >> t) {\r\n        cout << qut(t).first << " " << qut(t).second << endl;\r\n    }\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"插一句"}),"：这里用了pair数据类型，或许有同学并没有接触到...一般函数会返回1个值，有时候想返回两个或以上的时候可以试试自定义struct数据类型，再去定义一个struct的函数，不过c++自有一个pair可以用，还是挺方便的。"]}),"\n",(0,s.jsxs)(r.h3,{id:"1253-a013-红与黑",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1253-a013-红与黑",children:"#"}),"1253: A013 红与黑"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-12",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-12",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"有一间长方形的房子，地上铺了红色、黑色两种颜色的正方形瓷砖。你站在其中一块黑色的瓷砖上，只能向相邻的黑色瓷砖移动。请写一个程序，计算你总共能够到达多少块黑色的瓷砖。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"包括多个数据集合。每个数据集合的第一行是两个整数W和H，分别表示x方向和y方向瓷砖的数量。W和H都不超过20。在接下来的H行中，每行包括W个字符。每个字符表示一块瓷砖的颜色，规则如下\r\n1）‘.’：黑色的瓷砖；\r\n2）‘#’：白色的瓷砖；\r\n3）‘@’：黑色的瓷砖，并且你站在这块瓷砖上。该字符在每个数据集合中唯一出现一次。\r\n当在一行中读入的是两个零时，表示输入结束。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对每个数据集合，分别输出一行，显示你从初始位置出发能到达的瓷砖数(记数时包括初始位置的瓷砖)。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"6 9 \r\n....#. \r\n.....# \r\n...... \r\n...... \r\n...... \r\n...... \r\n...... \r\n#@...# \r\n.#..#. \r\n0 0\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"45\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-12",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-12",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int maxh = 25;\r\nstring mp[maxh];\r\nint dx[4] = { -1,0,1,0 }, dy[4] = { 0,1,0,-1 };\r\n\r\nint w, h;\r\nint move(int x, int y, int allstep) {\r\n    for (int i = 0;i < 4;i++) {\r\n        int nx = x + dx[i], ny = y + dy[i];\r\n        if (nx > -1 && nx<h && ny>-1 && ny < w && mp[nx][ny] == '.'){\r\n            mp[nx][ny] = '#';\r\n            allstep = move(nx, ny, allstep + 1);\r\n        }\r\n    }\r\n    return allstep;\r\n}\r\n\r\nint main() {\r\n    while (cin >> w >> h && w != 0 && h != 0) {\r\n        int si, se;\r\n        for (int i = 0;i < h;i++) {\r\n            cin >> mp[i];\r\n            if (mp[i].find(\"@\") != string::npos) {\r\n                si = i;se = mp[i].find(\"@\");\r\n            }\r\n        }\r\n        int steps = move(si, se, 1);\r\n        cout << steps << endl;\r\n    }\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1254-a014-城堡问题",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1254-a014-城堡问题",children:"#"}),"1254: A014 城堡问题"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-13",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-13",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"1 2 3 4 5 6 7\r\n#############################"}),"\n",(0,s.jsx)(r.p,{children:"1 # | # | # | | #"}),"\n",(0,s.jsx)(r.p,{children:"#####---#####---#---#####---#"}),"\n",(0,s.jsx)(r.p,{children:"2 # # | # # # # #"}),"\n",(0,s.jsx)(r.p,{children:"#---#####---#####---#####---#"}),"\n",(0,s.jsx)(r.p,{children:"3 # | | # # # # #"}),"\n",(0,s.jsx)(r.p,{children:"#---#########---#####---#---#"}),"\n",(0,s.jsx)(r.p,{children:"4 # # | | | | # #"}),"\n",(0,s.jsx)(r.p,{children:"#############################"}),"\n",(0,s.jsx)(r.p,{children:"(图 1)"}),"\n",(0,s.jsx)(r.p,{children:"‘#’ = Wall\r\n‘|’ = No wall\r\n'-' = No wall"}),"\n",(0,s.jsx)(r.p,{children:"图1是一个城堡的地形图。请你编写一个程序，计算城堡一共有多少房间，最大的房间有多大。城堡被分割成m*n(m≤50，n≤50)个方块，每个方块可以有0~4面墙。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"程序从标准输入设备读入数据。第一行是两个整数，分别是南北向、东西向的方块数。在接下来的输入行里，每个方块用一个数字(0≤p≤50)描述。用一个数字表示方块周围的墙，1表示西墙，2表示北墙，4表示东墙，8表示南墙。每个方块用代表其周围墙的数字之和表示。城堡的内墙被计算两次，方块(1,1)的南墙同时也是方块(2,1)的北墙。输入的数据保证城堡至少有两个房间。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"城堡的房间数、城堡中最大房间所包括的方块数。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"4\r\n7\r\n11 6 11 6 3 10 6\r\n7 9 6 13 5 15 5\r\n1 10 12 7 13 7 5\r\n13 11 10 8 10 12 13\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"5\r\n9\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-13",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-13",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 60;\r\nint wall[N][N], fw[N][N];\r\nint roomnum = 0, sizea = 0;\r\nvoid dfs(int x, int y) {\r\n    // 查找点(x,y)的信息\r\n    if (fw[x][y]) return;\r\n    sizea++;\r\n    fw[x][y] = roomnum;\r\n    if ((wall[x][y] & 1) == 0)dfs(x, y - 1);\r\n    if ((wall[x][y] & 2) == 0)dfs(x - 1, y);\r\n    if ((wall[x][y] & 4) == 0)dfs(x, y + 1);\r\n    if ((wall[x][y] & 8) == 0)dfs(x + 1, y);\r\n}\r\n\r\nint main() {\r\n    int h, w;cin >> h >> w;\r\n    for (int i = 1;i <= h;i++){\r\n        for (int j = 1;j <= w;j++){\r\n            cin >> wall[i][j];\r\n        }\r\n    }\r\n    int maxroom = 0;\r\n    for (int i = 1;i <= h;i++) {\r\n        for (int j = 1;j <= w;j++) {\r\n            if (!fw[i][j]) {\r\n                // (i,j)没被找过(新的area)\r\n                roomnum++;\r\n                dfs(i, j);\r\n                maxroom = max(maxroom, sizea);\r\n                sizea = 0;\r\n            }\r\n        }\r\n    }\r\n    cout << roomnum << endl << maxroom << endl;\r\n\r\n    return 0;\r\n}\r\n\r\n/*\r\n  2\r\n1   4\r\n  8\r\n*/\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1255-a015-分解因式",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1255-a015-分解因式",children:"#"}),"1255: A015 分解因式"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-14",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-14",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"给出一个正整数a，要求分解成若干个正整数的乘积，即a = a1 * a2 * a3 * ... * an，并且1 < a1 <= a2 <= a3 <= ... <= an，问这样的分解的种数有多少。注意到a = a也是一种分解。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"第1行是测试数据的组数n，后面跟着n行输入。每组测试数据占1行，包括一个正整数a (1 < a < 32768)。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"n行，每行输出对应一个输入。输出应是一个正整数，指明满足要求的分解的种数。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"2\r\n2\r\n20\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"1\r\n4\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-14",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-14",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\nint ans = 0;\r\nvoid dfs(int tar, int now) {\r\n    if (tar != 1) {\r\n        for (int i = now;i <= tar;i++)\r\n            if (tar % i == 0)\r\n                dfs(tar / i, i);\r\n    }\r\n    else {\r\n        ans++;return;\r\n    }\r\n}\r\n\r\nint main() {\r\n    int t;cin >> t;\r\n    while (t--) {\r\n        ans = 0;\r\n        int n;cin >> n;\r\n        if (n == 2) {\r\n            cout << 1 << endl;\r\n            continue;\r\n        }\r\n        dfs(n, 2);\r\n        cout << ans << endl;\r\n    }\r\n    \r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1256-a016-数字拼凑",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1256-a016-数字拼凑",children:"#"}),"1256: A016 数字拼凑"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-15",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-15",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"现在给你这样一个任务，要求找出具有下列性质数的个数（包含输入的正整数 n）。\r\n先输入一个正整数 n(n <= 500)，然后对此正整数按照如下方法进行处理："}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"不作任何处理；"}),"\n",(0,s.jsx)(r.li,{children:"在它的左边拼接一个正整数，但该正整数不能超过原数的一半或者是上一个被拼接数的一半；"}),"\n",(0,s.jsx)(r.li,{children:"加上数后，继续按此规则进行处理，直到不能再加正整数为止。"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"一个正整数n。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"一个正整数，表示具有该性质数的个数。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"6\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"6\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-15",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-15",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\nint fx[1010];\r\nint f(int n) {\r\n    if (n == 1)return 1;\r\n    if (fx[n])return fx[n];\r\n\r\n    int cnt = 0;\r\n    for (int i = 1;i <= n / 2;i++)\r\n        cnt += f(i);\r\n    return fx[n] = cnt + 1;\r\n}\r\n\r\nint main() {\r\n    int n;\r\n    cin >> n;\r\n    cout << f(n) << endl;\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h2,{id:"算法2排序b",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#算法2排序b",children:"#"}),(0,s.jsx)(r.strong,{children:"算法2排序B"})]}),"\n",(0,s.jsxs)(r.h3,{id:"1257-b001-快乐的蠕虫",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1257-b001-快乐的蠕虫",children:"#"}),"1257: B001 快乐的蠕虫"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-16",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-16",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"有一只快乐的蠕虫居住在一个m\xd7n大小的网格中。在网格的某些位置放置了k块石头。网格中的每个位置要么是空的，要么放置了一块石头。当蠕虫睡觉时，它在水平方向或垂直方向上躺着，把身体尽可能伸展开来。蠕虫的身躯既不能进入到放有石块的方格中，也不能伸出网格外。而且蠕虫的长度不会短于2个方格的大小。\r\n本题的任务是给定网格，要计算蠕虫可以在多少个不同的位置躺下睡觉。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入文件的第1行是一个整数t，1<=t<=11,表示测试数据的个数。每个测试数据的第1行为3个整数：m,n和k(0<=m,n,k<=200000),接下来有k行，每行为2个整数，描述了一块石头的位置（行和列，最左上角位置为（1,1））。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对每个测试数据，输出占一行，为一个整数，表示蠕虫可以躺着睡觉的不同位置的数目。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"1\r\n5 5 6\r\n1 5\r\n2 3\r\n2 4\r\n4 2 \r\n4 3\r\n5 1\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"9\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-16",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-16",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 1e5 + 50;\r\nint n, m, k;\r\n\r\nstruct node {\r\n    int x, y;\r\n    node(int x, int y) : x(x), y(y) {}\r\n};\r\nbool cmp1(node a, node b) {\r\n    if (a.x == b.x)\r\n        return a.y < b.y;\r\n    return a.x < b.x;\r\n}\r\nbool cmp2(node a, node b) {\r\n    if (a.y == b.y)\r\n        return a.x < b.x;\r\n    return a.y < b.y;\r\n}\r\n\r\nvector<node> a;\r\nint ans = 0;\r\nvoid search(bool f) {\r\n    for (int i = 1;i < a.size();i++) {\r\n        int nx = a[i].x, ny = a[i].y;\r\n        int px = a[i - 1].x, py = a[i - 1].y;\r\n        if (f) {\r\n            if (nx != px)continue;\r\n            if (ny - py > 2)ans++;\r\n        }\r\n        else {\r\n            if (ny != py)continue;\r\n            if (nx - px > 2)ans++;\r\n        }\r\n    }\r\n}\r\n\r\nvoid solve() {\r\n    cin >> m >> n >> k;\r\n    ans = 0;\r\n    a.clear();\r\n    for (int i = 0;i < k;i++) {\r\n        int x, y;cin >> x >> y;\r\n        a.push_back(node(x, y));\r\n    }\r\n    for (int i = 0;i < m + 2;i++) {\r\n        a.push_back(node(i, 0));\r\n        a.push_back(node(i, n + 1));\r\n    }\r\n    for (int i = 0;i < n + 2;i++) {\r\n        a.push_back(node(0, i));\r\n        a.push_back(node(m + 1, i));\r\n    }\r\n    sort(a.begin(), a.end(), cmp1);\r\n    search(true);\r\n    sort(a.begin(), a.end(), cmp2);\r\n    search(false);\r\n    cout << ans << endl;\r\n}\r\n\r\nint main() {\r\n    int t;cin >> t;\r\n    while (t--)\r\n        solve();\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1258-b002-单词重组",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1258-b002-单词重组",children:"#"}),"1258: B002 单词重组"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-17",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-17",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"在美国数以百万计的报纸中，有一种单词游戏称为猜词。游戏的目标是猜谜，为了找出答案中缺少的字母，有必要对4个单词的字母顺序重新调整。在本题中，你的任务是编写程序实现对单词中的字母顺序重新调整。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入文件包含4部分：\r\n（1） 一部字典，包含至少1个单词，至多100个单词，每个单词占一行；"}),"\n",(0,s.jsx)(r.p,{children:"（2） 字典后是一行字符串“XXXXXX”，表示字典结束；"}),"\n",(0,s.jsx)(r.p,{children:"（3） 一个或多个被打乱字母顺序的“单词”，每个单词占一行，你必须整理这些字母的顺序；"}),"\n",(0,s.jsx)(r.p,{children:"（4） 输入文件的最后一样为字符串“XXXXXX”，代表输入文件结束。"}),"\n",(0,s.jsx)(r.p,{children:"所有单词，包括字典中的单词和被打乱字母顺序的单词，都只包含小写英文字母，并且至少包含一个字母，至多包含6个字母。字典中的单词不一定是按顺序排列的，但保证字典中的单词是唯一的。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对输入文件中每个被打乱字母顺序的单词w，按字母顺序输出字典中所有满足以下条件的单词的列表：通过调整单词w中的字母顺序，可以变成字典中的单词。列表中的每个单词占一行。如果列表为空（即单词w不能转换成字典中的任何一个单词），则输出一行字符串“NOT A VALID WORD”。以上两种情形都在列表后，输出一行包含6个星号字符的字符串，表示列表结束。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"tarp\r\ngiven\r\nscore\r\nrefund\r\nonly\r\ntrap\r\nwork\r\nearn\r\ncourse\r\npepper\r\npart\r\nXXXXXX\r\nresco\r\nnfudre\r\naptr\r\nsett\r\noresuc\r\nXXXXXX\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"score\r\n******\r\nrefund\r\n******\r\npart\r\ntarp\r\ntrap\r\n******\r\nNOT A VALID WORD\r\n******\r\ncourse\r\n******\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-17",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-17",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp"})}),"\n",(0,s.jsxs)(r.h2,{id:"算法2查找c",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#算法2查找c",children:"#"}),(0,s.jsx)(r.strong,{children:"算法2查找C"})]}),"\n",(0,s.jsxs)(r.h3,{id:"1264-c001-字符串计数",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1264-c001-字符串计数",children:"#"}),"1264: C001 字符串计数"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-18",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-18",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"给出m个字符串，要求输出重复n次的字符串有几个。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"先给定一个N，N≤100000，接着输入N个字符串。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对于每组测试数据，输出若干行，每行两个正整数，第一个数表示重复的次数，第二个数表示在此重复次数下有几种不同的字符串。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"5\r\nBBA\r\nBBA\r\nBEA\r\nDEC\r\nCCF\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"1 3\r\n2 1\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-18",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-18",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 1e5 + 50;\r\nint nx[N];\r\n\r\nint main() {\r\n    int n;cin >> n;\r\n    map<string, int>sts;\r\n    string st;\r\n    while (n--) {\r\n        cin >> st;\r\n        if (sts.find(st) != sts.end()) {\r\n            map<string, int>::const_iterator it = sts.find(st);\r\n            int cnt = (*it).second;\r\n            sts[st] = ++cnt;\r\n        }\r\n        else\r\n            sts.insert(make_pair(st, 1));\r\n    }\r\n    map<string, int>::const_iterator it = sts.begin();\r\n    for (;it != sts.end();it++) {\r\n        nx[(*it).second]++;\r\n    }\r\n    for (int i = 1;i <= sts.size();i++) {\r\n        if (nx[i])\r\n            cout << i << " " << nx[i] << endl;\r\n    }\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1265-c002-赌徒",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1265-c002-赌徒",children:"#"}),"1265: C002 赌徒"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-19",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-19",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"N个赌徒一起决定玩一个游戏：\r\n游戏刚开始的时候，每个赌徒把赌注放在桌上并遮住，侍者要查看每个人的赌注并确保每个人的赌注都不一样。如果一个赌徒没钱了，则他要借一些筹码，因此他的赌注为负数。假定赌注都是整数。\r\n最后赌徒们揭开盖子，出示他们的赌注。如果谁下的赌注是其他赌徒中某3个人下的赌注之和，则他是胜利者。如果有多于一个胜利者，则下的赌注最大的赌徒才是最终的胜利者。\r\n例如，假定赌徒为：Tom、Bill、John、Roger和Bush，他们下的赌注分别为：2、3、5、7和12 。因此最终获胜的是Bush（并且没有其他人是胜利者），因为他下的赌注为12，而其他的人下的赌注之和也等于12：2+3+7=12。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入文件中包含了多组赌徒下的赌注。每组赌注的数据第1行是一个整数n,1<=n<=1000,代表赌徒的个数，然后是他们下的赌注，每个人的赌注占一行，这些赌注各不相同，并且范围是[-536870912,+536870911]。输入文件的最后一行为0，代表输入结束。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对每组赌注，输出胜利者下的赌注，如果没有解，则输出“no solution”。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"5\r\n2 \r\n3 \r\n5 \r\n7 \r\n12\r\n5\r\n2 \r\n16 \r\n64 \r\n256 \r\n1024\r\n0\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"12\r\nno solution\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-19",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-19",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 1050;\r\n\r\nint n;\r\nint gbr[maxn];\r\nvoid solve() {\r\n	for (int i = 0;i < n;i++) {\r\n		cin >> gbr[i];\r\n	}\r\n	sort(gbr, gbr + n);\r\n	for (int pi = n - 1;pi >= 3;pi--) {\r\n		for (int i = pi - 1;i >= 2;i--) {\r\n			for (int j = i - 1;j >= 1;j--) {\r\n				for (int k = j - 1;k >= 0;k--) {\r\n					int sum = gbr[i] + gbr[j] + gbr[k];\r\n					if (sum == gbr[pi]) {\r\n						cout << gbr[pi] << "\\n";\r\n						return;\r\n					}\r\n				}\r\n			}\r\n		}\r\n	}\r\n	cout << "no solution\\n";\r\n}\r\n\r\nint main() {\r\n	// int t;cin >> t;\r\n	// while (t--)\r\n	while (cin >> n && n)\r\n		solve();\r\n\r\n	return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1266-c003-半素数",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1266-c003-半素数",children:"#"}),"1266: C003 半素数"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-20",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-20",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"素数的定义：对于一个大于１的正整数，如果除了１和它本身没有其他的正约数了，那么这个数就称为素数。例如，2,11,67,89是素数，8,20,27不是素数。\r\n半素数的定义：对于一个大于1的正整数，如果它可以被分解成2个素数的乘积，则称该数为半素数，例如6是一个半素数，而12不是。\r\n你的任务是判断一个数是否是半素数。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入文件中有多个测试数据，每个测试数据包含一个整数N，2<=N<=1,000,000。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对每个测试数据，如果N是半素数，则输出YES，否则输出NO。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"3\r\n4\r\n6\r\n12\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"NO\r\nYES\r\nYES\r\nNO\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-20",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-20",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 1e6 + 100;\r\nbool isnp[maxn];\r\nvector<int>primes;\r\nvoid Prime(int n) {\r\n    for (int i = 2;i <= n;i++) {\r\n        if (!isnp[i])\r\n            primes.push_back(i);\r\n        for (int p : primes) {\r\n            if (p * i > n)break;\r\n            isnp[p * i] = true;\r\n            if (i % p == 0)\r\n                break;\r\n        }\r\n    }\r\n}\r\nint main() {\r\n    Prime(maxn - 50);\r\n    int n;\r\n    while (cin >> n) {\r\n        bool f = false;\r\n        for (int i = 2;i * i <= n;i++) {\r\n            if (n % i == 0 && !isnp[i] && !isnp[n / i]){\r\n                f = true;break;\r\n            }\r\n        }\r\n        f ? cout << "YES\\n" : cout << "NO\\n";\r\n    }\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1267-c004-棍子的膨胀",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1267-c004-棍子的膨胀",children:"#"}),"1267: C004 棍子的膨胀"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-21",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-21",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"当一根长度为L的细长金属棍子加热n度后，它会膨胀到一个新的长度L’=(1+n*C)*L,其中C为该金属的热膨胀系数。\r\n当一根细长的金属棍子固定在两堵墙之间，然后加热，则棍子会变成圆弓形，棍子的原始位置为该圆弓形的弦，如图所示。"}),"\n",(0,s.jsx)(r.p,{children:"![1699328671418](D:\\Tencent&&\\新建文件夹\\WeChat Files\\wxid_j7esazuly79422\\FileStorage\\Temp\\1699328671418.png)"}),"\n",(0,s.jsx)(r.p,{children:"图 膨胀的金属棍子（上为膨胀前，下为膨胀后）\r\n你的任务是计算棍子中心的偏离距离。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入文件包含多个测试数据，每个测试数据占一行。每个测试数据包含3个非负整数：棍子的初始长度，单位为毫米；加热前后的温差，单位为度；该金属的热膨胀系数。输入数据保证膨胀的长度不超过棍子本身长度的一半。输入文件的最后一行为3个负数，代表输入结束，该测试数据不需处理。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对每个测试数据，输出金属棍子中心加热后偏离的距离，单位为毫米，保留小数点后3位有效数字。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"1000 100 0.0001\r\n15000 10 0.00006\r\n10 0 0.001\r\n-1 -1 -1\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"61.329\r\n225.020\r\n0.000\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-21",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-21",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst double eps = 1e-12;\r\nconst double pi = 3.1415926535;\r\nint main() {\r\n    double l, t, c;\r\n    while (cin >> l >> t >> c) {\r\n        if (l < 0 && t < 0 && c < 0)break;\r\n        double nl = (1.0 + t * c) * l;\r\n        double dr = pi, dl = 0.0;\r\n        while (1) {\r\n            double mid = (dr + dl) / 2;\r\n            double r = l / (sin(mid / 2) * 2);\r\n            if (dr - dl < eps) {\r\n                double ans = r - r * cos(mid / 2.0);\r\n                printf("%.3lf\\n", ans);\r\n                break;\r\n            }\r\n            double bar = mid * r;\r\n            if (bar > nl)dr = mid;\r\n            else dl = mid;\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1268-c005-电缆主",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1268-c005-电缆主",children:"#"}),"1268: C005 电缆主"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-22",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-22",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"奶牛的居民决定举办一场编程区域赛。裁判委员会自告奋勇并宣称要举办有史以来最公正的比赛。队员们的电脑采用“星型”拓扑结构互连（也就是说要把所有电脑都连在一个中央集线器上）。为了让比赛尽可能公正，裁判委员会的头头们决定：将比赛队员们平均地安置在集线器周围，距离集线器有一个相同的距离。\r\n裁判委员会为了采买网络电缆，联系了一家当地的网络方案提供商，要求他们提供一些登等长的电缆。这些电缆应越长越好，从而使得队员们与其他队员的距离越大。\r\n这家公司的电缆工来办这件事。他知道仓库里每个电缆的长度（精确到厘米）。他每次切割电缆时的精度也是厘米。但他现在不知切多少，所以完全茫然中。\r\n你要写个程序计算出一条电缆最多多长使之可以提供一定能够数目的电缆，帮着这位电缆工完成任务。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"第一行是两个整数N和K，N（1<=N<=10000）是仓库里的电缆数，K（1<=K<=10000）是所需电缆数。接下来的N行每一行一个数，表示电缆的长度（单位是米）。电缆长度最小为1米，最大为100千米。每个表示长度的数均表示为带两位小数的浮点数（即精确到厘米）。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"所需的电缆一条最长有多少米（精确到厘米，即保留小数点两位）。如果不能提供K条大于等于1厘米的等长电缆就输出“0.00”。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"4 11\r\n8.02\r\n7.43\r\n4.57\r\n5.39\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"2.00\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-22",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-22",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 10050;\r\nint len[maxn];\r\nint n, k;\r\nint cnt(int l) {\r\n    int ret = 0;\r\n    for (int i = 0;i < n;i++) {\r\n        ret += len[i] / l;\r\n    }\r\n    return ret;\r\n}\r\nint main() {\r\n    cin >> n >> k;\r\n    int left = 1, right = 0;\r\n    for (int i = 0;i < n;i++) {\r\n        double ni;cin >> ni;\r\n        ni *= 100;\r\n        right = max(right, (int)ni);\r\n        len[i] = (int)ni;\r\n    }\r\n    if (cnt(1) < k) {\r\n        cout << "0.00\\n";\r\n        return 0;\r\n    }\r\n    int ans = 0;\r\n    while (left <= right) {\r\n        int mid = (left + right) / 2;\r\n        if (cnt(mid) < k)right = mid - 1;\r\n        else {\r\n            ans = mid;\r\n            left = mid + 1;\r\n        }\r\n    }\r\n    printf("%.2lf", 1.0 * ans / 100);\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1269-c006-宝贝鱼",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1269-c006-宝贝鱼",children:"#"}),"1269: C006 宝贝鱼"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-23",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-23",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"你刚刚从奶牛搬到一个大城市里。这里的人说一种让人理解不能的外文方言。万幸，你有本字典可以帮助你理解。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入包含多达100，000个字典词条，然后是一个空行，然后是一条消息，这条消息包含多达100，000个单词。每个词条占一行，先是一个英语单词，然后是一个空格，然后是一个外文方言词。一个方言词在字典中出现不超过一次。消息是一个外文方言词序列，一个词占一行。每个词是一个最长为10的小写字母序列。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"将消息的外文词翻译成英语，一个词一行。查不到的词应该翻译成“eh”。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"dog ogday\r\ncat atcay\r\npig igpay\r\nfroot ootfray\r\nloops oopslay\r\n\r\natcay\r\nittenkay\r\noopslay\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"cat\r\neh\r\nloops\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-23",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-23",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 10050;\r\nmap<string, string>mp;\r\nint main() {\r\n    string s1, s2;\r\n    while (1) {\r\n        char t = getchar();\r\n        if (t == '\\n')break;\r\n        cin >> s1 >> s2;\r\n        s1.insert(s1.begin(), t);\r\n        mp.insert(make_pair(s2, s1));\r\n        cin.get();\r\n    }\r\n    string word;\r\n    while (cin >> word) {\r\n        auto pos = mp.find(word);\r\n        if (pos != mp.end()) {\r\n            cout << pos->second << endl;\r\n        }\r\n        else cout << \"eh\\n\";\r\n    }\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1270-c007-星空",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1270-c007-星空",children:"#"}),"1270: C007 星空"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-24",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-24",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"将夜空抽象成二维平面，每个星星一个(X,Y)坐标。这些点可以形成多少正方形？"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"多组输入。对于每组数据，第一行是n（1<=n<=1000）表示已知星星数，然后是n行，每行一个坐标值。坐标绝对值小于20000。n=0表示结束。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对于每组数据输出形成正方形的个数。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"4\r\n1 0\r\n0 1\r\n1 1\r\n0 0\r\n0\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"1\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-24",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-24",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp"})}),"\n",(0,s.jsxs)(r.h2,{id:"算法2动态规划d",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#算法2动态规划d",children:"#"}),(0,s.jsx)(r.strong,{children:"算法2动态规划D"})]}),"\n",(0,s.jsxs)(r.h3,{id:"1272-d001-数字三角形",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1272-d001-数字三角形",children:"#"}),"1272: D001 数字三角形"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-25",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-25",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"7\r\n3 8\r\n8 1 0\r\n2 7 4 4\r\n4 5 2 6 5"}),"\n",(0,s.jsx)(r.p,{children:"上图给出了一个数字三角形。从三角形的顶部到底部有很多条不同的路径。对于每条路径，把路径上面的数加起来可以得到一个和，你的任务就是找到最大的和。"}),"\n",(0,s.jsx)(r.p,{children:"注意：路径上的每一步只能从一个数走到下一层上和它最近的左边的那个数或者右边的那个数。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入的第一行是一个整数N (1 < N <= 100)，给出三角形的行数。下面的N行给出数字三角形。数字三角形上的数的范围都在0和100之间。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"输出最大的和。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"5\r\n7\r\n3 8\r\n8 1 0 \r\n2 7 4 4\r\n4 5 2 6 5\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"30\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-25",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-25",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 120;\r\nll number[maxn][maxn];\r\nll dp[maxn][maxn]; // 记录走到(i,j)点时最好的和\r\n\r\nint main() {\r\n    int n;\r\n    while (cin >> n) {\r\n        for (int i = 1;i <= n;i++)\r\n            for (int j = 1;j <= i;j++)\r\n                cin >> number[i][j];\r\n        for (int i = 1;i < n;i++)\r\n            dp[n][i] = number[n][i];\r\n        for (int i = n;i > 1;i--) {\r\n            for (int j = 1;j <= i;j++) {\r\n                dp[i - 1][j] = max(dp[i][j], dp[i][j + 1]) + number[i - 1][j];\r\n            }\r\n        }\r\n        cout << dp[1][1] << endl;\r\n    }\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1273-d002-最长上升子序列",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1273-d002-最长上升子序列",children:"#"}),"1273: D002 最长上升子序列"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-26",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-26",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"一个数的序列bi，当b1 < b2 < ... < bS的时候，我们称这个序列是上升的。对于给定的一个序列(a1, a2, ..., aN)，我们可以得到一些上升的子序列(ai1, ai2, ..., aiK)，这里1 <= i1 < i2 < ... <iK <= N。比如，对于序列(1, 7, 3, 5, 9, 4, 8)，有它的一些上升子序列，如(1, 7), (3, 4, 8)等等。这些子序列中最长的长度是4，比如子序列(1, 3, 5, 8)。"}),"\n",(0,s.jsx)(r.p,{children:"你的任务，就是对于给定的序列，求出最长上升子序列的长度。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入有很多组，每组输入的第一行是序列的长度N (1 <= N <= 1000)。第二行给出序列中的N个整数，这些整数的取值范围都在0到10000。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"输出每组的最长上升子序列的长度。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"7\r\n1 7 3 5 9 4 8\r\n6\r\n2 3 4 1 6 5\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"4\r\n4\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-26",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-26",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<iostream>\r\n#include<vector>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 1010;\r\nint a[maxn];\r\n// int dp[maxn];\r\nint main() {\r\n    int n;\r\n    while (cin >> n) {\r\n        for (int i = 1;i <= n;i++)cin >> a[i];\r\n        vector<int> lmax;\r\n        lmax.push_back(a[1]);\r\n        for (int i = 2;i <= n;i++) {\r\n            if (a[i] > lmax.back()) {\r\n                lmax.push_back(a[i]);\r\n            }\r\n            else if (a[i] < lmax.back()) {\r\n                int l = 0, r = lmax.size() - 1;\r\n                \r\n                while (l < r) {\r\n                    int md = (l + r) / 2;\r\n                    if (lmax[md] <= a[i])l = md + 1;\r\n                    else r = md;\r\n                }\r\n                lmax[l] = a[i];\r\n            }\r\n            // for (int j = 0;j < lmax.size();j++)\r\n            //     cout << lmax[j] << " ";\r\n            // cout << endl;\r\n        }\r\n        cout << lmax.size() << endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1274-d003-help-jimmy",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1274-d003-help-jimmy",children:"#"}),"1274: D003 Help Jimmy"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-27",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-27",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:'"Help Jimmy" 是在下图所示的场景上完成的游戏：'}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://images.ptausercontent.com/bec7f459-7ef4-4e46-be76-59aa3c0c100c.png",alt:"D003.png"})}),"\n",(0,s.jsx)(r.p,{children:"场景中包括多个长度和高度各不相同的平台。地面是最低的平台，高度为零，长度无限。\r\nJimmy老鼠在时刻0从高于所有平台的某处开始下落，它的下落速度始终为1米/秒。当Jimmy落到某个平台上时，游戏者选择让它向左还是向右跑，它跑动的速度也是1米/秒。当Jimmy跑到平台的边缘时，开始继续下落。Jimmy每次下落的高度不能超过MAX米，不然就会摔死，游戏也会结束。\r\n设计一个程序，计算Jimmy到地面时可能的最早时间。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"第一行是测试数据的组数t（0 <= t <= 20）。每组测试数据的第一行是四个整数N，X，Y，MAX，用空格分隔。N是平台的数目（不包括地面），X和Y是Jimmy开始下落的位置的横竖坐标，MAX是一次下落的最大高度。接下来的N行每行描述一个平台，包括三个整数，X1[i]，X2[i]和H[i]。H[i]表示平台的高度，X1[i]和X2[i]表示平台左右端点的横坐标。1<= N <= 1000，-20000 <= X, X1[i], X2[i] <= 20000，0 < H[i] < Y <= 20000（i = 1..N）。所有坐标的单位都是米。\r\nJimmy 的大小和平台的厚度均忽略不计。如果Jimmy 恰好落在某个平台的边缘，被视为落在平台上。所有的平台均不重叠或相连。测试数据保Jimmy一定能安全到达地面。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对输入的每组测试数据，输出一个整数，Jimmy到地面时可能的最早时间。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"1\r\n3 8 17 20\r\n0 10 8\r\n0 10 13\r\n4 14 3\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"23\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-27",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-27",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 2e4 + 20;\r\nstruct PT {\r\n    int x1, x2, h;\r\n    bool operator<(const PT& P)const {\r\n        return h > P.h;\r\n    }\r\n}pt[maxn];\r\nint n, x, y, mx;\r\nint findnext(int id, int x) {\r\n    // 寻找x下的第一块板\r\n    for (int i = id + 1;i <= n + 1;i++) {\r\n        if (pt[i].x1 <= x && pt[i].x2 >= x) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\nint fun[maxn];\r\nint dfs(int id, int p, int from) {\r\n    // cout << id << " " << p << " " << from << endl;\r\n    int lp = pt[id].x1, rp = pt[id].x2;\r\n    // 当前是否到达终点\r\n    if (id == n + 1)\r\n        return 0;\r\n    int lenl = -1, lenr = -1;\r\n    // 左走\r\n    int lpid = findnext(id, lp);\r\n    if (lpid != -1 && pt[id].h - pt[lpid].h <= mx) {\r\n        // 可走\r\n        lenl= dfs(lpid, lp, id);\r\n    }\r\n    // 右走\r\n    int rpid = findnext(id, rp);\r\n    if (rpid != -1 && pt[id].h - pt[rpid].h <= mx) {\r\n        // 可走\r\n        lenr= dfs(rpid, rp, id);\r\n    }\r\n    if (lenl != -1 && lenr != -1)\r\n        return fun[id] = min(lenl + p - lp, lenr + rp - p);\r\n    else if (lenl == -1)\r\n        return fun[id] = lenr + rp - p;\r\n    else if (lenr == -1)\r\n        return fun[id] = lenl + p - lp;\r\n    else\r\n        return 0;\r\n}\r\n\r\nint main() {\r\n    int t;cin >> t;\r\n    while (t--) {\r\n        cin >> n >> x >> y >> mx;\r\n        pt[0].x1 = x;pt[0].x2 = x;pt[0].h = y;\r\n        for (int i = 1;i <= n;i++) {\r\n            cin >> pt[i].x1 >> pt[i].x2 >> pt[i].h;\r\n        }\r\n        pt[n + 1].h = 0;pt[n + 1].x1 = -maxn;pt[n + 1].x2 = maxn;\r\n        sort(pt, pt + n + 1);\r\n        // 从高到低排列\r\n        dfs(0, x, -1);\r\n        cout << y + fun[0] << endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1275-d004-最长公共子序列",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1275-d004-最长公共子序列",children:"#"}),"1275: D004 最长公共子序列"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-28",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-28",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"我们称序列Z = < z1, z2, ..., zk >是序列X = < x1, x2, ..., xm >的子序列当且仅当存在严格上升的序列< i1, i2, ..., ik >，使得对j = 1, 2, ... ,k, 有xij = zj。比如Z = < a, b, f, c > 是X = < a, b,c, f, b, c >的子序列。\r\n现在给出两个序列X和Y，你的任务是找到X和Y的最大公共子序列，也就是说要找到一个最长的序列Z，使得Z既是X的子序列也是Y的子序列。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入包括多组测试数据。每组数据包括一行，给出两个长度不超过200的字符串，表示两个序列。两个字符串之间由若干个空格隔开。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"输入包括多组测试数据。每组数据包括一行，给出两个长度不超过200的字符串，表示两个序列。两个字符串之间由若干个空格隔开。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"abcfbc abfcab\r\nprogramming contest\r\nabcd mnp\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"4\r\n2\r\n0\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-28",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-28",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int maxn = 220;\r\nint dp[maxn][maxn];\r\nint main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    string s, t;\r\n    while (cin >> s >> t) {\r\n        s = " " + s;t = " " + t;\r\n        memset(dp, 0, sizeof(dp));\r\n        for (int i = 1;i < s.size();i++) {\r\n            for (int j = 1;j < t.size();j++) {\r\n                if (s[i] == t[j])\r\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\r\n                else\r\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\r\n            }\r\n        }\r\n        cout << dp[s.size() - 1][t.size() - 1] << endl;\r\n    }\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1276-d005-陪审团的人选",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1276-d005-陪审团的人选",children:"#"}),"1276: D005 陪审团的人选"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-29",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-29",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"在遥远的国家佛罗布尼亚，嫌犯是否有罪，须由陪审团决定。陪审团是由法官从公众中挑选的。先随机挑选n个人作为陪审团的候选人，然后再从这n个人中选m人组成陪审团。选m人的办法是：\r\n控方和辩方会根据对候选人的喜欢程度，给所有候选人打分，分值从0到20。为了公平起见，法官选出陪审团的原则是：选出的m个人，必须满足辩方总分和控方总分的差的绝对值最小。如果有多种选择方案的辩方总分和控方总分的之差的绝对值相同，那么选辩控双方总分之和最大的方案即可。最终选出的方案称为陪审团方案。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入包含多组数据。每组数据的第一行是两个整数n和m，n是候选人数目，m是陪审团人数。注意，1<=n<=200, 1<=m<=20而且m<=n。接下来的n行，每行表示一个候选人的信息，它包含2个整数，先后是控方和辩方对该候选人的打分。候选人按出现的先后从1开始编号。两组有效数据之间以空行分隔。最后一组数据n=m=0。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对每组数据，先输出一行，表示答案所属的组号, 如 'Jury #1', 'Jury #2', 等。接下来的一行要象例子那样输出陪审团的控方总分和辩方总分。再下来一行要以升序输出陪审团里每个成员的编号，两个成员编号之间用空格分隔。每组输出数据须以一个空行结束。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"4 2\r\n1 2\r\n2 3\r\n4 1\r\n6 2\r\n0 0\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"Jury #1\r\nBest jury has value 6 for prosecution and value 4 for defence:\r\n2 3\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-29",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-29",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nconst int N = 205;\r\nconst int inf = 0x3f;\r\nint dp[N][25][4 * N], a[N], b[N];\r\nvector<int> mark;\r\n\r\nint main()\r\n{\r\n    int n, m, T = 1;\r\n    while (cin >> n >> m && n) {\r\n        mark.clear();\r\n        memset(dp, -inf, sizeof(dp));\r\n        dp[0][0][400] = 0;\r\n        for (int i = 1;i <= n;i++) {\r\n            cin >> a[i] >> b[i];\r\n        }\r\n        for (int i = 1;i <= n;i++) {\r\n            for (int j = 0;j <= m;j++) {\r\n                for (int k = 0;k <= 800;k++) {\r\n                    dp[i][j][k] = dp[i - 1][j][k];\r\n                    int tt = k - a[i] + b[i];\r\n                    if (tt < 0 || tt >= 800)\r\n                        continue;\r\n                    if (j == 0)\r\n                        continue;\r\n                    dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j - 1][tt] + a[i] + b[i]);\r\n                }\r\n            }\r\n        }\r\n        int t = 0;\r\n        while (dp[n][m][t + 400] < 0 && dp[n][m][-t + 400] < 0) t++;\r\n        if (dp[n][m][t + 400] > dp[n][m][-t + 400]) t += 400;\r\n        else t = 400 - t;\r\n\r\n        int nn = n, mm = m, cnt = 0;\r\n        while (mm) {\r\n            if (dp[nn][mm][t] == dp[nn - 1][mm][t]) {\r\n                nn--;\r\n            }\r\n            else {\r\n                mark.push_back(nn);\r\n                t -= a[nn] - b[nn];\r\n                nn--;mm--;\r\n                cnt++;\r\n            }\r\n        }\r\n        int sum1 = 0, sum2 = 0;\r\n        for (int i = 0;i < cnt;i++) {\r\n            sum1 += a[mark[i]];\r\n            sum2 += b[mark[i]];\r\n        }\r\n        cout << "Jury #" << T++ << "\\nBest jury has value " << sum1 << " for prosecution and value " << sum2 << " for defence:\\n";\r\n        for (int i = cnt - 1;i >= 0;i--)\r\n            cout << mark[i] << \' \';\r\n        cout << "\\n\\n";\r\n    }\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1277-d006-最大和",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1277-d006-最大和",children:"#"}),"1277: D006 最大和"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-30",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-30",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"给定一个n个整数的集合：A={a1, a2,..., an}，我们如下定义函数d(A)："}),"\n",(0,s.jsx)(r.span,{className:"katex-display",children:(0,s.jsxs)(r.span,{className:"katex",children:[(0,s.jsx)(r.span,{className:"katex-mathml",children:(0,s.jsx)(r.math,{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block",children:(0,s.jsxs)(r.semantics,{children:[(0,s.jsxs)(r.mrow,{children:[(0,s.jsx)(r.mi,{children:"d"}),(0,s.jsx)(r.mo,{stretchy:"false",children:"("}),(0,s.jsx)(r.mi,{children:"A"}),(0,s.jsx)(r.mo,{stretchy:"false",children:")"}),(0,s.jsx)(r.mo,{children:"="}),(0,s.jsxs)(r.munder,{children:[(0,s.jsxs)(r.mrow,{children:[(0,s.jsx)(r.mi,{children:"max"}),(0,s.jsx)(r.mo,{children:"⁡"})]}),(0,s.jsxs)(r.mrow,{children:[(0,s.jsx)(r.mn,{children:"1"}),(0,s.jsx)(r.mo,{children:"≤"}),(0,s.jsxs)(r.msub,{children:[(0,s.jsx)(r.mi,{children:"s"}),(0,s.jsx)(r.mn,{children:"1"})]}),(0,s.jsx)(r.mo,{children:"≤"}),(0,s.jsxs)(r.msub,{children:[(0,s.jsx)(r.mi,{children:"t"}),(0,s.jsx)(r.mn,{children:"1"})]}),(0,s.jsx)(r.mo,{children:"≤"}),(0,s.jsxs)(r.msub,{children:[(0,s.jsx)(r.mi,{children:"s"}),(0,s.jsx)(r.mn,{children:"2"})]}),(0,s.jsx)(r.mo,{children:"≤"}),(0,s.jsxs)(r.msub,{children:[(0,s.jsx)(r.mi,{children:"t"}),(0,s.jsx)(r.mn,{children:"2"})]}),(0,s.jsx)(r.mo,{children:"≤"}),(0,s.jsx)(r.mi,{children:"n"})]})]}),(0,s.jsxs)(r.mrow,{children:[(0,s.jsx)(r.mo,{fence:"true",children:"{"}),(0,s.jsx)(r.mtable,{rowspacing:"0.16em",columnalign:"center",columnspacing:"1em",children:(0,s.jsx)(r.mtr,{children:(0,s.jsx)(r.mtd,{children:(0,s.jsx)(r.mstyle,{scriptlevel:"0",displaystyle:"false",children:(0,s.jsxs)(r.mrow,{children:[(0,s.jsxs)(r.msubsup,{children:[(0,s.jsx)(r.mo,{children:"∑"}),(0,s.jsxs)(r.mrow,{children:[(0,s.jsx)(r.mi,{children:"i"}),(0,s.jsx)(r.mo,{children:"="}),(0,s.jsxs)(r.msub,{children:[(0,s.jsx)(r.mi,{children:"s"}),(0,s.jsx)(r.mn,{children:"1"})]})]}),(0,s.jsxs)(r.msub,{children:[(0,s.jsx)(r.mi,{children:"t"}),(0,s.jsx)(r.mn,{children:"1"})]})]}),(0,s.jsxs)(r.msub,{children:[(0,s.jsx)(r.mi,{children:"a"}),(0,s.jsx)(r.mi,{children:"i"})]}),(0,s.jsx)(r.mo,{children:"+"}),(0,s.jsxs)(r.msubsup,{children:[(0,s.jsx)(r.mo,{children:"∑"}),(0,s.jsxs)(r.mrow,{children:[(0,s.jsx)(r.mi,{children:"j"}),(0,s.jsx)(r.mo,{children:"="}),(0,s.jsxs)(r.msub,{children:[(0,s.jsx)(r.mi,{children:"s"}),(0,s.jsx)(r.mn,{children:"2"})]})]}),(0,s.jsxs)(r.msub,{children:[(0,s.jsx)(r.mi,{children:"t"}),(0,s.jsx)(r.mn,{children:"2"})]})]}),(0,s.jsxs)(r.msub,{children:[(0,s.jsx)(r.mi,{children:"a"}),(0,s.jsx)(r.mi,{children:"j"})]})]})})})})}),(0,s.jsx)(r.mo,{fence:"true",children:"}"})]})]}),(0,s.jsx)(r.annotation,{encoding:"application/x-tex",children:"d(A)=\\max\\limits_{1\\leq s_1\\leq t_1\\leq s_2\\leq t_2\\leq n}\n\\begin{Bmatrix}\n\\sum_{i=s_1}^{t_1}a_i+\\sum_{j=s_2}^{t_2}a_j\\\\ \n\\end{Bmatrix}"})]})})}),(0,s.jsxs)(r.span,{className:"katex-html","aria-hidden":"true",children:[(0,s.jsxs)(r.span,{className:"base",children:[(0,s.jsx)(r.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.jsx)(r.span,{className:"mord mathnormal",children:"d"}),(0,s.jsx)(r.span,{className:"mopen",children:"("}),(0,s.jsx)(r.span,{className:"mord mathnormal",children:"A"}),(0,s.jsx)(r.span,{className:"mclose",children:")"}),(0,s.jsx)(r.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.jsx)(r.span,{className:"mrel",children:"="}),(0,s.jsx)(r.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,s.jsxs)(r.span,{className:"base",children:[(0,s.jsx)(r.span,{className:"strut",style:{height:"1.9672em",verticalAlign:"-0.8172em"}}),(0,s.jsx)(r.span,{className:"mop op-limits",children:(0,s.jsxs)(r.span,{className:"vlist-t vlist-t2",children:[(0,s.jsxs)(r.span,{className:"vlist-r",children:[(0,s.jsxs)(r.span,{className:"vlist",style:{height:"0.4306em"},children:[(0,s.jsxs)(r.span,{style:{top:"-2.3829em",marginLeft:"0em"},children:[(0,s.jsx)(r.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(r.span,{className:"sizing reset-size6 size3 mtight",children:(0,s.jsxs)(r.span,{className:"mord mtight",children:[(0,s.jsx)(r.span,{className:"mord mtight",children:"1"}),(0,s.jsx)(r.span,{className:"mrel mtight",children:"≤"}),(0,s.jsxs)(r.span,{className:"mord mtight",children:[(0,s.jsx)(r.span,{className:"mord mathnormal mtight",children:"s"}),(0,s.jsx)(r.span,{className:"msupsub",children:(0,s.jsxs)(r.span,{className:"vlist-t vlist-t2",children:[(0,s.jsxs)(r.span,{className:"vlist-r",children:[(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.3173em"},children:(0,s.jsxs)(r.span,{style:{top:"-2.357em",marginLeft:"0em",marginRight:"0.0714em"},children:[(0,s.jsx)(r.span,{className:"pstrut",style:{height:"2.5em"}}),(0,s.jsx)(r.span,{className:"sizing reset-size3 size1 mtight",children:(0,s.jsx)(r.span,{className:"mord mtight",children:"1"})})]})}),(0,s.jsx)(r.span,{className:"vlist-s",children:"​"})]}),(0,s.jsx)(r.span,{className:"vlist-r",children:(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.143em"},children:(0,s.jsx)(r.span,{})})})]})})]}),(0,s.jsx)(r.span,{className:"mrel mtight",children:"≤"}),(0,s.jsxs)(r.span,{className:"mord mtight",children:[(0,s.jsx)(r.span,{className:"mord mathnormal mtight",children:"t"}),(0,s.jsx)(r.span,{className:"msupsub",children:(0,s.jsxs)(r.span,{className:"vlist-t vlist-t2",children:[(0,s.jsxs)(r.span,{className:"vlist-r",children:[(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.3173em"},children:(0,s.jsxs)(r.span,{style:{top:"-2.357em",marginLeft:"0em",marginRight:"0.0714em"},children:[(0,s.jsx)(r.span,{className:"pstrut",style:{height:"2.5em"}}),(0,s.jsx)(r.span,{className:"sizing reset-size3 size1 mtight",children:(0,s.jsx)(r.span,{className:"mord mtight",children:"1"})})]})}),(0,s.jsx)(r.span,{className:"vlist-s",children:"​"})]}),(0,s.jsx)(r.span,{className:"vlist-r",children:(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.143em"},children:(0,s.jsx)(r.span,{})})})]})})]}),(0,s.jsx)(r.span,{className:"mrel mtight",children:"≤"}),(0,s.jsxs)(r.span,{className:"mord mtight",children:[(0,s.jsx)(r.span,{className:"mord mathnormal mtight",children:"s"}),(0,s.jsx)(r.span,{className:"msupsub",children:(0,s.jsxs)(r.span,{className:"vlist-t vlist-t2",children:[(0,s.jsxs)(r.span,{className:"vlist-r",children:[(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.3173em"},children:(0,s.jsxs)(r.span,{style:{top:"-2.357em",marginLeft:"0em",marginRight:"0.0714em"},children:[(0,s.jsx)(r.span,{className:"pstrut",style:{height:"2.5em"}}),(0,s.jsx)(r.span,{className:"sizing reset-size3 size1 mtight",children:(0,s.jsx)(r.span,{className:"mord mtight",children:"2"})})]})}),(0,s.jsx)(r.span,{className:"vlist-s",children:"​"})]}),(0,s.jsx)(r.span,{className:"vlist-r",children:(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.143em"},children:(0,s.jsx)(r.span,{})})})]})})]}),(0,s.jsx)(r.span,{className:"mrel mtight",children:"≤"}),(0,s.jsxs)(r.span,{className:"mord mtight",children:[(0,s.jsx)(r.span,{className:"mord mathnormal mtight",children:"t"}),(0,s.jsx)(r.span,{className:"msupsub",children:(0,s.jsxs)(r.span,{className:"vlist-t vlist-t2",children:[(0,s.jsxs)(r.span,{className:"vlist-r",children:[(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.3173em"},children:(0,s.jsxs)(r.span,{style:{top:"-2.357em",marginLeft:"0em",marginRight:"0.0714em"},children:[(0,s.jsx)(r.span,{className:"pstrut",style:{height:"2.5em"}}),(0,s.jsx)(r.span,{className:"sizing reset-size3 size1 mtight",children:(0,s.jsx)(r.span,{className:"mord mtight",children:"2"})})]})}),(0,s.jsx)(r.span,{className:"vlist-s",children:"​"})]}),(0,s.jsx)(r.span,{className:"vlist-r",children:(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.143em"},children:(0,s.jsx)(r.span,{})})})]})})]}),(0,s.jsx)(r.span,{className:"mrel mtight",children:"≤"}),(0,s.jsx)(r.span,{className:"mord mathnormal mtight",children:"n"})]})})]}),(0,s.jsxs)(r.span,{style:{top:"-3em"},children:[(0,s.jsx)(r.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsx)(r.span,{children:(0,s.jsx)(r.span,{className:"mop",children:"max"})})]})]}),(0,s.jsx)(r.span,{className:"vlist-s",children:"​"})]}),(0,s.jsx)(r.span,{className:"vlist-r",children:(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.8172em"},children:(0,s.jsx)(r.span,{})})})]})}),(0,s.jsx)(r.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.jsxs)(r.span,{className:"minner",children:[(0,s.jsx)(r.span,{className:"mopen delimcenter",style:{top:"0em"},children:(0,s.jsx)(r.span,{className:"delimsizing size2",children:"{"})}),(0,s.jsx)(r.span,{className:"mord",children:(0,s.jsx)(r.span,{className:"mtable",children:(0,s.jsx)(r.span,{className:"col-align-c",children:(0,s.jsxs)(r.span,{className:"vlist-t vlist-t2",children:[(0,s.jsxs)(r.span,{className:"vlist-r",children:[(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.9346em"},children:(0,s.jsxs)(r.span,{style:{top:"-3.0012em"},children:[(0,s.jsx)(r.span,{className:"pstrut",style:{height:"3em"}}),(0,s.jsxs)(r.span,{className:"mord",children:[(0,s.jsxs)(r.span,{className:"mop",children:[(0,s.jsx)(r.span,{className:"mop op-symbol small-op",style:{position:"relative",top:"0em"},children:"∑"}),(0,s.jsx)(r.span,{className:"msupsub",children:(0,s.jsxs)(r.span,{className:"vlist-t vlist-t2",children:[(0,s.jsxs)(r.span,{className:"vlist-r",children:[(0,s.jsxs)(r.span,{className:"vlist",style:{height:"0.9335em"},children:[(0,s.jsxs)(r.span,{style:{top:"-2.4003em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,s.jsx)(r.span,{className:"pstrut",style:{height:"2.7em"}}),(0,s.jsx)(r.span,{className:"sizing reset-size6 size3 mtight",children:(0,s.jsxs)(r.span,{className:"mord mtight",children:[(0,s.jsx)(r.span,{className:"mord mathnormal mtight",children:"i"}),(0,s.jsx)(r.span,{className:"mrel mtight",children:"="}),(0,s.jsxs)(r.span,{className:"mord mtight",children:[(0,s.jsx)(r.span,{className:"mord mathnormal mtight",children:"s"}),(0,s.jsx)(r.span,{className:"msupsub",children:(0,s.jsxs)(r.span,{className:"vlist-t vlist-t2",children:[(0,s.jsxs)(r.span,{className:"vlist-r",children:[(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.3173em"},children:(0,s.jsxs)(r.span,{style:{top:"-2.357em",marginLeft:"0em",marginRight:"0.0714em"},children:[(0,s.jsx)(r.span,{className:"pstrut",style:{height:"2.5em"}}),(0,s.jsx)(r.span,{className:"sizing reset-size3 size1 mtight",children:(0,s.jsx)(r.span,{className:"mord mtight",children:"1"})})]})}),(0,s.jsx)(r.span,{className:"vlist-s",children:"​"})]}),(0,s.jsx)(r.span,{className:"vlist-r",children:(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.143em"},children:(0,s.jsx)(r.span,{})})})]})})]})]})})]}),(0,s.jsxs)(r.span,{style:{top:"-3.2029em",marginRight:"0.05em"},children:[(0,s.jsx)(r.span,{className:"pstrut",style:{height:"2.7em"}}),(0,s.jsx)(r.span,{className:"sizing reset-size6 size3 mtight",children:(0,s.jsx)(r.span,{className:"mord mtight",children:(0,s.jsxs)(r.span,{className:"mord mtight",children:[(0,s.jsx)(r.span,{className:"mord mathnormal mtight",children:"t"}),(0,s.jsx)(r.span,{className:"msupsub",children:(0,s.jsxs)(r.span,{className:"vlist-t vlist-t2",children:[(0,s.jsxs)(r.span,{className:"vlist-r",children:[(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.3173em"},children:(0,s.jsxs)(r.span,{style:{top:"-2.357em",marginLeft:"0em",marginRight:"0.0714em"},children:[(0,s.jsx)(r.span,{className:"pstrut",style:{height:"2.5em"}}),(0,s.jsx)(r.span,{className:"sizing reset-size3 size1 mtight",children:(0,s.jsx)(r.span,{className:"mord mtight",children:"1"})})]})}),(0,s.jsx)(r.span,{className:"vlist-s",children:"​"})]}),(0,s.jsx)(r.span,{className:"vlist-r",children:(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.143em"},children:(0,s.jsx)(r.span,{})})})]})})]})})})]})]}),(0,s.jsx)(r.span,{className:"vlist-s",children:"​"})]}),(0,s.jsx)(r.span,{className:"vlist-r",children:(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.3998em"},children:(0,s.jsx)(r.span,{})})})]})})]}),(0,s.jsx)(r.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.jsxs)(r.span,{className:"mord",children:[(0,s.jsx)(r.span,{className:"mord mathnormal",children:"a"}),(0,s.jsx)(r.span,{className:"msupsub",children:(0,s.jsxs)(r.span,{className:"vlist-t vlist-t2",children:[(0,s.jsxs)(r.span,{className:"vlist-r",children:[(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.3117em"},children:(0,s.jsxs)(r.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,s.jsx)(r.span,{className:"pstrut",style:{height:"2.7em"}}),(0,s.jsx)(r.span,{className:"sizing reset-size6 size3 mtight",children:(0,s.jsx)(r.span,{className:"mord mathnormal mtight",children:"i"})})]})}),(0,s.jsx)(r.span,{className:"vlist-s",children:"​"})]}),(0,s.jsx)(r.span,{className:"vlist-r",children:(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.15em"},children:(0,s.jsx)(r.span,{})})})]})})]}),(0,s.jsx)(r.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.jsx)(r.span,{className:"mbin",children:"+"}),(0,s.jsx)(r.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.jsxs)(r.span,{className:"mop",children:[(0,s.jsx)(r.span,{className:"mop op-symbol small-op",style:{position:"relative",top:"0em"},children:"∑"}),(0,s.jsx)(r.span,{className:"msupsub",children:(0,s.jsxs)(r.span,{className:"vlist-t vlist-t2",children:[(0,s.jsxs)(r.span,{className:"vlist-r",children:[(0,s.jsxs)(r.span,{className:"vlist",style:{height:"0.9335em"},children:[(0,s.jsxs)(r.span,{style:{top:"-2.4003em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,s.jsx)(r.span,{className:"pstrut",style:{height:"2.7em"}}),(0,s.jsx)(r.span,{className:"sizing reset-size6 size3 mtight",children:(0,s.jsxs)(r.span,{className:"mord mtight",children:[(0,s.jsx)(r.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05724em"},children:"j"}),(0,s.jsx)(r.span,{className:"mrel mtight",children:"="}),(0,s.jsxs)(r.span,{className:"mord mtight",children:[(0,s.jsx)(r.span,{className:"mord mathnormal mtight",children:"s"}),(0,s.jsx)(r.span,{className:"msupsub",children:(0,s.jsxs)(r.span,{className:"vlist-t vlist-t2",children:[(0,s.jsxs)(r.span,{className:"vlist-r",children:[(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.3173em"},children:(0,s.jsxs)(r.span,{style:{top:"-2.357em",marginLeft:"0em",marginRight:"0.0714em"},children:[(0,s.jsx)(r.span,{className:"pstrut",style:{height:"2.5em"}}),(0,s.jsx)(r.span,{className:"sizing reset-size3 size1 mtight",children:(0,s.jsx)(r.span,{className:"mord mtight",children:"2"})})]})}),(0,s.jsx)(r.span,{className:"vlist-s",children:"​"})]}),(0,s.jsx)(r.span,{className:"vlist-r",children:(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.143em"},children:(0,s.jsx)(r.span,{})})})]})})]})]})})]}),(0,s.jsxs)(r.span,{style:{top:"-3.2029em",marginRight:"0.05em"},children:[(0,s.jsx)(r.span,{className:"pstrut",style:{height:"2.7em"}}),(0,s.jsx)(r.span,{className:"sizing reset-size6 size3 mtight",children:(0,s.jsx)(r.span,{className:"mord mtight",children:(0,s.jsxs)(r.span,{className:"mord mtight",children:[(0,s.jsx)(r.span,{className:"mord mathnormal mtight",children:"t"}),(0,s.jsx)(r.span,{className:"msupsub",children:(0,s.jsxs)(r.span,{className:"vlist-t vlist-t2",children:[(0,s.jsxs)(r.span,{className:"vlist-r",children:[(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.3173em"},children:(0,s.jsxs)(r.span,{style:{top:"-2.357em",marginLeft:"0em",marginRight:"0.0714em"},children:[(0,s.jsx)(r.span,{className:"pstrut",style:{height:"2.5em"}}),(0,s.jsx)(r.span,{className:"sizing reset-size3 size1 mtight",children:(0,s.jsx)(r.span,{className:"mord mtight",children:"2"})})]})}),(0,s.jsx)(r.span,{className:"vlist-s",children:"​"})]}),(0,s.jsx)(r.span,{className:"vlist-r",children:(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.143em"},children:(0,s.jsx)(r.span,{})})})]})})]})})})]})]}),(0,s.jsx)(r.span,{className:"vlist-s",children:"​"})]}),(0,s.jsx)(r.span,{className:"vlist-r",children:(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.4358em"},children:(0,s.jsx)(r.span,{})})})]})})]}),(0,s.jsx)(r.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.jsxs)(r.span,{className:"mord",children:[(0,s.jsx)(r.span,{className:"mord mathnormal",children:"a"}),(0,s.jsx)(r.span,{className:"msupsub",children:(0,s.jsxs)(r.span,{className:"vlist-t vlist-t2",children:[(0,s.jsxs)(r.span,{className:"vlist-r",children:[(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.3117em"},children:(0,s.jsxs)(r.span,{style:{top:"-2.55em",marginLeft:"0em",marginRight:"0.05em"},children:[(0,s.jsx)(r.span,{className:"pstrut",style:{height:"2.7em"}}),(0,s.jsx)(r.span,{className:"sizing reset-size6 size3 mtight",children:(0,s.jsx)(r.span,{className:"mord mathnormal mtight",style:{marginRight:"0.05724em"},children:"j"})})]})}),(0,s.jsx)(r.span,{className:"vlist-s",children:"​"})]}),(0,s.jsx)(r.span,{className:"vlist-r",children:(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.2861em"},children:(0,s.jsx)(r.span,{})})})]})})]})]})]})}),(0,s.jsx)(r.span,{className:"vlist-s",children:"​"})]}),(0,s.jsx)(r.span,{className:"vlist-r",children:(0,s.jsx)(r.span,{className:"vlist",style:{height:"0.4346em"},children:(0,s.jsx)(r.span,{})})})]})})})}),(0,s.jsx)(r.span,{className:"mclose delimcenter",style:{top:"0em"},children:(0,s.jsx)(r.span,{className:"delimsizing size2",children:"}"})})]})]})]})]})}),"\n",(0,s.jsx)(r.p,{children:"你的任务就是计算函数d(A)的函数值。\r\n提示：对于样例，我们选择{2,2,3,-3,4} 和 {5}，进行想加得到函数d(A)的函数值。\r\n输入量大，建议使用scanf();"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入包含 T(<=30)个样例，在输入的第一行即是整数T。每个样例包含两行，第一行是整数 n(2<=n<=50000)，第二行包含了n个整数： a1, a2, ..., an. (|ai| <= 10000)。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对于每个输入样例，输出一行，即如上定义函数d(A)的函数值。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"1\r\n10\r\n1 -1 2 2 3 -3 4 -4 5 -5\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"13\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-30",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-30",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int maxn = 2200;\r\nint a[maxn];\r\nint leftt[maxn], rightt[maxn];\r\nint lmax[maxn], rmax[maxn];\r\nint main() {\r\n    int t;cin >> t;\r\n    while (t--) {\r\n        int n;cin >> n;\r\n        for (int i = 1;i <= n;i++)\r\n            cin >> a[i];\r\n        leftt[1] = a[1];rightt[n] = a[n];\r\n        lmax[1] = a[1];rmax[n] = a[n];\r\n        for (int i = 2;i <= n;i++) {\r\n            leftt[i] = max(leftt[i - 1] + a[i], a[i]);\r\n            lmax[i] = max(lmax[i - 1], leftt[i]);\r\n        }\r\n        for (int i = n - 1;i > 0;i--){\r\n            rightt[i] = max(rightt[i + 1] + a[i], a[i]);\r\n            rmax[i] = max(rmax[i + 1], rightt[i]);\r\n        }\r\n        int ans = a[1];\r\n        for (int i = 2;i <= n;i++)\r\n            ans = max(ans, lmax[i - 1] + rmax[i]);\r\n        cout << ans << endl;\r\n    }\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1278-d007-最大子矩阵",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1278-d007-最大子矩阵",children:"#"}),"1278: D007 最大子矩阵"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-31",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-31",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"给你一个二维矩阵，元素是整数，有正有负。一个子矩阵就是最小1*1最大包含这个矩阵本身的矩阵。一个矩阵的和就是矩阵中所有元素求和，最大子矩阵就是所有子矩阵中和最大的那个字矩阵。下面是一个例子：\r\n0 -2 -7 0\r\n9 2 -6 2\r\n-4 1 -4 1\r\n-1 8 0 -2\r\n最大子矩阵在左下角\r\n9 2\r\n-4 1\r\n-1 8\r\n和值是15。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入的第一行是整数N，即表示要输入一个N * N的整数矩阵。接下来是N^2 个整数，每个整数之间被空格或者空行分开，这些整数即为矩阵中的数，按照列优先的顺序排列，即第一行整数从左至右输入，第二行从左至右输入…. 第n行从左至右输入。N不会大于100，矩阵中的整数范围为 [-127,127]。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"输出最大矩阵的和。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"4\r\n0 -2 -7 0 9 2 -6 2\r\n-4 1 -4  1 -1 8  0 -2\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"15\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-31",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-31",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int maxn = 120;\r\nint rec[maxn][maxn];\r\nint pre[maxn][maxn];\r\nint dp[maxn][maxn];\r\nint main() {\r\n    int n;cin >> n;\r\n    pre[0][0] = 0;\r\n    // 二维前缀和\r\n    for (int i = 1;i <= n;i++) {\r\n        for (int j = 1;j <= n;j++) {\r\n            cin >> rec[i][j];\r\n            pre[i][j] = pre[i - 1][j] + pre[i][j - 1] - pre[i - 1][j - 1] + rec[i][j];\r\n        }\r\n    }\r\n    // for (int i = 1;i <= n;i++) {\r\n    //     for (int j = 1;j <= n;j++) {\r\n    //         cout << pre[i][j] << " ";\r\n    //     }\r\n    //     cout << endl;\r\n    // }\r\n    int ans = -200;\r\n    for (int xi = 1;xi <= n;xi++) {\r\n        for (int yi = 1;yi <= n;yi++) {\r\n            for (int xj = xi;xj <= n;xj++) {\r\n                for (int yj = yi;yj <= n;yj++) {\r\n                    int sum = pre[xj][yj] - pre[xi - 1][yj] - pre[xj][yi - 1] + pre[xi - 1][yi - 1];\r\n                    ans = max(ans, sum);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cout << ans << endl;\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.h2,{id:"算法2搜索e",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#算法2搜索e",children:"#"}),(0,s.jsx)(r.strong,{children:"算法2搜索E"})]}),"\n",(0,s.jsxs)(r.h3,{id:"1281-e001-数的划分",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1281-e001-数的划分",children:"#"}),"1281: E001 数的划分"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-32",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-32",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"将整数n分成k份，且每份不能为空，任意两种分法不能相同（不考虑顺序）。\r\n例如：n=7，k=3，下面三种分法被认为是相同的。\r\n1,1,5；1,5,1；5,1,1；\r\n问有多少种不同的分法。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"每组数据由一行上的2个整数n，k构成（6<n≤200,2≤k≤6）。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对每组测试数据，输出不同的分法整数。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"7 3\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"4\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-32",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-32",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\n#define AUTHOR "DODOLA"\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 220;\r\nll dp[maxn][maxn];  // i个小球放入j个盒子没有空盒的方法数\r\nint main() {\r\n    int n, k;\r\n    cin >> n >> k;\r\n    for (int i = 1;i <= n;i++) {\r\n        dp[i][1] = 1;dp[i][0] = 1;\r\n    }\r\n    for (int i = 2;i <= n;i++) {\r\n        for (int j = 2;j <= k;j++) {\r\n            if (i > j)\r\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - j][j];\r\n            else\r\n                dp[i][j] = dp[i - 1][j - 1];\r\n        }\r\n    }\r\n    cout << dp[n][k] << endl;\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1282-e002-闪避湖泊",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1282-e002-闪避湖泊",children:"#"}),"1282: E002 闪避湖泊"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-33",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-33",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"农夫约翰的农场在最近的一场暴风雨中被水淹没。但保险公司仅根据他得农场中最大的“湖泊”的大小赔偿一个数额。\r\n农场可表示为N行M列的长方形网格，（1≤N≤100,1≤M≤100）。网格中的每个单元或是干的或是被淹没的，且恰有K个单元被水淹没，（1≤K≤N*M）。正如人们所希望的，湖泊是一个中间单元，它与其他的单元共享一条长边（不是角落）。任何与中间单元共享一条长边或者与连通单元共享一条长边的单元是一个连通单元，是湖泊的一部分。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"有多组数据。每组的第1行有3个整数N，M和K。第2行到第K+1行，是整数R和C，表示被淹没的位置。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对每组测试数据，输出有最大湖泊的单元的数目。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"3 4 5\r\n3 2\r\n2 2\r\n3 1\r\n2 3\r\n1 1\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"4\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-33",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-33",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 150;\r\n\r\nint n, m, k;\r\nbool fd[maxn][maxn];\r\nint mv[4][2] = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };\r\n\r\nint ans;\r\nint dfs(int r, int c) {\r\n    if (r<1 || r>n || c<1 || c>m || !fd[r][c])return 0;\r\n    fd[r][c] = false;\r\n    int ret = 1;\r\n    for (int i = 0;i < 4;i++) {\r\n        ret += dfs(r + mv[i][0], c + mv[i][1]);\r\n    }\r\n    return ret;\r\n}\r\n\r\nvoid solve() {\r\n    fill(fd[0], fd[0] + maxn * maxn, false);\r\n    ans = 0;\r\n    for (int ki = 0;ki < k;ki++) {\r\n        int r, c;cin >> r >> c;\r\n        fd[r][c] = true;\r\n    }\r\n    for (int i = 1;i <= n;i++) {\r\n        for (int j = 1;j <= m;j++) {\r\n            if (fd[i][j]) {\r\n                ans = max(ans, dfs(i, j));\r\n            }\r\n        }\r\n    }\r\n    cout << ans << "\\n";\r\n}\r\n\r\nint main() {\r\n    while (cin >> n >> m >> k)\r\n        solve();\r\n\r\n    return 0;\r\n}\r\n/*\r\n0 1 0 0 0\r\n0 0 1 1 0\r\n0 1 1 0 0\r\n*/\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1283-e003-信道分配",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1283-e003-信道分配",children:"#"}),"1283: E003 信道分配"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-34",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-34",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"当无线电台在一个非常大的区域上传播信号时，为了每个接收器都能得到较强信号，使用转发器转发信号。然而，需要仔细地选择每个转发器使用的频道，以使附近的转发器不彼此干扰。如果邻近的转发器使用不同的频道，条件就得到满足。\r\n因为无线电波的频谱是宝贵的资源，转发器所需频道的数量应减到最少。编程任务：读取转发器网络的描述信息，并计算出所需频道的最小使用量。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入包含许多转发器网络图。每幅图的第一行是转发器数目（1~26）。转发器用连续的大写字母表示，从A开始。例如，10个转发器的名称分别是A，B，C，…，I和J。当转发器的个数是0时，表示输入结束。\r\n转发器数目之后，是其邻近关系的列表。每行的格式为\r\nA：BCDH\r\n表示转发器B、C、D和H与转发器A邻近。第一行描述与转发器A邻近的，第二行描述与B邻近的，直到描述完所有的转发器。如果某个转发器不与其他转发器相邻，它的形式为\r\nA：\r\n转发器依字母顺序列出。\r\n注意：相邻是对称的关系；如果A与B相邻，那么B与A也相邻。因为转发器位于水平面内，由相邻的转发器构成的网络图没有相交的线。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对于每幅图（除了最后一个没有转发器），输出一行，是转发器不互相干扰所需的最少频道数。输出格式参考样例输出。注意：频道数为1的话，“channel”为单数。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"2\r\nA:\r\nB:\r\n4\r\nA:BC\r\nB:ACD\r\nC:ABD\r\nD:BC\r\n0\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"1 channel needed.\r\n3 channels needed.\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-34",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-34",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<iostream>\r\n#include<stdio.h>\r\n#include<string.h>\r\n#include<algorithm>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 120;\r\nbool fd[maxn][maxn];\r\nint ind[30], t;\r\nbool dfs(int from, int clr) {\r\n    // 从from着色\r\n    for (int i = 0;i < clr;i++) {\r\n        bool f = true;ind[from] = i;\r\n\r\n        for (int j = 0;j < from;j++) {\r\n            if (ind[j] == i && fd[from][j]) {\r\n                f = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (f && (from == t - 1 || dfs(from + 1, clr)))\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nint main() {\r\n    while (cin >> t) {\r\n        cin.get();\r\n        if (t == 0)break;\r\n        memset(fd, 0, sizeof(fd));\r\n        memset(ind, 0, sizeof(ind));\r\n        bool f = true;\r\n        for (int i = 0;i < t;i++) {\r\n            string msg;cin >> msg;\r\n            if (msg.size() == 2)\r\n                continue;\r\n            f = false;\r\n            int pid = msg[0] - \'A\';\r\n            for (int j = 2;j < msg.size();j++) {\r\n                fd[pid][msg[j] - \'A\'] = true;\r\n                fd[msg[j] - \'A\'][pid] = true;\r\n            }\r\n        }\r\n        if (f)\r\n            cout << "1 channel needed.\\n";\r\n        else if (dfs(1, 2))\r\n            cout << "2 channels needed.\\n";\r\n        else if (dfs(1, 3))\r\n            cout << "3 channels needed.\\n";\r\n        else\r\n            cout << "4 channels needed.\\n";\r\n    }\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1284-e004-移动的骑士",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1284-e004-移动的骑士",children:"#"}),"1284: E004 移动的骑士"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-35",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-35",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"你的一个朋友正在研究骑士旅行问题（TKP）。在一个有n个方格的棋盘上，你得找到一条最短的封闭骑士旅行的路径，使能够遍历每个方格一次。他认为问题的最困难部分在于，对两个给定的方格，确定骑士移动所需的最小步数。所以你帮助他编写一个程序，解决这个“困难的”部分。你的任务是：输入有两个方格a和b，确定骑士在最短路径上从a到b移动的次数。"}),"\n",(0,s.jsx)(r.p,{children:"国际象棋中的骑士在棋盘上可移动的范围如下图："}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://images.ptausercontent.com/d0625832-0895-4506-a068-4a1dc82bdceb.png",alt:"E004.png"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入包含一组或多组测试例。每个测试例一行，是两个方格，用空格隔开。棋盘上的一个方格用一个字符串表示，字母（a-h）表示列，数字（1-8）表示行。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对每个测试例，输出一行：“To get from xx to yy takes n knight moves.”。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"e2 e4\r\na1 b2\r\nb2 c3\r\na1 h8\r\na1 h7\r\nh8 a1\r\nb1 c3\r\nf6 f6\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"To get from e2 to e4 takes 2 knight moves.\r\nTo get from a1 to b2 takes 4 knight moves.\r\nTo get from b2 to c3 takes 2 knight moves.\r\nTo get from a1 to h8 takes 6 knight moves.\r\nTo get from a1 to h7 takes 5 knight moves.\r\nTo get from h8 to a1 takes 6 knight moves.\r\nTo get from b1 to c3 takes 1 knight moves.\r\nTo get from f6 to f6 takes 0 knight moves.\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-35",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-35",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 150;\r\n\r\nstring fs, ts;\r\nint mv[8][2] = { {-2, -1}, {-2, 1}, {-1, -2}, {-1, 2}, {1, -2}, {1, 2}, {2, -1}, {2, 1} };\r\n\r\nvoid bfs(int x1, int y1, int x2, int y2) {\r\n    if (x1 == x2 && y1 == y2) {\r\n        cout << "To get from " << fs << " to " << ts << " takes 0 knight moves.\\n";\r\n        return;\r\n    }\r\n    int stp = 0;\r\n    queue<pair<int, int>> q;\r\n    q.push({ x1, y1 });\r\n    while (!q.empty()) {\r\n        queue<pair<int, int>> qs;\r\n        while (!q.empty()) {\r\n            auto [x, y] = q.front();q.pop();\r\n            for (int i = 0;i < 8;i++) {\r\n                int nx = x + mv[i][0], ny = y + mv[i][1];\r\n                if (nx < 0 || nx >= 8 || ny < 0 || ny >= 8)continue;\r\n                if (nx == x2 && ny == y2) {\r\n                    cout << "To get from " << fs << " to " << ts << " takes " << stp + 1 << " knight moves.\\n";\r\n                    return;\r\n                }\r\n                qs.push({ nx, ny });\r\n            }\r\n        }\r\n        stp++;\r\n        q = qs;\r\n    }\r\n\r\n}\r\n\r\nvoid solve() {\r\n    int x1 = fs[0] - \'a\', y1 = fs[1] - \'1\', x2 = ts[0] - \'a\', y2 = ts[1] - \'1\';\r\n    bfs(x1, y1, x2, y2);\r\n}\r\n\r\nint main() {\r\n    while (cin >> fs >> ts)\r\n        solve();\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1285-e005-图像周长",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1285-e005-图像周长",children:"#"}),"1285: E005 图像周长"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-36",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-36",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"病理学实验室的技术人员需要分析幻灯片的数字图像。幻灯片上有许多要分析的目标，由鼠标单击确定一个目标。目标边界的周长是一个有用的测量参数。编程任务：确定选中目标的在周长。\r\n数字化的幻灯片是一个矩形的网格，里面有点’.’，表示空的地方；有大写字母‘X’，表示目标的一部分。简单网格如下所示"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://images.ptausercontent.com/3796d78f-55a8-4032-9bfb-995d61d09bde.png",alt:"E0051.png"})}),"\n",(0,s.jsx)(r.p,{children:"方格中的一个X是指一个完整的网络方形区域，包括其边界和目标本身。网格中心的X与其边界上8个方向的X都是相邻的。任何两个相邻的X，其网格方形区域在边界或者拐角处是重叠的，所以他们的网格方形区域是相邻的。\r\n一个目标是由一系列相邻X的网格方形区域连接起来构成的。在网格1中，一个目标填充了全部网格；在网格2中有两个目标，其中一个目标只占左下角的一个网格方形区域，其余的X属于另一个目标。\r\n技术人员总是能单击到一个X，以选中包含该X的目标，记录单击时的坐标。行列号是从左上角开始，从1开始编号的。在网格1中，技术人员可以单击行2和列2选择目标；在网格2中，单击行2和列3就可以选中较大目标，单击行4和列3就不能选中任何目标。\r\n一个有用的统计参数是目标的周长。假定每个X的每条边上有一个方形的单元。在网格1中目标的周长是8（4个边，每个边上有2个方形的单元）；在网格2中，较大目标的周长是18，如下图所示。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://images.ptausercontent.com/c5cc3688-2fc4-4ede-befb-5569f153298a.png",alt:"E0052.png"})}),"\n",(0,s.jsx)(r.p,{children:"目标中不会包含任何完全封闭的孔，所以下面最左边的网格不会出现，应该是右边的网格样式。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://images.ptausercontent.com/ed36f612-9028-4e99-b3e0-72b6649aeb98.png",alt:"E0053.png"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入有多组网格。对每个网格，第一行是网格的行列数（rows，columns），鼠标单击的行列号（row，column），其整数范围都是1-20.接下来就是rows行，由字符‘.’和‘X’构成。\r\n当一行是4个0时，标志输入结束。一行中的4个数字之间各有一个空格。网格数据的行之间没有空行。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对每个网络输出一行，是选中目标的周长。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"2 2 2 2\r\nXX\r\nXX\r\n6 4 2 3\r\n.XXX\r\n.XXX\r\n.XXX\r\n...X\r\n..X.\r\nX...\r\n5 6 1 3\r\n.XXXX.\r\nX....X\r\n..XX.X\r\n.X...X\r\n..XXX.\r\n0 0 0 0\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"8\r\n18\r\n40\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-36",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-36",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\n#define AUTHOR "DODOLA"\r\n// #include<queue>\r\n// #include<iostream>\r\n// #include<string>\r\nusing namespace std;\r\nconst int maxn = 250;\r\ntypedef long long ll;\r\nint r, c, x, y;\r\nvector<string>mp(maxn);\r\n\r\nint mv[8][2] = {\r\n    {1,0},{0,1},{-1,0},{0,-1},\r\n    {1,1},{1,-1},{-1,-1},{-1,1},\r\n};\r\nint ans;\r\nbool ck[maxn][maxn];\r\n\r\nvoid dfs(int px, int py) {\r\n    // cout << px << " " << py << endl;\r\n    // cout << ans << endl;\r\n    if (mp[px][py] != \'X\' || ck[px][py])return;\r\n    ck[px][py] = true;\r\n\r\n    for (int j = 0;j < 4;j++) {\r\n        int xj = px + mv[j][0], yj = py + mv[j][1];\r\n        if (mp[xj][yj] != \'X\')\r\n            ans++;\r\n    }\r\n\r\n    for (int i = 0;i < 8;i++) {\r\n        int xi = px + mv[i][0];\r\n        int yi = py + mv[i][1];\r\n        dfs(xi, yi);\r\n    }\r\n}\r\n\r\nstring s0(\'.\', maxn - 1);\r\nvoid solve() {\r\n    ans = 0;\r\n    fill(ck[0], ck[0] + sizeof(ck), false);\r\n    fill(mp.begin(), mp.end(), s0);\r\n    for (int i = 1;i <= r;i++) {\r\n        cin >> mp[i];\r\n        mp[i] = " " + mp[i] + " ";\r\n    }\r\n    dfs(x, y);\r\n    cout << ans << "\\n";\r\n}\r\n\r\nint main() {\r\n    mp[0] = s0;\r\n    while (cin >> r >> c >> x >> y) {\r\n        if (!r && !c && !x && !y)break;\r\n        solve();\r\n    }\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1286-e006-移动的骑士",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1286-e006-移动的骑士",children:"#"}),"1286: E006 移动的骑士"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-37",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-37",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"Somurolov先生是一个国际象棋高手，他声称在棋盘上将骑士棋子从一点移动到另外一点，没有人比他快，你敢挑战他吗？\r\n你的任务是编程计算出将一个骑士棋子从一点移动到另外一点，最少需要移动的步数。显而易见，这样你就有赢得Somurolov先生的机会。国际象棋中的骑士在棋盘上可移动的范围如下图："}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://images.ptausercontent.com/cd1b9321-5f2b-42a8-857e-72a8d9d2eea4.png",alt:"E006.png"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsxs)(r.p,{children:["首先输入测试样例的个数n。接下来是n组输入数据，每组测试数据由三行整数组成：第一行是棋盘的边长l (4 <= l <= 300)，整个棋盘的面积也就是 l",(0,s.jsx)(r.em,{children:"l；第二行和第三行分别是骑士棋子的初始位置和目标位置，表示为整数对形式{0, …, l-1}"}),"{0, …, l-1}。保证棋子的初始和目标位置是棋盘上的合法位置。"]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对于每一个输入的测试样例，请你算出骑士从初始位置移动到目标位置最小移动步数。如果初始位置和目标位置相同，那么骑士移动的距离就是0。最后单独一行输出所求距离。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"1\r\n8 0 0\r\n7 0\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"5\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-37",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-37",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include <iostream>\r\n#include <queue>\r\n#include <cstring>\r\n#define AUTHOR "DODOLA"\r\nusing namespace std;\r\n\r\nstruct P {\r\n    int x;\r\n    int y;\r\n    int step;\r\n};\r\n\r\nint mv[8][2] = {\r\n    {1, 2}, {2, 1}, {-1, 2}, {-2, 1},\r\n    {1, -2}, {2, -1}, {-1, -2}, {-2, -1}\r\n};\r\n\r\nint bfs(int n, int x1, int y1, int x2, int y2)\r\n{\r\n    if (x1 == x2 && y1 == y2)\r\n    {\r\n        return 0;\r\n    }\r\n    bool gnd[n][n];\r\n    queue<P> q;\r\n    memset(gnd, 0, sizeof(gnd));\r\n    P start, node;\r\n    start.x = x1;\r\n    start.y = y1;\r\n    start.step = 0;\r\n    q.push(start);\r\n    while (!q.empty()) {\r\n        int x0, y0, step;\r\n        start = q.front();\r\n        q.pop();\r\n        x0 = start.x;\r\n        y0 = start.y;\r\n        step = start.step;\r\n        for (int j = 0; j < 8; j++) {\r\n            int x3 = x0 + mv[j][0];\r\n            int y3 = y0 + mv[j][1];\r\n            if (x3 == x2 && y3 == y2)\r\n                return step + 1;\r\n            if (x3 >= 0 && x3 < n && y3 >= 0 && y3 < n && !gnd[x3][y3]) {\r\n                node.x = x3;\r\n                node.y = y3;\r\n                node.step = step + 1;\r\n                q.push(node);\r\n                gnd[x3][y3] = 1;\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\nint main() {\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        int x1, y1, x2, y2, n;\r\n        cin >> n >> x1 >> y1 >> x2 >> y2;\r\n        cout << bfs(n, x1, y1, x2, y2) << endl;\r\n    }\r\n    return 0;\r\n}\r\n\r\n\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1287-e007-寻找m",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1287-e007-寻找m",children:"#"}),"1287: E007 寻找M"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-38",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-38",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"给出一个整数n，编程求出一个非零整数m，使得m是n的倍数，并且m的十进制表示中只有1和0。给出的n不大于200并且肯定存在对应的m，m是十进制数并且不大于100位。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入包含多组测试数据。每组测试数据只有一个整数n (1 <= n <= 200)。整数0标志输入的结束。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对于每个n输出对应的整数m，m的十进制表示不多于100位。如果对于一个n存在多个合法的m，你只需输出一个即可。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"2\r\n6\r\n0\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"10\r\n1110\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-38",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-38",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 10;\r\nint n;\r\n\r\nbool ck(int x) {\r\n    while (x) {\r\n        if (x % 10 == 0 || x % 10 == 1) {\r\n            x /= 10;\r\n            continue;\r\n        }\r\n        else return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nvoid solve() {\r\n    for (int i = 1;;i++) {\r\n        int m = i * n;\r\n        bool f = ck(m);\r\n        if (f) {\r\n            cout << m << endl;\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\nint main() {\r\n    while (cin >> n) {\r\n        if (n == 0)break;\r\n        solve();\r\n    }\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1288-e008-红与黑",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1288-e008-红与黑",children:"#"}),"1288: E008 红与黑"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-39",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-39",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"有一个矩形的房间，房间铺着正方形的地砖。每个地砖被涂上红色或者黑色。初始时你站在房间里的某个黑色地砖上，你每次只能移动到相邻的四个地砖之一，即上下左右移动，并且你每次只能移动到黑色的地砖上，不能走到红色地砖。\r\n编程计算出按照上述要求你能走到的黑色地砖的个数。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入包含多组测试数据。每组测试数据第一行包括2个整数W和H；W和H是房间的宽度和长度，分别表示为房间的x和y坐标轴。W和H不大于20。接下来是H行每行W个地砖的房间，每个地砖表示如下：\r\n‘.’——黑色地砖\r\n‘#’——红色地砖\r\n‘@’ ——你在房间里的初始位置（房间只出现一次）。\r\n输入的最后一行是两个整数0，不用处理。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对每个测试样例，输出一行，即你能走到的黑色地砖的个数（包括你初始站在的黑色地砖）。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"6 9\r\n....#.\r\n.....#\r\n......\r\n......\r\n......\r\n......\r\n......\r\n#@...#\r\n.#..#.\r\n11 9\r\n.#.........\r\n.#.#######.\r\n.#.#.....#.\r\n.#.#.###.#.\r\n.#.#..@#.#.\r\n.#.#####.#.\r\n.#.......#.\r\n.#########.\r\n...........\r\n0 0\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"45\r\n59\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-39",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-39",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include <iostream>\r\n#include <queue>\r\n#include <cstring>\r\nconst int maxn = 120;\r\nusing namespace std;\r\nint r, c;\r\nchar mp[maxn][maxn];\r\nint mv[4][2] = {\r\n    {0,1},{0,-1},{1,0},{-1,0},\r\n};\r\n\r\nint ans;\r\n\r\nvoid dfs(int x, int y) {\r\n    if (x < 0 || x == c || y < 0 || y == r)return;\r\n    if (mp[x][y] == '#')return;\r\n    ans++;\r\n    mp[x][y] = '#';\r\n    for (int i = 0;i < 4;i++) {\r\n        int xi = x + mv[i][0];\r\n        int yi = y + mv[i][1];\r\n        dfs(xi, yi);\r\n    }\r\n}\r\n\r\nvoid solve() {\r\n    ans = 0;\r\n    int px, py;\r\n    for (int i = 0;i < c;i++) {\r\n        for (int j = 0;j < r;j++) {\r\n            cin >> mp[i][j];\r\n            if (mp[i][j] == '@') {\r\n                px = i;py = j;\r\n            }\r\n        }\r\n    }\r\n    dfs(px, py);\r\n    cout << ans << endl;\r\n}\r\n\r\nint main() {\r\n    while (cin >> r >> c) {\r\n        if (!r && !c)break;\r\n        solve();\r\n    }\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1289-e009-小木棒",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1289-e009-小木棒",children:"#"}),"1289: E009 小木棒"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-40",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-40",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"George有一些长度相等的木棒，他随意的将这些木棒切成长度最多是50的小木棒。麻烦来了，他现在想将这些杂乱的小木棒恢复到原来的木棒，但是他忘记了原来到木棒的数量和长度。请你帮助他设计一个程序计算出原来木棒可能的最小长度，所有小木棒的长度均表示为大于0的整数。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"每组输入数据包括两行。第一行是George切后小木棒的个数，最多有64根小木棒；第二行是这些小木棒的长度，这些长度表示为空格分开的整数。输入样例以整数0表示结束。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"输出一行，即为原始木棒可能的最小长度。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"9\r\n5 2 1 5 2 1 5 2 1\r\n4\r\n1 2 3 4\r\n0\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"6\r\n5\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-40",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-40",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int maxn = 80;\r\n\r\nint n, a[maxn], maxv, tot, vis[maxn], k, len;\r\n\r\nbool cmp(int a, int b) {\r\n    return a > b;\r\n}\r\nbool dfs(int i, int rest, int p) {\r\n    if (i > k)\r\n        return 1;\r\n    int fail = 0;\r\n    for (int x = p + 1;x <= n;x++) {\r\n        if (!vis[x]) {\r\n            if (a[x] == a[fail]) continue;\r\n            if (rest > a[x]) {\r\n                vis[x] = 1;\r\n                bool w = dfs(i, rest - a[x], x);\r\n                vis[x] = 0;\r\n                if (!w) fail = x;\r\n                if (w) return 1;\r\n            }\r\n            else if (rest == a[x]) {\r\n                vis[x] = 1;\r\n                bool w = dfs(i + 1, len, 0);\r\n                vis[x] = 0;\r\n                return w;\r\n            }\r\n            if (p == 0) return 0;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\nvoid solve() {\r\n    fill(vis, vis + n + 5, 0);\r\n    maxv = tot = 0;\r\n    for (int i = 1;i <= n;i++) {\r\n        cin >> a[i];\r\n        maxv = max(maxv, a[i]);\r\n        tot += a[i];\r\n    }\r\n    sort(a + 1, a + 1 + n, cmp);\r\n    for (len = maxv;len <= tot;len++) {\r\n        if (tot % len == 0) {\r\n            k = tot / len;\r\n            if (dfs(1, len, 0)) {\r\n                cout << len << endl;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nint main() {\r\n    while (cin >> n && n)\r\n        solve();\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h2,{id:"算法2贪心f",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#算法2贪心f",children:"#"}),(0,s.jsx)(r.strong,{children:"算法2贪心F"})]}),"\n",(0,s.jsxs)(r.h3,{id:"1290-f001-木棒加工问题",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1290-f001-木棒加工问题",children:"#"}),"1290: F001 木棒加工问题"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-41",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-41",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"现有n根木棒，已知它们的长度和重量。要用一部木工机一根一根地加工这些木棒。该机器在加工过程中需要一定的准备时间，是用于清洗机器，调整工具和模板的。木工机需要的准备时间如下：\r\n（1） 第一根木棒需要1min的准备时间；\r\n（2） 在加工了一根长为l，重为w的木棒之后，接着加工一根长为l’（l≤l’），重为w’（w≤w’）的木棒是不需要任何准备时间的。否则需要一分钟的准备时间。\r\n给定n根木棒，你要找到最少的准备时间。例如现在有长和重分别为（4,9），（5,2），（2,1），（3,5）和（1,4）的五根木棒，那么所需准备时间最少为2min，顺序为（1,4），（3,5），（4,9），（2,1），（5,2）。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入有多组测试例。输入数据的第一行是测试例的个数（T）。每个测试例两行：第一行是一个整数n（1≤n≤5000），表示有多少根木棒；第二行包括n*2个整数，表示l1,w1,l2,w2,l3,w3,…,ln,wn,全部不大于10000，其中li和wi表示第i根木棒的长度和重量。数据由一个或多个空格分隔。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"输出是以分钟为单位的最少准备时间，一行一个。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"3 \r\n5 \r\n4 9 5 2 2 1 3 5 1 4 \r\n3 \r\n2 2 1 1 2 2 \r\n3 \r\n1 3 2 2 3 1\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"2\r\n1\r\n3\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-41",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-41",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 1e5 + 50;\r\n\r\nint n;\r\nbool ck[maxn];\r\nvoid solve() {\r\n    cin >> n;\r\n    fill(ck, ck + 5050, false);\r\n    vector<pair<int, int>> len;\r\n    for (int i = 0; i < n; i++) {\r\n        int l, w;cin >> l >> w;\r\n        len.push_back(make_pair(l, w));\r\n    }\r\n    sort(len.begin(), len.end());\r\n    int cnt = 0, ans = 0;\r\n    while (cnt < n) {\r\n        ans++;\r\n        int ki = 0;\r\n        int li = 0, wi = 0;\r\n        for (int i = 0;i < n;i++) {\r\n            if (!ck[i]) {\r\n                ki = i;\r\n                li = len[i].first, wi = len[i].second;\r\n                ck[i] = true;\r\n                cnt++;\r\n                break;\r\n            }\r\n        }\r\n        // cout << ki << " " << li << " " << wi << endl;\r\n        for (int i = 0;i < n;i++) {\r\n            if (ck[i])continue;\r\n            if (li <= len[i].first && wi <= len[i].second) {\r\n                ck[i] = true;\r\n                cnt++;\r\n                li = len[i].first, wi = len[i].second;\r\n            }\r\n        }\r\n    }\r\n    cout << ans << endl;\r\n}\r\nint main() {\r\n    int t;cin >> t;\r\n    while (t--)\r\n        solve();\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1291-f002-装箱",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1291-f002-装箱",children:"#"}),"1291: F002 装箱"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-42",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-42",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"一个工厂生产的产品形状都是长方体，高度都是h，主要有1x1，2x2，3x3，4x4，5x5，6x6等6种。这些产品在邮寄时被包装在一个6x6xh的长方体包裹中。由于邮费很贵，工厂希望减小每个订单的包裹数量以增加他们的利润。因此他们需要一个好的程序帮他们解决这个问题。你的任务就是设计这个程序。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入包括多组测试数据，每一行代表一个订单。每个订单里的一行包括六个整数，用空格隔开，从小到大分别为这6种产品的数量。6个0表示文件结束。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"针对每个订单输出一个整数，占一行，代表对应的订单所需的最小包裹数。没有多余的空行。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"0 0 4 0 0 1\r\n7 5 1 0 0 0\r\n0 0 0 0 0 0\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"2\r\n1\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-42",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-42",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"// #include<bits/stdc++.h>\r\n#include<iostream>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 2e5 + 50;\r\n\r\nint n;\r\nint b1, b2, b3, b4, b5, b6;\r\nint l3[4] = { 0,7,6,5 };\r\nint l2[4] = { 0,5,3,1 };\r\nint l1[9] = { 0,32,28,24,20,16,12,8,4 };\r\nvoid solve() {\r\n    int ans = b6 + b5 + b4 + (b3 + 3) / 4;\r\n    int n2 = 5 * b4 + l2[b3 % 4];;\r\n    if (n2 >= b2) {\r\n        int n1 = b5 * (36 - 25) + (n2 - b2) * 4 + l3[b3 % 4];\r\n        if (n1 < b1)\r\n            ans += (b1 - n1 + 35) / 36;\r\n    }\r\n    else {\r\n        int m2 = b2 - n2;\r\n        ans += (m2 + 8) / 9;\r\n        int n1 = b5 * (36 - 25) + l3[b3 % 4] + l1[m2 % 9];\r\n        if (n1 < b1)\r\n            ans += (b1 - n1 + 35) / 36;\r\n    }\r\n    cout << ans << endl;\r\n}\r\n\r\nint main() {\r\n    while (cin >> b1 >> b2 >> b3 >> b4 >> b5 >> b6 && (b1 || b2 || b3 || b4 || b5 || b6))\r\n        solve();\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1292-f003-移动桌子",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1292-f003-移动桌子",children:"#"}),"1292: F003 移动桌子"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-43",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-43",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"著名的ACM（Advanced Computer Maker）公司租用了一层有400个房间的办公楼，结构如下。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://images.ptausercontent.com/21b9043a-1631-4e7d-a6f0-96470fa586fb.png",alt:"F003.png"})}),"\n",(0,s.jsx)(r.p,{children:"这层楼沿着走廊南北向的两边各有200个房间。最近，公司要做一次装修，需要在各个办公室之间搬运办公桌。由于走廊狭窄，办公桌都很大，走廊里一次只能通过一张办公桌。必须制定计划提高搬运效率。经理制定如下计划：一张办公桌从一个房间移动到另一个房间最多用十分钟。当从房间i移动一张办公桌到房间j，两个办公室之间的走廊都会被占用。所以，每10分钟内，只要不是同一段走廊，都可以在房间之间移动办公桌。为了说得更清楚一些，经理举例说明哪些情况可以同时移动，哪些情况不能同时移动。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://images.ptausercontent.com/b8e7b6ec-857b-4e4c-b968-4634893cf79c.png",alt:"F0032.png"})}),"\n",(0,s.jsx)(r.p,{children:"每个房间，只有一张办公桌进出。现在，经理想找到一种方案，使移动桌子的事情尽快完成。请编写程序解决经理的难题。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入数据有T组测试例，在第一行给出测试例个数（T）。每个测试例的第一行是一个整数N（1≤N≤200），表示要搬运办公桌的次数。接下来N行，每行两个正整数s和t，表示一张桌子，是从房间号码s移到房间号码t。有多组输入数据，输入第一行为一个表示输入数据总数的整数N，然后是N组输入数据。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"每组输入都有一行的输出数据，为一整数T，表示完成任务所花费的最少时间。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"2 \r\n4 \r\n10 20 \r\n30 40 \r\n50 60 \r\n70 80 \r\n2 \r\n1 3 \r\n2 200\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"10\r\n20\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-43",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-43",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"// #include<bits/stdc++.h>\r\n#include<iostream>\r\n#include<algorithm>\r\n#include<vector>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 2e5 + 50;\r\n\r\nint n;\r\nvoid solve() {\r\n    cin >> n;\r\n    int pass[220] = {};\r\n    for (int i = 1;i <= n;i++) {\r\n        int x, y;cin >> x >> y;\r\n        x = (x + 1) / 2;\r\n        y = (y + 1) / 2;\r\n        if (x > y) {\r\n            x = x ^ y;y = x ^ y;x = x ^ y;\r\n        }\r\n        for (int j = x;j <= y;j++) {\r\n            pass[j]++;\r\n        }\r\n    }\r\n    int ans = *max_element(pass + 1, pass + 201);\r\n    cout << 10 * ans << endl;\r\n}\r\n\r\nint main() {\r\n    int t;cin >> t;\r\n    while (t--)\r\n        solve();\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1293-f004-基因集合",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1293-f004-基因集合",children:"#"}),"1293: F004 基因集合"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-44",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-44",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"随着大量的基因组DNA序列数据被获得，它对于了解基因越来越重要（基因组DNA的一部分，是负责蛋白质合成的）。众所周知，在基因组序列中，由于存在垃圾的DNA中断基因的编码区，真核生物（相对于原核生物）的基因链更加复杂。也就是说，一个基因被分成几个编码片段（称为外显子）。虽然在蛋白质的合成过程中，外显子的顺序是固定的，但是外显子的数量和长度可以是任意的。\r\n大多数基因识别算法分为两步：第一步，寻找可能的外显子；第二步，通过寻找一条拥有尽可能多的外显子的基因链，尽可能大地拼接一个基因。这条链必须遵循外显子出现在基因组序列中的顺序。外显子i在外显子j的前面的条件是i的末尾必须在j开头的前面。\r\n本题的目标是，给定一组可能的外显子，找出一条拥有尽可能多的外显子链，拼接成一个基因。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"给出几组输入实例。每个实例的开头是基因组序列中可能的外显子数n(0 < n < 1000)。接着的n行，每行是一对整数，表示外显子在基因组序列中的起始和结束位置。假设基因组序列最长为50000。当一行是0时，表示输入结束。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对于每个实例，找出最可能多的外显子链，输出链中的外显子，并占一行。假如有多条链，但外显子数相同，那么可以输出其中任意一条。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"6\r\n340 500\r\n220 470\r\n100 300\r\n880 943\r\n525 556\r\n612 776\r\n0\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"3 1 5 6 4\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-44",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-44",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 2e5 + 50;\r\n\r\nstruct node {\r\n    int x;int y;\r\n    int i;\r\n    bool operator<(const node& p)const {\r\n        return x < p.x;\r\n    }\r\n}wxz[maxn];\r\n\r\nint n;\r\nvoid solve() {\r\n    for (int i = 1;i <= n;i++) {\r\n        cin >> wxz[i].x >> wxz[i].y;\r\n        wxz[i].i = i;\r\n    }\r\n    sort(wxz + 1, wxz + 1 + n);\r\n    vector<node>ans;\r\n    ans.push_back(wxz[1]);\r\n    for (int i = 2;i <= n;i++) {\r\n        struct node ni = ans.back();\r\n        if (ni.y > wxz[i].y) {\r\n            ans.pop_back();ans.push_back(wxz[i]);\r\n        }\r\n        else if (ni.y < wxz[i].x) {\r\n            ans.push_back(wxz[i]);\r\n        }\r\n    }\r\n    for (int i = 0;i < ans.size();i++) {\r\n        cout << ans[i].i << \" \";\r\n    }\r\n    cout << '\\n';\r\n}\r\n\r\nint main() {\r\n    while (cin >> n && n)\r\n        solve();\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1294-f005-主框架",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1294-f005-主框架",children:"#"}),"1294: F005 主框架"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-45",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-45",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"多纳先生是ACM（Agent on Computing of Mathematics，计算数学代理商）大型计算机的管理员。该代理商为一些公司承担在大型计算机上的计算工作，完成工作后获得报酬，因此大型计算机对这个代理商来说太重要了。多纳先生需要为这些在大型计算机上运行的作业安排顺序。一旦要运行某个作业，他就要检查运行该作业所需要的空闲资源。如果空闲资源足够的话，他就为该作业分配这些资源；否则就将该作业挂起，直至有足够的资源投入运行。\r\n刚开始他并不熟悉这项工作，把事情搞得很乱。日积月累，他就胜任这项工作了。而且他还总结了一套规则：\r\n（1）大型计算机有M个CPU和N大小的内存空间可供分配。"}),"\n",(0,s.jsx)(r.p,{children:"（2）对等待运行的作业有一个等待队列。可以假定这个队列足够长，能够存放所有等待运行的作业。"}),"\n",(0,s.jsx)(r.p,{children:"（3）假定作业Ji需要Ai个CPU和Bi的内存空间，在时间Ti到达等待队列，需要在时间Ui之前完成。成功运行后，代理商可以获得Vi()的报酬；如果能在规定的时间之前完成，则每小时还可以额外获得Wi()的奖金；如果工期拖延，则每小时赔偿Xi()。例如，假定一个作业的报酬是10，时限8小时，每拖欠一小时罚2。如果该作业在10小时完成，则代理商可以获得10-(10-8)*2=6。"}),"\n",(0,s.jsx)(r.p,{children:"（4）当一个作业开始后，就独占了分配给它的CPU和内存空间，不能同时再分配给其他作业。当该作业运行结束后，这些资源被释放。如果资源足够多，同时可以运行多个作业。"}),"\n",(0,s.jsx)(r.p,{children:"（5）为了最大限度地发挥大型计算机的计算能力，每个作业在开始运行后刚好一小时就完成。你可以假定每个作业的运行时间就是一小时。"}),"\n",(0,s.jsx)(r.p,{children:"（6）没有作业运行时，机器空闲，一直到一个作业进入作业等待队列。"}),"\n",(0,s.jsx)(r.p,{children:"（7）如果有多个作业进入作业等待队列，则报酬高的作业优先。可以假定这些作业的报酬都不相等。"}),"\n",(0,s.jsx)(r.p,{children:"（8）如果某个作业的空闲CPU或内存空间不能满足，它就是被挂起一小时，也不占用任何资源。一小时后，再次为该作业检查资源，而不需要考虑等待队列里的其他作业。如果资源仍不满足要求，那就继续挂起一小时，把资源分配给其他在等待队列里的作业。否则，该作业将独占CPU和存储空间并投入运行。"}),"\n",(0,s.jsx)(r.p,{children:"（9）当多个作业挂起时，采取先来先服务的原则。"}),"\n",(0,s.jsx)(r.p,{children:"使用这些规则，多纳先生把事情安排得井井有条。现在除了日常公务外，代理商要求他根据作业列表计算收入。给定某个时间F，计算出已经完成的作业和应该被完成的作业。对作业Ji，如果它的时限Ui>F并且仍未完成，就不需要统计收入。对已经完成的作业或Ui≤F的作业都要统计。如果工作没有完成，它不会给代理商带来报酬，但到这个时间F为止的罚款仍要计算。"}),"\n",(0,s.jsx)(r.p,{children:"他不会程序设计，又不想手工做，现在你帮助他解决这个问题。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"有多组测试例。每个测试例描述大型计算机的资源和作业列表，第一行是整数F（0≤F≤10000），表示时限。接下来的一行是三个整数M，N和L（M，N，L≥0），M是机器CPU的数量，N是存储空间的大小，L是作业等待队列中作业的数量。最多有10000个作业。\r\n后面的L行是作业的信息。描述作业Ji的数据是7个整数：Ai，Bi，Ti，Ui，Vi，Wi，Xi。Ai和Bi（Ai，Bi≥0）指出了该作业对CPU和内存的需求。Ti和Ui表示作业的到达时间和时限（0≤Ti≤Ui）。Vi，Wi，Xi分别是工作的报酬、奖励和罚款。\r\n一个空的测试例（F=0）表示输入结束，该测试点无需处理。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"根据作业列表计算总收入。对每个测试例，输出测试例编号，一个冒号，一个空格，然后是收入。\r\n测试例之间有一个空行。\r\n注意：对尚未投入运行的、且时限超过F的作业，不必统计。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"10\r\n4 256 3\r\n1 16 2 3 10 5 6\r\n2 128 2 4 30 10 5\r\n2 128 2 4 20 10 5\r\n0\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"Case 1: 74\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-45",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-45",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 1e5 + 20;\r\n\r\nstruct JOB {\r\n    int a, b, t, u, v, w, x;\r\n    bool ok;\r\n    JOB(int a, int b, int t, int u, int v, int w, int x) :a(a), b(b), t(t), u(u), v(v), w(w), x(x), ok(false) {}\r\n    bool operator<(const JOB& N)const {\r\n        if (N.t == t)\r\n            return v > N.v;\r\n        return t < N.t;\r\n    }\r\n};\r\nint ind = 1;\r\nint f;\r\nint m, n, l;\r\nint mi, ni;\r\nvoid solve() {\r\n    cin >> m >> n >> l;\r\n    vector<JOB>tot;\r\n    for (int i = 0;i < l;i++) {\r\n        int a, b, t, u, v, w, x;\r\n        cin >> a >> b >> t >> u >> v >> w >> x;\r\n        tot.push_back(JOB(a, b, t, u, v, w, x));\r\n    }\r\n    sort(tot.begin(), tot.end());\r\n    int ans = 0;\r\n    for (int i = 1;i <= f;i++) {\r\n        mi = m;ni = n;\r\n        for (int j = 0;j < l;j++) {\r\n            if (tot[j].t >= i)\r\n                break;\r\n            if (tot[j].ok || mi < tot[j].a || ni < tot[j].b)\r\n                continue;\r\n            tot[j].ok = true;\r\n            mi -= tot[j].a;\r\n            ni -= tot[j].b;\r\n            ans += tot[j].v;\r\n            if (i > tot[j].u)\r\n                ans -= (i - tot[j].u) * tot[j].x;\r\n            else if (i < tot[j].u)\r\n                ans += (tot[j].u - i) * tot[j].w;\r\n        }\r\n    }\r\n    for (int i = 0;i < l;i++) {\r\n        if (!tot[i].ok && tot[i].u <= f)\r\n            ans -= (f - tot[i].u) * tot[i].x;\r\n    }\r\n    printf("Case %d: %d\\n\\n", ind, ans);\r\n    ind++;\r\n}\r\n\r\nint main() {\r\n    while (cin >> f && f)\r\n        solve();\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1295-f006-整数区间",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1295-f006-整数区间",children:"#"}),"1295: F006 整数区间"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-46",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-46",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"一个整数区间[a,b] (a < b)，是一个从a到b连续整数的集合。\r\n现在给你n个整数区间，编程找出一个集合R，使得n个集合中的每个集合都有2个整数出现在R中，并且这个集合R包含的整数个数最少。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入有多组数据，每组第一行包含整数n(1 <= n <= 10000)，表示整数区间的个数。接下来n行，每行包含两个整数a和b(0 <= a < b <= 10000, a < b)。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"输出符合条件的集合R中元素的个数。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"4\r\n3 6\r\n2 4\r\n0 2\r\n4 7\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"4\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-46",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-46",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 1e5 + 50;\r\n\r\nint cnt[maxn];\r\nint n;\r\nint ck[maxn];\r\nbool hasi[maxn];\r\nvoid solve() {\r\n    while (cin >> n) {\r\n        fill(hasi, hasi + 10005, false);\r\n        fill(ck, ck + n + 5, 0);\r\n        fill(cnt, cnt + 10005, 0);\r\n        if (!n)return;\r\n        vector<pair<int, int>> v;\r\n        for (int i = 0;i < n;i++) {\r\n            int a, b;\r\n            cin >> a >> b;\r\n            v.push_back(make_pair(a, b));\r\n            for (int j = a;j <= b;j++) {\r\n                cnt[j]++;\r\n            }\r\n        }\r\n        int ans = 0;\r\n        while (true) {\r\n            int mx = max_element(cnt, cnt + 10005) - cnt;\r\n            // cout << mx << endl;\r\n            if (cnt[mx] == 0)break;\r\n            hasi[mx] = true;\r\n            ans++;\r\n            fill(cnt, cnt + 10005, 0);\r\n            for (int i = 0;i < n;i++) {\r\n                if (ck[i] == 2)continue;\r\n                if (v[i].first <= mx && v[i].second >= mx) {\r\n                    ck[i]++;\r\n                }\r\n                if (ck[i] == 2)continue;\r\n\r\n                for (int j = v[i].first;j <= v[i].second;j++) {\r\n                    if (hasi[j])\r\n                        continue;\r\n                    cnt[j]++;\r\n                }\r\n            }\r\n        }\r\n        cout << ans << endl;\r\n    }\r\n}\r\n\r\nint main() {\r\n    // int t;cin >> t;\r\n    // while (t--)\r\n    solve();\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,s.jsxs)(r.h3,{id:"1296-f007-安装雷达",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1296-f007-安装雷达",children:"#"}),"1296: F007 安装雷达"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-47",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-47",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"我们假设海岸线是一条无限直线：以海岸线为界，陆地和海洋被分开，在海边分布着很多小岛。现在，我们在海岸线上安装雷达，每个雷达有固定的通讯范围（以d为半径的圆形区域），这样，海边的小岛就可以被某个雷达信号覆盖。\r\n这里我们使用笛卡尔坐标系，定义海岸线为x轴，x轴上方是海洋，下方是陆地。给出分布在海边每个小岛的坐标位置和雷达信号能覆盖的范围d，你的任务是计算出最小需要安装的雷达数目，使得这些雷达信号能覆盖到所有海边的小岛。每个小岛的坐标格式为(x,y)。\r\n如下图所示，给出第一个输入样例的坐标表示，这样在(-2,0),(1,0)上分别安装雷达就可以覆盖所有的小岛（p点），所以我们只需要安装2个雷达。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{src:"https://images.ptausercontent.com/d960cd14-697e-497a-acc7-a8436811eb3e.jpg",alt:"F007.jpg"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入包含多组测试样例。每组测试第一行包含两个整数n(1<=n<=1000)和d，n表示小岛的数目，d表示雷达能覆盖的范围的半径。接下来n行，每行由整数x和y组成，表示n个小岛的坐标位置。每两组数据之间有一个空行。\r\n输入0 0表示输入的结束。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"对于每一组输入，按照输出样例中的格式输出：包含输出序号和最少需要安装雷达的数目。如果找不到解决方案，即不能找到一种安装方案覆盖所有的小岛，输出”-1”。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"3 2\r\n1 2\r\n-3 1\r\n2 1\r\n\r\n1 2\r\n0 2\r\n\r\n0 0\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"Case 1: 2\r\nCase 2: 1\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-47",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-47",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\n\r\nstruct node {\r\n    double x, y;\r\n    node(double x, double y) :x(x), y(y) {}\r\n    bool operator < (const node& a) const {\r\n        return y < a.y;\r\n    }\r\n};\r\nint n;\r\nint d;\r\nint ind;\r\nvoid solve() {\r\n    ind = 1;\r\n    while (cin >> n >> d) {\r\n        if (n == 0 && d == 0)return;\r\n        bool f = true;\r\n        vector<node> q;\r\n        for (int i = 0;i < n;i++) {\r\n            int x, y;cin >> x >> y;\r\n            if (d < y)\r\n                f = false;\r\n            if (!f)continue;\r\n            double ei = sqrt(1.0 * d * d - 1.0 * y * y);\r\n            q.push_back(node{ x - ei,x + ei });\r\n        }\r\n        if (!f) {\r\n            printf("Case %d: -1\\n", ind);\r\n            ind++;\r\n            continue;\r\n        }\r\n        sort(q.begin(), q.end());\r\n        int ans = 1;\r\n        double yi = q[0].y;\r\n        for (int i = 1;i < q.size();i++) {\r\n            if (q[i].x <= yi) {\r\n                continue;\r\n            }\r\n            else {\r\n                ans++;\r\n                yi = q[i].y;\r\n            }\r\n        }\r\n        printf("Case %d: %d\\n", ind, ans);\r\n        ind++;\r\n    }\r\n}\r\n\r\nint main() {\r\n    // int t;cin >> t;\r\n    // while (t--) \r\n    solve();\r\n\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1297-f008-排队买饭",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1297-f008-排队买饭",children:"#"}),"1297: F008 排队买饭"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-48",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-48",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"周晓晓吃完中午饭后又觉得没吃饱，因此想要再去食堂买点饭，当她走进食堂发现已经有n个人排队了，她知道每个人买饭需要的时间。她想帮助大家尽快的买到饭，即让n个人的平均等待时间最小，周晓晓已经饿的无法想出办法，只想知道他们最小的平均等待时间是多少，你能帮助她吗?"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"输入可能有多组，每组第一行为一个整数n。 第二行 n 个整数，第 i 个整数 Ti 表示第i个人的等待时间Ti。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"每组输出占一行，为每组最小的平均等待时间（输出结果精确到小数点后两位）。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"10 \r\n56 12 1 99 1000 234 33 55 99 812\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"532.00\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-48",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-48",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 1e5 + 20;\r\nint a[maxn];\r\n\r\nint n;\r\nvoid solve() {\r\n    for (int i = 0;i < n;i++)cin >> a[i];\r\n    sort(a, a + n);\r\n    int ans = 0;\r\n    int tmp = 0;\r\n    for (int i = 0;i < n;i++) {\r\n        tmp += a[i];\r\n        ans += tmp;\r\n    }\r\n    printf("%.2lf\\n", 1.0 * ans / n);\r\n}\r\n\r\nint main() {\r\n    while (cin >> n)\r\n        solve();\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsxs)(r.h3,{id:"1298-f009-放书",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#1298-f009-放书",children:"#"}),"1298: F009 放书"]}),"\n",(0,s.jsxs)(r.h4,{id:"题目描述-49",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#题目描述-49",children:"#"}),"题目描述"]}),"\n",(0,s.jsx)(r.p,{children:"周小小最近想为自己的图书室添置一个巨型书架，尽管它是如此的大，但它还是几乎瞬间就被各种各样的书塞满了。现在，只有书架的顶上还留有一点空间。\r\n所有N(1<=N<=2000)把椅子都有一个确定的高度Hi（1<=Hi<=1000）。为了够到书架顶，周小小想像演杂技一般，将椅子一个一个的叠在一起，并上去把书架的空间补上。\r\n显然，椅子叠的越多，就越不稳定，于是小小希望在够到书架顶的前提下，让椅子数量尽量少，作为聪明的你，一定能帮助他计算出这个最小数量吧。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输入"})}),"\n",(0,s.jsx)(r.p,{children:"第1行: 2个用空格隔开的整数：N和B，表示有N把椅子和书架的高度；\r\n第2行到N+1行: 第i+1行是1个整数：Hi，表示椅子的高度。\r\n可能存在多组输入数据。"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"输出"})}),"\n",(0,s.jsx)(r.p,{children:"输出1个整数，即最少要多少把椅子。（如果到不了顶端，输出-1）"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输入"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"6 40\r\n6\r\n18\r\n11\r\n13\r\n19\r\n11\n"})}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.strong,{children:"样例输出"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-plaintext",children:"3\n"})}),"\n",(0,s.jsxs)(r.h4,{id:"参考代码-49",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#参考代码-49",children:"#"}),"参考代码"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 2010;\r\nint h[maxn];\r\n\r\nint n, b;\r\nvoid solve() {\r\n    for (int i = 0;i < n;i++)\r\n        cin >> h[i];\r\n    sort(h, h + n);\r\n    int sum = 0, cnt = 0;\r\n    for (int i = n - 1;i >= 0;i--) {\r\n        sum += h[i];\r\n        cnt++;\r\n        if (sum >= b) {\r\n            cout << cnt << endl;\r\n            return;\r\n        }\r\n    }\r\n    cout << -1 << endl;\r\n}\r\n\r\nint main() {\r\n    while (cin >> n >> b)\r\n        solve();\r\n\r\n    return 0;\r\n}\n"})})]})}function l(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,i.ah)(),n.components);return r?(0,s.jsx)(r,Object.assign({},n,{children:(0,s.jsx)(d,n)})):d(n)}let t=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["posts%2Falgorithm%2Fnenuoj.md"]={toc:[{id:"算法2递归a",text:"**算法2递归A**",depth:2},{id:"1241-a001-猴子吃桃",text:"1241: A001 猴子吃桃",depth:3},{id:"题目描述",text:"题目描述",depth:4},{id:"参考代码",text:"参考代码",depth:4},{id:"1242-a002-最大公约数",text:"1242: A002 最大公约数",depth:3},{id:"题目描述-1",text:"题目描述",depth:4},{id:"参考代码-1",text:"参考代码",depth:4},{id:"1243-a003-经典的hanoi汉诺塔问题",text:"1243: A003 经典的Hanoi(汉诺塔)问题",depth:3},{id:"题目描述-2",text:"题目描述",depth:4},{id:"参考代码-2",text:"参考代码",depth:4},{id:"1244-a004-菲波那契数列",text:"1244: A004 菲波那契数列",depth:3},{id:"题目描述-3",text:"题目描述",depth:4},{id:"参考代码-3",text:"参考代码",depth:4},{id:"1245-a005-另一个fibonacci数列",text:"1245: A005 另一个Fibonacci数列",depth:3},{id:"题目描述-4",text:"题目描述",depth:4},{id:"参考代码-4",text:"参考代码",depth:4},{id:"1246-a006-分形fractal",text:"1246: A006 分形（Fractal）",depth:3},{id:"题目描述-5",text:"题目描述",depth:4},{id:"参考代码-5",text:"参考代码",depth:4},{id:"1247-a007-二叉树",text:"1247: A007 二叉树",depth:3},{id:"题目描述-6",text:"题目描述",depth:4},{id:"参考代码-6",text:"参考代码",depth:4},{id:"1248-a008-波兰表达式",text:"1248: A008 波兰表达式",depth:3},{id:"题目描述-7",text:"题目描述",depth:4},{id:"参考代码-7",text:"参考代码",depth:4},{id:"1249-a009-放苹果",text:"1249: A009 放苹果",depth:3},{id:"题目描述-8",text:"题目描述",depth:4},{id:"参考代码-8",text:"参考代码",depth:4},{id:"1250-a010-递归练习1",text:"1250: A010 递归练习1",depth:3},{id:"题目描述-9",text:"题目描述",depth:4},{id:"参考代码-9",text:"参考代码",depth:4},{id:"1251-a011-递归练习2",text:"1251: A011 递归练习2",depth:3},{id:"题目描述-10",text:"题目描述",depth:4},{id:"参考代码-10",text:"参考代码",depth:4},{id:"1252-a012-递归练习3",text:"1252: A012 递归练习3",depth:3},{id:"题目描述-11",text:"题目描述",depth:4},{id:"参考代码-11",text:"参考代码",depth:4},{id:"1253-a013-红与黑",text:"1253: A013 红与黑",depth:3},{id:"题目描述-12",text:"题目描述",depth:4},{id:"参考代码-12",text:"参考代码",depth:4},{id:"1254-a014-城堡问题",text:"1254: A014 城堡问题",depth:3},{id:"题目描述-13",text:"题目描述",depth:4},{id:"参考代码-13",text:"参考代码",depth:4},{id:"1255-a015-分解因式",text:"1255: A015 分解因式",depth:3},{id:"题目描述-14",text:"题目描述",depth:4},{id:"参考代码-14",text:"参考代码",depth:4},{id:"1256-a016-数字拼凑",text:"1256: A016 数字拼凑",depth:3},{id:"题目描述-15",text:"题目描述",depth:4},{id:"参考代码-15",text:"参考代码",depth:4},{id:"算法2排序b",text:"**算法2排序B**",depth:2},{id:"1257-b001-快乐的蠕虫",text:"1257: B001 快乐的蠕虫",depth:3},{id:"题目描述-16",text:"题目描述",depth:4},{id:"参考代码-16",text:"参考代码",depth:4},{id:"1258-b002-单词重组",text:"1258: B002 单词重组",depth:3},{id:"题目描述-17",text:"题目描述",depth:4},{id:"参考代码-17",text:"参考代码",depth:4},{id:"算法2查找c",text:"**算法2查找C**",depth:2},{id:"1264-c001-字符串计数",text:"1264: C001 字符串计数",depth:3},{id:"题目描述-18",text:"题目描述",depth:4},{id:"参考代码-18",text:"参考代码",depth:4},{id:"1265-c002-赌徒",text:"1265: C002 赌徒",depth:3},{id:"题目描述-19",text:"题目描述",depth:4},{id:"参考代码-19",text:"参考代码",depth:4},{id:"1266-c003-半素数",text:"1266: C003 半素数",depth:3},{id:"题目描述-20",text:"题目描述",depth:4},{id:"参考代码-20",text:"参考代码",depth:4},{id:"1267-c004-棍子的膨胀",text:"1267: C004 棍子的膨胀",depth:3},{id:"题目描述-21",text:"题目描述",depth:4},{id:"参考代码-21",text:"参考代码",depth:4},{id:"1268-c005-电缆主",text:"1268: C005 电缆主",depth:3},{id:"题目描述-22",text:"题目描述",depth:4},{id:"参考代码-22",text:"参考代码",depth:4},{id:"1269-c006-宝贝鱼",text:"1269: C006 宝贝鱼",depth:3},{id:"题目描述-23",text:"题目描述",depth:4},{id:"参考代码-23",text:"参考代码",depth:4},{id:"1270-c007-星空",text:"1270: C007 星空",depth:3},{id:"题目描述-24",text:"题目描述",depth:4},{id:"参考代码-24",text:"参考代码",depth:4},{id:"算法2动态规划d",text:"**算法2动态规划D**",depth:2},{id:"1272-d001-数字三角形",text:"1272: D001 数字三角形",depth:3},{id:"题目描述-25",text:"题目描述",depth:4},{id:"参考代码-25",text:"参考代码",depth:4},{id:"1273-d002-最长上升子序列",text:"1273: D002 最长上升子序列",depth:3},{id:"题目描述-26",text:"题目描述",depth:4},{id:"参考代码-26",text:"参考代码",depth:4},{id:"1274-d003-help-jimmy",text:"1274: D003 Help Jimmy",depth:3},{id:"题目描述-27",text:"题目描述",depth:4},{id:"参考代码-27",text:"参考代码",depth:4},{id:"1275-d004-最长公共子序列",text:"1275: D004 最长公共子序列",depth:3},{id:"题目描述-28",text:"题目描述",depth:4},{id:"参考代码-28",text:"参考代码",depth:4},{id:"1276-d005-陪审团的人选",text:"1276: D005 陪审团的人选",depth:3},{id:"题目描述-29",text:"题目描述",depth:4},{id:"参考代码-29",text:"参考代码",depth:4},{id:"1277-d006-最大和",text:"1277: D006 最大和",depth:3},{id:"题目描述-30",text:"题目描述",depth:4},{id:"参考代码-30",text:"参考代码",depth:4},{id:"1278-d007-最大子矩阵",text:"1278: D007 最大子矩阵",depth:3},{id:"题目描述-31",text:"题目描述",depth:4},{id:"参考代码-31",text:"参考代码",depth:4},{id:"算法2搜索e",text:"**算法2搜索E**",depth:2},{id:"1281-e001-数的划分",text:"1281: E001 数的划分",depth:3},{id:"题目描述-32",text:"题目描述",depth:4},{id:"参考代码-32",text:"参考代码",depth:4},{id:"1282-e002-闪避湖泊",text:"1282: E002 闪避湖泊",depth:3},{id:"题目描述-33",text:"题目描述",depth:4},{id:"参考代码-33",text:"参考代码",depth:4},{id:"1283-e003-信道分配",text:"1283: E003 信道分配",depth:3},{id:"题目描述-34",text:"题目描述",depth:4},{id:"参考代码-34",text:"参考代码",depth:4},{id:"1284-e004-移动的骑士",text:"1284: E004 移动的骑士",depth:3},{id:"题目描述-35",text:"题目描述",depth:4},{id:"参考代码-35",text:"参考代码",depth:4},{id:"1285-e005-图像周长",text:"1285: E005 图像周长",depth:3},{id:"题目描述-36",text:"题目描述",depth:4},{id:"参考代码-36",text:"参考代码",depth:4},{id:"1286-e006-移动的骑士",text:"1286: E006 移动的骑士",depth:3},{id:"题目描述-37",text:"题目描述",depth:4},{id:"参考代码-37",text:"参考代码",depth:4},{id:"1287-e007-寻找m",text:"1287: E007 寻找M",depth:3},{id:"题目描述-38",text:"题目描述",depth:4},{id:"参考代码-38",text:"参考代码",depth:4},{id:"1288-e008-红与黑",text:"1288: E008 红与黑",depth:3},{id:"题目描述-39",text:"题目描述",depth:4},{id:"参考代码-39",text:"参考代码",depth:4},{id:"1289-e009-小木棒",text:"1289: E009 小木棒",depth:3},{id:"题目描述-40",text:"题目描述",depth:4},{id:"参考代码-40",text:"参考代码",depth:4},{id:"算法2贪心f",text:"**算法2贪心F**",depth:2},{id:"1290-f001-木棒加工问题",text:"1290: F001 木棒加工问题",depth:3},{id:"题目描述-41",text:"题目描述",depth:4},{id:"参考代码-41",text:"参考代码",depth:4},{id:"1291-f002-装箱",text:"1291: F002 装箱",depth:3},{id:"题目描述-42",text:"题目描述",depth:4},{id:"参考代码-42",text:"参考代码",depth:4},{id:"1292-f003-移动桌子",text:"1292: F003 移动桌子",depth:3},{id:"题目描述-43",text:"题目描述",depth:4},{id:"参考代码-43",text:"参考代码",depth:4},{id:"1293-f004-基因集合",text:"1293: F004 基因集合",depth:3},{id:"题目描述-44",text:"题目描述",depth:4},{id:"参考代码-44",text:"参考代码",depth:4},{id:"1294-f005-主框架",text:"1294: F005 主框架",depth:3},{id:"题目描述-45",text:"题目描述",depth:4},{id:"参考代码-45",text:"参考代码",depth:4},{id:"1295-f006-整数区间",text:"1295: F006 整数区间",depth:3},{id:"题目描述-46",text:"题目描述",depth:4},{id:"参考代码-46",text:"参考代码",depth:4},{id:"1296-f007-安装雷达",text:"1296: F007 安装雷达",depth:3},{id:"题目描述-47",text:"题目描述",depth:4},{id:"参考代码-47",text:"参考代码",depth:4},{id:"1297-f008-排队买饭",text:"1297: F008 排队买饭",depth:3},{id:"题目描述-48",text:"题目描述",depth:4},{id:"参考代码-48",text:"参考代码",depth:4},{id:"1298-f009-放书",text:"1298: F009 放书",depth:3},{id:"题目描述-49",text:"题目描述",depth:4},{id:"参考代码-49",text:"参考代码",depth:4}],title:"NENU2023学年算法2例题",headingTitle:"NENU OJ算法2例题",frontmatter:{title:"NENU2023学年算法2例题",date:"2023-12-19T14:02:50.000Z",draft:!1,authors:[],description:"",tags:["算法","NENUOJ"],categories:["在学算法的日子里"],series:["题解记录"],hiddenFromHomePage:!1,hiddenFromSearch:!1,featuredImage:"",featuredImagePreview:"",toc:{enable:!0},math:{enable:!0},lightgallery:!1,license:""}}},3208:function(n,r,e){e.d(r,{Z:()=>t});var s=e(2676),i=e(5271),a=e(2815);e(2791);let d={"zh-CN":n=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${n.minutes>=1?`${Math.ceil(n.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":n=>`Estimated reading time: ${n.minutes>=1?`${Math.ceil(n.minutes)} minutes`:"less than 1 minute"}`};function l(n,r,e){let s=Object.keys(d).includes(r)?r:e;return d[s](n)}let t=n=>{let{defaultLocale:r="en-US"}=n,e=(0,a.Vi)().page.readingTimeData,d=(0,a.Jr)(),t=(0,a.e7)(),[c,h]=(0,i.useState)(l(e,d,r));return(0,i.useEffect)(()=>{h(l(e,d,r))},[d,e]),(0,s.jsx)("span",{"data-dark":String(t),className:"rp-reading-time",children:c})}}}]);