"use strict";(self.webpackChunkblogsite_rspress=self.webpackChunkblogsite_rspress||[]).push([["7076"],{6501:function(n,e,l){l.r(e),l.d(e,{default:()=>d});var s=l(2676),r=l(453),t=l(5523);function a(n){let e=Object.assign({p:"p",h3:"h3",a:"a",ul:"ul",li:"li",strong:"strong",h2:"h2",ol:"ol",pre:"pre",code:"code",h4:"h4"},(0,r.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:'{{< admonition abstract "问题预设" true>}}'}),"\n",(0,s.jsx)(e.p,{children:"网络断开之后，之前上传的部分没了？"}),"\n",(0,s.jsx)(e.p,{children:"传着传着，网络波动了，结果没有了。"}),"\n",(0,s.jsx)(e.p,{children:"关机后可不可以接着传，怎么做到？"}),"\n",(0,s.jsx)(e.p,{children:"{{< /admonition >}}"}),"\n",(0,s.jsxs)(e.h3,{id:"术语",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#术语",children:"#"}),"术语"]}),"\n",(0,s.jsx)(t.Z,{defaultLocale:"zh-CN"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"断点续传"}),"\n",(0,s.jsx)(e.li,{children:"断开重连重传"}),"\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"切片上传"})}),"\n"]}),"\n",(0,s.jsxs)(e.h2,{id:"切片上传",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#切片上传",children:"#"}),"切片上传"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"步骤"})}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsx)(e.li,{children:"前端切片 chunk 5MB"}),"\n",(0,s.jsx)(e.li,{children:"将切片传递给后端，切片要去名：hash、index"}),"\n",(0,s.jsx)(e.li,{children:"后端组合切片"}),"\n"]}),"\n",(0,s.jsxs)(e.h3,{id:"代码示例",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码示例",children:"#"}),"代码示例"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-html",children:"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>大文件上传</title>\n</head>\n\n<body>\n  <input type=\"file\" id=\"file\" multiple>\n  <button id=\"upload\">上传</button>\n</body>\n\n<script>\n\n  const CHUNK_SIZE = 5 * 1024 * 1024; // 5MB\n\n\n  function uploadFile() {\n    const file = document.getElementById('file').files[0];\n    console.log('上传文件', file.name)\n    if (!file) {\n      return\n    }\n\n    const totalSize = file.size\n    const totalChunks = Math.ceil(totalSize / CHUNK_SIZE)\n    let currentChunk = 0\n    const chunks = []\n\n    function uploadChunk() {\n      console.log('上传第', currentChunk, '块')\n      if (currentChunk >= totalChunks) {\n        console.log('上传完成')\n        return\n      }\n      const start = currentChunk * CHUNK_SIZE\n      const end = Math.min(totalSize, start + CHUNK_SIZE)\n      const chunk = file.slice(start, end)\n\n      const formData = new FormData()\n      formData.append('file', chunk)\n      formData.append('index', currentChunk)\n      formData.append('totalChunks', totalChunks)\n      formData.append('filename', file.name)\n\n      // fetch('/api/upload', {\n      //   method: 'POST',\n      //   body: formData\n      // }).then(res => {\n      //   if (res.ok) {\n      //     currentChunk++;\n      //     uploadChunk() // 递归上传下一块\n      //   } else {\n      //     throw new Error('上传失败')\n      //   }\n      // }).catch(err => {\n      //   console.error(err)\n      // });\n\n      currentChunk++;\n      uploadChunk() // 递归上传下一块\n    };\n\n    // 开始上传\n    uploadChunk();\n  };\n\n  document.getElementById('upload').addEventListener('click', uploadFile);\n<\/script>\n\n</html>\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"优化",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#优化",children:"#"}),"优化"]}),"\n",(0,s.jsxs)(e.h4,{id:"压缩文件",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#压缩文件",children:"#"}),"压缩文件"]}),"\n",(0,s.jsx)(e.p,{children:"上传前对文件进行压缩，减少传输的数据量。"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"canvas"}),"或第三方库压缩图片、",(0,s.jsx)(e.code,{children:"pako"}),"压缩其他文件类型。"]}),"\n",(0,s.jsxs)(e.h4,{id:"并发上传",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#并发上传",children:"#"}),"并发上传"]}),"\n",(0,s.jsxs)(e.p,{children:["使用",(0,s.jsx)(e.code,{children:"Promise.all"}),"并发上传多个分片。"]}),"\n",(0,s.jsx)(e.p,{children:"注意控制并发数，避免请求过多。"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function uploadFile(file) {\n    const chunkSize = 5 * 1024 * 1024; // 5MB\n    const chunks = Math.ceil(file.size / chunkSize);\n    const concurrency = 3; // 并发数\n    let currentChunk = 0;\n\n    function uploadChunk(index) {\n        const offset = index * chunkSize;\n        const chunk = file.slice(offset, offset + chunkSize);\n        const formData = new FormData();\n        formData.append('file', chunk);\n        formData.append('offset', offset);\n        formData.append('totalSize', file.size);\n\n        return fetch('/upload', {\n            method: 'POST',\n            body: formData\n        });\n    }\n\n    function uploadNextChunk() {\n        if (currentChunk >= chunks) {\n            console.log('Upload complete');\n            return;\n        }\n\n        const promises = [];\n        for (let i = 0; i < concurrency && currentChunk < chunks; i++) {\n            promises.push(uploadChunk(currentChunk));\n            currentChunk++;\n        }\n\n        Promise.all(promises).then(() => {\n            uploadNextChunk();\n        });\n    }\n\n    uploadNextChunk();\n}\n"})}),"\n",(0,s.jsxs)(e.h4,{id:"显示上传进度",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#显示上传进度",children:"#"}),"显示上传进度"]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"websocket"}),"实时通知上传情况，以及请求序列的控制。"]}),"\n",(0,s.jsxs)(e.p,{children:["通过",(0,s.jsx)(e.code,{children:"XMLHttpRequest"}),"或",(0,s.jsx)(e.code,{children:"fetch"}),"的 API 显示上传进度，提升用户体验。"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"function uploadFile(file) {\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', '/upload', true);\n\n    xhr.upload.onprogress = (event) => {\n        if (event.lengthComputable) {\n            const percentComplete = (event.loaded / event.total) * 100;\n            console.log(`Upload progress: ${percentComplete}%`);\n        }\n    };\n\n    xhr.onload = () => {\n        if (xhr.status === 200) {\n            console.log('Upload complete');\n        }\n    };\n\n    const formData = new FormData();\n    formData.append('file', file);\n    xhr.send(formData);\n}\n"})}),"\n",(0,s.jsxs)(e.h4,{id:"主进程卡顿",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#主进程卡顿",children:"#"}),"主进程卡顿？"]}),"\n",(0,s.jsxs)(e.p,{children:["尝试使用",(0,s.jsx)(e.code,{children:"web-worker"}),"，实现多线程切片，处理完之后交给主进程发送"]}),"\n",(0,s.jsxs)(e.h4,{id:"实现用户关闭浏览器后重新打开继续上传",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#实现用户关闭浏览器后重新打开继续上传",children:"#"}),"实现用户关闭浏览器后重新打开，继续上传"]}),"\n",(0,s.jsxs)(e.p,{children:["将 ",(0,s.jsx)(e.code,{children:"Blob"})," 存储到",(0,s.jsx)(e.code,{children:"IndexedDB"}),"，下次打开浏览器后嗅探一下是否存在未完成的切片，如果有就尝试继续上传。"]}),"\n",(0,s.jsx)(e.p,{children:"记录已上传的分片信息。"}),"\n",(0,s.jsx)(e.p,{children:"上传前检查服务器上已上传的分片，跳过已上传部分。"}),"\n",(0,s.jsxs)(e.h2,{id:"下载",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#下载",children:"#"}),"下载"]}),"\n",(0,s.jsxs)(e.h3,{id:"合并分片的文件",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#合并分片的文件",children:"#"}),"合并分片的文件"]}),"\n",(0,s.jsx)(e.p,{children:"将大文件分成多个小块下载，减少单次请求的压力，并支持断点续传。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"步骤"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"服务器将文件分片，前端通过多个请求下载分片。"}),"\n",(0,s.jsxs)(e.li,{children:["使用 \xa0",(0,s.jsx)(e.code,{children:"Range"}),"\xa0 请求头指定下载范围。"]}),"\n",(0,s.jsx)(e.li,{children:"前端将分片合并为完整文件。"}),"\n"]}),"\n",(0,s.jsxs)(e.h4,{id:"代码示例-1",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码示例-1",children:"#"}),"代码示例"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"async function downloadFile(url, fileName, chunkSize = 5 * 1024 * 1024) {\n    let offset = 0;\n    const chunks = [];\n\n    while (true) {\n        const end = offset + chunkSize - 1;\n        const headers = { Range: `bytes=${offset}-${end}` };\n        const response = await fetch(url, { headers });\n\n        if (response.status === 206) { // 206 Partial Content\n            const blob = await response.blob();\n            chunks.push(blob);\n            offset += chunkSize;\n        } else if (response.status === 200) {\n            // 如果服务器不支持分片下载，直接下载整个文件\n            const blob = await response.blob();\n            chunks.push(blob);\n            break;\n        } else {\n            throw new Error('Failed to download file');\n        }\n    }\n\n    // 合并分片\n    const fullBlob = new Blob(chunks);\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(fullBlob);\n    link.download = fileName;\n    link.click();\n    URL.revokeObjectURL(link.href);\n}\n\n// 使用\ndownloadFile('https://example.com/large-file.zip', 'large-file.zip');\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"流式下载",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#流式下载",children:"#"}),"流式下载"]}),"\n",(0,s.jsxs)(e.p,{children:["使用流式 API（如 \xa0",(0,s.jsx)(e.code,{children:"ReadableStream"}),"）逐步下载文件，避免内存占用过高。"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"实现步骤："})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["使用 \xa0",(0,s.jsx)(e.code,{children:"fetch"}),"\xa0 获取响应流。"]}),"\n",(0,s.jsxs)(e.li,{children:["通过 \xa0",(0,s.jsx)(e.code,{children:"ReadableStream"}),"\xa0 逐步读取数据并写入文件。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h4,{id:"代码示例-2",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码示例-2",children:"#"}),"代码示例"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"async function streamDownload(url, fileName) {\n    const response = await fetch(url);\n    const reader = response.body.getReader();\n    const chunks = [];\n\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n        chunks.push(value);\n    }\n\n    // 合并数据\n    const fullBlob = new Blob(chunks);\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(fullBlob);\n    link.download = fileName;\n    link.click();\n    URL.revokeObjectURL(link.href);\n}\n\n// 使用\nstreamDownload('https://example.com/large-file.zip', 'large-file.zip');\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"断点续传resumable-download",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#断点续传resumable-download",children:"#"}),"断点续传（Resumable Download）"]}),"\n",(0,s.jsx)(e.p,{children:"在网络中断后，从中断处继续下载，避免重新下载。"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"实现步骤："})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"记录已下载的字节范围。"}),"\n",(0,s.jsxs)(e.li,{children:["使用 \xa0",(0,s.jsx)(e.code,{children:"Range"}),"\xa0 请求头从断点处继续下载。"]}),"\n"]}),"\n",(0,s.jsxs)(e.h4,{id:"代码示例-3",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码示例-3",children:"#"}),"代码示例"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-js",children:"async function resumeDownload(url, fileName, chunkSize = 5 * 1024 * 1024) {\n    let offset = 0;\n    const chunks = [];\n\n    // 检查本地是否有部分下载的文件\n    const savedBlob = localStorage.getItem(fileName);\n    if (savedBlob) {\n        const blob = new Blob([savedBlob]);\n        offset = blob.size;\n        chunks.push(blob);\n    }\n\n    while (true) {\n        const end = offset + chunkSize - 1;\n        const headers = { Range: `bytes=${offset}-${end}` };\n        const response = await fetch(url, { headers });\n\n        if (response.status === 206) { // 206 Partial Content\n            const blob = await response.blob();\n            chunks.push(blob);\n            offset += chunkSize;\n\n            // 保存已下载的部分到本地\n            const fullBlob = new Blob(chunks);\n            localStorage.setItem(fileName, await fullBlob.text());\n        } else if (response.status === 200) {\n            // 如果服务器不支持分片下载，直接下载整个文件\n            const blob = await response.blob();\n            chunks.push(blob);\n            break;\n        } else {\n            throw new Error('Failed to download file');\n        }\n    }\n\n    // 合并分片\n    const fullBlob = new Blob(chunks);\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(fullBlob);\n    link.download = fileName;\n    link.click();\n    URL.revokeObjectURL(link.href);\n    localStorage.removeItem(fileName);\n}\n\n// 使用\nresumeDownload('https://example.com/large-file.zip', 'large-file.zip');\n"})}),"\n",(0,s.jsxs)(e.h3,{id:"其他优化",children:[(0,s.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#其他优化",children:"#"}),"其他优化"]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Service Worker 缓存"}),"：通过 Service Worker 缓存大文件，提升后续加载速度。。"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"显示下载进度"}),"：提升用户体验。"]}),"\n"]})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),n.components);return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(a,n)})):a(n)}let d=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["posts%2Ffront_end%2Flarge_file_upload.md"]={toc:[{id:"术语",text:"术语",depth:3},{id:"切片上传",text:"切片上传",depth:2},{id:"代码示例",text:"代码示例",depth:3},{id:"优化",text:"优化",depth:3},{id:"压缩文件",text:"压缩文件",depth:4},{id:"并发上传",text:"并发上传",depth:4},{id:"显示上传进度",text:"显示上传进度",depth:4},{id:"主进程卡顿",text:"主进程卡顿？",depth:4},{id:"实现用户关闭浏览器后重新打开继续上传",text:"实现用户关闭浏览器后重新打开，继续上传",depth:4},{id:"下载",text:"下载",depth:2},{id:"合并分片的文件",text:"合并分片的文件",depth:3},{id:"代码示例-1",text:"代码示例",depth:4},{id:"流式下载",text:"流式下载",depth:3},{id:"代码示例-2",text:"代码示例",depth:4},{id:"断点续传resumable-download",text:"断点续传（Resumable Download）",depth:3},{id:"代码示例-3",text:"代码示例",depth:4},{id:"其他优化",text:"其他优化",depth:3}],title:"大文件上传和下载问题",headingTitle:"",frontmatter:{title:"大文件上传和下载问题",subtitle:"",date:"2025-03-17T05:17:45.000Z",lastmod:"2025-03-17T05:17:45.000Z",draft:!1,authors:null,description:"",tags:["前端","大文件上传","JavaScript"],categories:["在前端搬砖的日子里"],series:["前端八股文基础"],hiddenFromHomePage:!1,hiddenFromSearch:!1,featuredImage:"https://img.dodolalorc.cn/i/2025/03/03/67c558f57d10e.png",featuredImagePreview:"https://img.dodolalorc.cn/i/2025/03/03/67c558f57d10e.png",toc:{enable:!0},math:{enable:!0},lightgallery:!1,license:""}}},5523:function(n,e,l){l.d(e,{Z:()=>d});var s=l(2676),r=l(5271),t=l(2815);l(7995);let a={"zh-CN":n=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${n.minutes>=1?`${Math.ceil(n.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":n=>`Estimated reading time: ${n.minutes>=1?`${Math.ceil(n.minutes)} minutes`:"less than 1 minute"}`};function i(n,e,l){let s=Object.keys(a).includes(e)?e:l;return a[s](n)}let d=n=>{let{defaultLocale:e="en-US"}=n,l=(0,t.Vi)().page.readingTimeData,a=(0,t.Jr)(),d=(0,t.e7)(),[c,o]=(0,r.useState)(i(l,a,e));return(0,r.useEffect)(()=>{o(i(l,a,e))},[a,l]),(0,s.jsx)("span",{"data-dark":String(d),className:"rp-reading-time",children:c})}}}]);