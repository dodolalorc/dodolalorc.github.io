"use strict";(self.webpackChunkblogsite_rspress=self.webpackChunkblogsite_rspress||[]).push([["9843"],{5890:function(n,e,r){r.r(e),r.d(e,{default:()=>c});var i=r(2676),s=r(453),a=r(5523);function d(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",h3:"h3",p:"p",code:"code",strong:"strong",em:"em",pre:"pre",span:"span",math:"math",semantics:"semantics",mrow:"mrow",mi:"mi",mo:"mo",annotation:"annotation"},(0,s.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"哈希33",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#哈希33",children:"#"}),"哈希(3/3)"]}),"\n",(0,i.jsx)(a.Z,{defaultLocale:"zh-CN"}),"\n",(0,i.jsxs)(e.h2,{id:"1-两数之和",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1-两数之和",children:"#"}),"1. 两数之和"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给定一个整数数组 \xa0",(0,i.jsx)(e.code,{children:"nums"}),"\xa0 和一个整数目标值 \xa0",(0,i.jsx)(e.code,{children:"target"}),"，请你在该数组中找出 \xa0",(0,i.jsx)(e.strong,{children:"和为目标值"}),"\xa0",(0,i.jsx)(e.em,{children:(0,i.jsx)(e.code,{children:"target"})}),"\xa0 的那 \xa0",(0,i.jsx)(e.strong,{children:"两个"}),"\xa0 整数，并返回它们的数组下标。"]}),"\n",(0,i.jsx)(e.p,{children:"你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。"}),"\n",(0,i.jsx)(e.p,{children:"你可以按任意顺序返回答案。"}),"\n",(0,i.jsxs)(e.h3,{id:"代码",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        unordered_map<int, int> mp;\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            if (mp.count(target - nums[i])) {\n                return {mp[target - nums[i]], i};\n            }\n            mp[nums[i]] = i;\n        }\n        return {};\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"49-字母异位词分组",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#49-字母异位词分组",children:"#"}),"49. 字母异位词分组"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-1",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-1",children:"#"}),"题意"]}),"\n",(0,i.jsx)(e.p,{children:"给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。"}),"\n",(0,i.jsx)(e.p,{children:"字母异位词 是由重新排列源单词的所有字母得到的一个新单词。"}),"\n",(0,i.jsxs)(e.h3,{id:"代码-1",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-1",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        unordered_map<string, vector<string>> mp;\n        for (auto& s : strs) {\n            string t = s;\n            sort(t.begin(), t.end());\n            mp[t].push_back(s);\n        }\n        vector<vector<string>> v;\n        for (auto& i : mp) {\n            v.push_back(move(i.second));\n        }\n        return v;\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"128-最长连续序列",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#128-最长连续序列",children:"#"}),"128. 最长连续序列"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-2",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-2",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给定一个未排序的整数数组 \xa0",(0,i.jsx)(e.code,{children:"nums"}),"\xa0，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。"]}),"\n",(0,i.jsxs)(e.p,{children:["请你设计并实现时间复杂度为 \xa0",(0,i.jsx)(e.code,{children:"O(n)"}),"\xa0 的算法解决此问题。"]}),"\n",(0,i.jsxs)(e.h3,{id:"代码-2",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-2",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int longestConsecutive(vector<int>& nums) {\n        if (nums.empty())\n            return 0;\n        if (nums.size() == 1)\n            return 1;\n\n        sort(nums.begin(), nums.end());\n        int ans = 1, mx = 1;\n        int n = nums.size();\n        for (int i = 1; i < n; i++) {\n            if (nums[i] == nums[i - 1])\n                continue;\n            if (nums[i] == nums[i - 1] + 1) {\n                mx++;\n            } else {\n                mx = 1;\n            }\n            ans = max(mx, ans);\n        }\n        return ans;\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h1,{id:"双指针44",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#双指针44",children:"#"}),"双指针(4/4)"]}),"\n",(0,i.jsxs)(e.h2,{id:"283-移动零",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#283-移动零",children:"#"}),"283. 移动零"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-3",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-3",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给定一个数组 \xa0",(0,i.jsx)(e.code,{children:"nums"}),"，编写一个函数将所有 \xa0",(0,i.jsx)(e.code,{children:"0"}),"\xa0 移动到数组的末尾，同时保持非零元素的相对顺序。"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"请注意"}),"\xa0，必须在不复制数组的情况下原地对数组进行操作。"]}),"\n",(0,i.jsxs)(e.h3,{id:"代码-3",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-3",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    void moveZeroes(vector<int>& nums) {\n        int pre = 0, cur = 0;\n        while (cur < nums.size()) {\n            if (nums[cur]) {\n                if (pre != cur)\n                    swap(nums[pre], nums[cur]);\n                pre++;\n            }\n            cur++;\n        }\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"11-盛最多水的容器",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#11-盛最多水的容器",children:"#"}),"11. 盛最多水的容器"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-4",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-4",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给定一个长度为 \xa0",(0,i.jsx)(e.code,{children:"n"}),"\xa0 的整数数组 \xa0",(0,i.jsx)(e.code,{children:"height"}),"\xa0。有 \xa0",(0,i.jsx)(e.code,{children:"n"}),"\xa0 条垂线，第 \xa0",(0,i.jsx)(e.code,{children:"i"}),"\xa0 条线的两个端点是 \xa0",(0,i.jsx)(e.code,{children:"(i, 0)"}),"\xa0 和 \xa0",(0,i.jsx)(e.code,{children:"(i, height[i])"}),"\xa0。"]}),"\n",(0,i.jsxs)(e.p,{children:["找出其中的两条线，使得它们与 \xa0",(0,i.jsx)(e.code,{children:"x"}),"\xa0 轴共同构成的容器可以容纳最多的水。"]}),"\n",(0,i.jsx)(e.p,{children:"返回容器可以储存的最大水量。"}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"说明："})," 你不能倾斜容器。"]}),"\n",(0,i.jsxs)(e.h3,{id:"代码-4",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-4",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        int l = 0, r = height.size() - 1;\n        int cur = (r - l) * min(height[l], height[r]);\n        int ans = cur;\n        while (l < r) {\n            ans = max(ans, cur);\n            if (height[l] < height[r]) {\n                l++;\n            } else {\n                r--;\n            }\n            cur = (r - l) * min(height[l], height[r]);\n        }\n        return ans;\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"15-三数之和",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#15-三数之和",children:"#"}),"15. 三数之和"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-5",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-5",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给你一个整数数组 \xa0",(0,i.jsx)(e.code,{children:"nums"}),"\xa0，判断是否存在三元组 \xa0",(0,i.jsx)(e.code,{children:"[nums[i], nums[j], nums[k]]"}),"\xa0 满足 \xa0",(0,i.jsx)(e.code,{children:"i != j"}),"、",(0,i.jsx)(e.code,{children:"i != k"}),"\xa0 且 \xa0",(0,i.jsx)(e.code,{children:"j != k"}),"\xa0，同时还满足 \xa0",(0,i.jsx)(e.code,{children:"nums[i] + nums[j] + nums[k] == 0"}),"\xa0。请你返回所有和为 \xa0",(0,i.jsx)(e.code,{children:"0"}),"\xa0 且不重复的三元组。"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"注意："})," 答案中不可以包含重复的三元组。"]}),"\n",(0,i.jsxs)(e.h3,{id:"代码-5",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-5",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        int n = nums.size();\n        sort(nums.begin(), nums.end());\n        vector<vector<int>> res;\n        int i = 0;\n        while (i + 2 < n) {\n            if (nums[i] > 0) {\n                break;\n            }\n            if (i > 0 && nums[i] == nums[i - 1]) {\n                i++;\n                continue;\n            }\n\n            int l = i + 1, r = n - 1;\n            while (l < r) {\n                if (nums[i] + nums[l] + nums[r] < 0) {\n                    l++;\n                } else if (nums[i] + nums[l] + nums[r] > 0) {\n                    r--;\n                } else {\n                    res.push_back({nums[i], nums[l], nums[r]});\n                    while (l < r && nums[l] == nums[l + 1]) {\n                        l++;\n                    }\n                    while (l < r && nums[r] == nums[r - 1]) {\n                        r--;\n                    }\n                    l++, r--;\n                }\n            }\n            i++;\n        }\n        return res;\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"42-接雨水",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#42-接雨水",children:"#"}),"42. 接雨水"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-6",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-6",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给定 \xa0",(0,i.jsx)(e.code,{children:"n"}),"\xa0 个非负整数表示每个宽度为 \xa0",(0,i.jsx)(e.code,{children:"1"}),"\xa0 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。"]}),"\n",(0,i.jsxs)(e.h3,{id:"代码-6",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-6",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int trap(vector<int>& height) {\n        int n = height.size();\n        int lmx = 0, rmx = 0, mx = 0;\n        int ans = 0;\n        int l = 0, r = n - 1;\n        while (l < r) {\n            lmx = max(lmx, height[l]);\n            rmx = max(rmx, height[r]);\n            if (height[l] < height[r]) { // 低的存水上限已经定了\n                ans += lmx - height[l];\n                l++;\n            } else {\n                ans += rmx - height[r];\n                r--;\n            }\n        }\n        return ans;\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h1,{id:"滑动窗口22",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#滑动窗口22",children:"#"}),"滑动窗口(2/2)"]}),"\n",(0,i.jsxs)(e.h2,{id:"3-无重复字符的最长子串",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3-无重复字符的最长子串",children:"#"}),"3. 无重复字符的最长子串"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-7",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-7",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给定一个字符串 \xa0",(0,i.jsx)(e.code,{children:"s"}),"\xa0，请你找出其中不含有重复字符的 \xa0",(0,i.jsx)(e.strong,{children:"最长子串"}),"\xa0 的长度。"]}),"\n",(0,i.jsxs)(e.h3,{id:"代码-7",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-7",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        int n = s.size();\n        if (!n) {\n            return 0;\n        }\n        unordered_map<char, int> cnt;\n        int l = 0, r = 1;\n        int ans = 1;\n        cnt[s[0]]++;\n        while (r < n) {\n            while (r < n && cnt[s[r]] == 0) {\n                cnt[s[r]]++;\n                r++;\n            }\n            ans = max(r - l, ans);\n            while (l < r && cnt[s[r]] != 0) {\n                cnt[s[l]]--;\n                l++;\n            }\n            if (r < n) {\n                cnt[s[r]]++;\n                r++;\n            }\n        }\n\n        return ans;\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"438-找到字符串中所有字母异位词",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#438-找到字符串中所有字母异位词",children:"#"}),"438. 找到字符串中所有字母异位词"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-8",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-8",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给定两个字符串 \xa0",(0,i.jsx)(e.code,{children:"s"}),"\xa0 和 \xa0",(0,i.jsx)(e.code,{children:"p"}),"，找到 \xa0",(0,i.jsx)(e.code,{children:"s"}),"\xa0 中所有 \xa0",(0,i.jsx)(e.code,{children:"p"}),"\xa0 的 \xa0",(0,i.jsx)(e.strong,{children:"异位词"}),"\xa0 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。"]}),"\n",(0,i.jsxs)(e.h3,{id:"代码-8",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-8",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> findAnagrams(string s, string p) {\n        if (s.size() < p.size() || s.empty() || p.empty()) {\n            return {};\n        }\n        vector<int> ts(26, 0), tp(26, 0);\n        int n = s.size(), m = p.size();\n        for (int i = 0; i < m; i++) {\n            ts[s[i] - 'a']++, tp[p[i] - 'a']++;\n        }\n        int mc = 0;\n        for (int i = 0; i < 26; i++) {\n            mc += tp[i] == ts[i];\n        }\n        int l = 0, r = m;\n        vector<int> pos;\n        while (r <= n) {\n            if (mc == 26) {\n                pos.push_back(l);\n            }\n            if (r == n)\n                break;\n            mc -= tp[s[l] - 'a'] == ts[s[l] - 'a'];\n            mc -= tp[s[r] - 'a'] == ts[s[r] - 'a'];\n            ts[s[l] - 'a']--, ts[s[r] - 'a']++;\n            mc += tp[s[l] - 'a'] == ts[s[l] - 'a'];\n            mc += tp[s[r] - 'a'] == ts[s[r] - 'a'];\n            l++, r++;\n        }\n\n        return pos;\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h1,{id:"子串33",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#子串33",children:"#"}),"子串(3/3)"]}),"\n",(0,i.jsxs)(e.h2,{id:"560-和为-k-的子数组",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#560-和为-k-的子数组",children:"#"}),"560. 和为 K 的子数组"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-9",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-9",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给你一个整数数组 \xa0",(0,i.jsx)(e.code,{children:"nums"}),"\xa0 和一个整数 \xa0",(0,i.jsx)(e.code,{children:"k"}),"\xa0，请你统计并返回 \xa0",(0,i.jsxs)(e.em,{children:["该数组中和为 \xa0",(0,i.jsx)(e.code,{children:"k"}),"\xa0 的子数组的个数"]}),"\xa0。"]}),"\n",(0,i.jsx)(e.p,{children:"子数组是数组中元素的连续非空序列。"}),"\n",(0,i.jsxs)(e.h3,{id:"代码-9",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-9",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int subarraySum(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> pre(n + 1, 0);\n        unordered_map<int, int> mp;\n        int ans = 0;\n        mp[0] = 1;\n        for (int i = 0; i < n; i++) {\n            pre[i + 1] = pre[i] + nums[i];\n            ans += mp[pre[i + 1] - k];\n            mp[pre[i + 1]]++;\n        }\n        return ans;\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"239-滑动窗口最大值",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#239-滑动窗口最大值",children:"#"}),"239. 滑动窗口最大值"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-10",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-10",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给你一个整数数组 \xa0",(0,i.jsx)(e.code,{children:"nums"}),"，有一个大小为 \xa0",(0,i.jsx)(e.code,{children:"k"}),"\xa0 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 \xa0",(0,i.jsx)(e.code,{children:"k"}),"\xa0 个数字。滑动窗口每次只向右移动一位。"]}),"\n",(0,i.jsxs)(e.p,{children:["返回 \xa0",(0,i.jsx)(e.em,{children:"滑动窗口中的最大值"}),"\xa0。"]}),"\n",(0,i.jsxs)(e.h3,{id:"代码-10",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-10",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"vector<int> maxSlidingWindow(vector<int> &nums, int k) {\n  deque<int> q;\n  int n = nums.size();\n  for (int i = 0; i < k; i++) {\n    while (!q.empty() && nums[q.back()] < nums[i]) {\n      q.pop_back();\n    }\n    q.push_back(i);\n  }\n  vector<int> ans = {nums[q.front()]};\n  for (int i = k; i < n; i++) {\n    while (!q.empty() && q.front() <= i - k) {\n      q.pop_front();\n    }\n    while (!q.empty() && nums[q.back()] < nums[i]) {\n      q.pop_back();\n    }\n    q.push_back(i);\n    ans.push_back(nums[q.front()]);\n  }\n\n  return ans;\n}\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"76-最小覆盖子串",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#76-最小覆盖子串",children:"#"}),"76. 最小覆盖子串"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-11",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-11",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给你一个字符串 \xa0",(0,i.jsx)(e.code,{children:"s"}),"\xa0、一个字符串 \xa0",(0,i.jsx)(e.code,{children:"t"}),"\xa0。返回 \xa0",(0,i.jsx)(e.code,{children:"s"}),"\xa0 中涵盖 \xa0",(0,i.jsx)(e.code,{children:"t"}),"\xa0 所有字符的最小子串。如果 \xa0",(0,i.jsx)(e.code,{children:"s"}),"\xa0 中不存在涵盖 \xa0",(0,i.jsx)(e.code,{children:"t"}),"\xa0 所有字符的子串，则返回空字符串 \xa0",(0,i.jsx)(e.code,{children:'""'}),"\xa0。"]}),"\n",(0,i.jsxs)(e.h3,{id:"代码-11",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-11",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    string minWindow(string s, string t) {\n        int n = s.size(), m = t.size();\n        if (n < m) {\n            return \"\";\n        }\n        vector<int> mc(128, 0), cur(128, 0);\n        for (int i = 0; i < m; i++) {\n            mc[t[i]]++, cur[s[i]]++;\n        }\n\n        int tot = 0;\n\n        for (char c = 'A'; c <= 'Z'; c++) {\n            if (mc[c] <= cur[c]) {\n                tot++;\n            }\n        }\n        for (char c = 'a'; c <= 'z'; c++) {\n            if (mc[c] <= cur[c]) {\n                tot++;\n            }\n        }\n\n        int L = 0, R = 0;\n        string ans = \"\";\n        int l = 0, r = m;\n        if (tot == 52) {\n            if (R == 0 || r - l < R - L) {\n                L = l, R = r;\n            }\n        }\n        while (r < n) {\n            while (tot != 52 && r < n) {\n                tot -= cur[s[r]] >= mc[s[r]];\n                cur[s[r]]++;\n                tot += cur[s[r]] >= mc[s[r]];\n                r++;\n            }\n            while (l < r && mc[s[l]] < cur[s[l]]) {\n                tot -= cur[s[l]] >= mc[s[l]];\n                cur[s[l]]--;\n                tot += cur[s[l]] >= mc[s[l]];\n                l++;\n            }\n            if (tot == 52) {\n                if (R == 0 || r - l < R - L) {\n                    L = l, R = r;\n                }\n            }\n            tot -= cur[s[l]] >= mc[s[l]];\n            cur[s[l]]--;\n            tot += cur[s[l]] >= mc[s[l]];\n            l++;\n            while (l < r && mc[s[l]] == 0) {\n                tot -= cur[s[l]] >= mc[s[l]];\n                cur[s[l]]--;\n                tot += cur[s[l]] >= mc[s[l]];\n                l++;\n            }\n        }\n\n        return s.substr(L, R - L);\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h1,{id:"普通数组55",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#普通数组55",children:"#"}),"普通数组(5/5)"]}),"\n",(0,i.jsxs)(e.h2,{id:"53-最大子数组和",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#53-最大子数组和",children:"#"}),"53. 最大子数组和"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-12",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-12",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给你一个整数数组 \xa0",(0,i.jsx)(e.code,{children:"nums"}),"\xa0，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"子数组"}),"是数组中的一个连续部分。"]}),"\n",(0,i.jsxs)(e.h3,{id:"代码-12",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-12",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int pre = 0;\n        int mx = nums.front();\n        for (int i : nums) {\n            pre = max(pre + i, i);\n            mx = max(mx, pre);\n        }\n        return mx;\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"56-合并区间",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#56-合并区间",children:"#"}),"56. 合并区间"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-13",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-13",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["以数组 \xa0",(0,i.jsx)(e.code,{children:"intervals"}),"\xa0 表示若干个区间的集合，其中单个区间为 \xa0",(0,i.jsx)(e.code,{children:"intervals[i] = [starti, endi]"}),"\xa0。请你合并所有重叠的区间，并返回 \xa0",(0,i.jsx)(e.em,{children:"一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间"}),"\xa0。"]}),"\n",(0,i.jsxs)(e.h3,{id:"代码-13",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-13",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<vector<int>> merge(vector<vector<int>>& intervals) {\n        sort(intervals.begin(), intervals.end());\n        vector<vector<int>> v;\n        int l = -1, r = -1;\n        for (auto& a : intervals) {\n            if (l == -1) {\n                l = a[0], r = a[1];\n                continue;\n            }\n            if (a[0] > r) {\n                v.push_back({l, r});\n                l = a[0];\n            }\n            r = max(r, a[1]);\n        }\n        v.push_back({l, r});\n        return v;\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"57-轮转数组",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#57-轮转数组",children:"#"}),"57. 轮转数组"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-14",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-14",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给定一个整数数组 \xa0",(0,i.jsx)(e.code,{children:"nums"}),"，将数组中的元素向右轮转 \xa0",(0,i.jsx)(e.code,{children:"k"}),"\xa0 个位置，其中 \xa0",(0,i.jsx)(e.code,{children:"k"}),"\xa0 是非负数。"]}),"\n",(0,i.jsxs)(e.h3,{id:"代码-14",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-14",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        int n = nums.size();\n        k %= n;\n        reverse(nums.begin(), nums.end());\n        reverse(nums.begin(), nums.begin() + k);\n        reverse(nums.begin() + k, nums.end());\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"58-除自身以外数组的乘积",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#58-除自身以外数组的乘积",children:"#"}),"58. 除自身以外数组的乘积"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-15",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-15",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给你一个整数数组 \xa0",(0,i.jsx)(e.code,{children:"nums"}),"，返回 数组 \xa0",(0,i.jsx)(e.code,{children:"answer"}),"\xa0，其中 \xa0",(0,i.jsx)(e.code,{children:"answer[i]"}),"\xa0 等于 \xa0",(0,i.jsx)(e.code,{children:"nums"}),"\xa0 中除 \xa0",(0,i.jsx)(e.code,{children:"nums[i]"}),"\xa0 之外其余各元素的乘积 \xa0。"]}),"\n",(0,i.jsxs)(e.p,{children:["题目数据 \xa0",(0,i.jsx)(e.strong,{children:"保证"}),"\xa0 数组 \xa0",(0,i.jsx)(e.code,{children:"nums"}),"之中任意元素的全部前缀元素和后缀的乘积都在 \xa0\xa0",(0,i.jsx)(e.strong,{children:"32 位"}),"\xa0 整数范围内。"]}),"\n",(0,i.jsxs)(e.p,{children:["请 \xa0",(0,i.jsx)(e.strong,{children:"不要使用除法，"})," 且在 \xa0",(0,i.jsx)(e.code,{children:"O(n)"}),"\xa0 时间复杂度内完成此题。"]}),"\n",(0,i.jsxs)(e.h3,{id:"代码-15",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-15",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> productExceptSelf(vector<int>& nums) {\n        int n = nums.size();\n        vector<int> pre(n, 1), suf(n, 1);\n        pre[0] = nums[0], suf[n - 1] = nums[n - 1];\n        for (int i = 1; i < n; i++) {\n            pre[i] = pre[i - 1] * nums[i];\n            suf[n - i - 1] = suf[n - i] * nums[n - i - 1];\n        }\n        vector<int> arr;\n        for (int i = 0; i < n; i++) {\n            if (i - 1 >= 0 && i + 1 <= n - 1)\n                arr.push_back(pre[i - 1] * suf[i + 1]);\n            else if (i == 0)\n                arr.push_back(suf[1]);\n            else\n                arr.push_back(pre[n - 2]);\n        }\n        return arr;\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"59-缺失的第一个正数",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#59-缺失的第一个正数",children:"#"}),"59. 缺失的第一个正数"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-16",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-16",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给你一个未排序的整数数组 \xa0",(0,i.jsx)(e.code,{children:"nums"}),"\xa0，请你找出其中没有出现的最小的正整数。"]}),"\n",(0,i.jsxs)(e.p,{children:["请你实现时间复杂度为 \xa0",(0,i.jsx)(e.code,{children:"O(n)"}),"\xa0 并且只使用常数级别额外空间的解决方案。"]}),"\n",(0,i.jsxs)(e.h3,{id:"代码-16",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-16",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    int firstMissingPositive(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            if (nums[i] <= 0)\n                continue;\n            while (nums[i] <= n && nums[i] - 1 >= 0 &&\n                   nums[nums[i] - 1] != nums[i]) {\n                swap(nums[i], nums[nums[i] - 1]);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (nums[i] != i + 1)\n                return i + 1;\n        }\n        return n + 1;\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h1,{id:"矩阵24",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#矩阵24",children:"#"}),"矩阵(2/4)"]}),"\n",(0,i.jsxs)(e.h2,{id:"73-矩阵置零",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#73-矩阵置零",children:"#"}),"73. 矩阵置零"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-17",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-17",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给定一个 \xa0",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"m"}),(0,i.jsx)(e.mo,{children:"\xd7"}),(0,i.jsx)(e.mi,{children:"n"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"m \\times n"})]})})}),(0,i.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"m"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(e.span,{className:"mbin",children:"\xd7"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.4306em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"n"})]})]})]}),"\xa0 的矩阵，如果一个元素为 \xa0",(0,i.jsx)(e.strong,{children:"0"}),"\xa0，则将其所在行和列的所有元素都设为 \xa0",(0,i.jsx)(e.strong,{children:"0"}),"\xa0。请使用 \xa0",(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.a,{href:"http://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95",rel:"noopener noreferrer",target:"_blank",children:"原地"})}),"\xa0 算法。"]}),"\n",(0,i.jsxs)(e.h3,{id:"代码-17",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-17",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    void setZeroes(vector<vector<int>>& matrix) {\n        int n = matrix.size();\n        if (!n)\n            return;\n        int m = matrix[0].size();\n        vector<bool> row(n), col(m);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (matrix[i][j] == 0) {\n                    row[i] = col[j] = true;\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (row[i] || col[j])\n                    matrix[i][j] = 0;\n            }\n        }\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"54-螺旋矩阵",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#54-螺旋矩阵",children:"#"}),"54. 螺旋矩阵"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-18",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-18",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给你一个 \xa0",(0,i.jsx)(e.code,{children:"m"}),"\xa0 行 \xa0",(0,i.jsx)(e.code,{children:"n"}),"\xa0 列的矩阵 \xa0",(0,i.jsx)(e.code,{children:"matrix"}),"\xa0，请按照 \xa0",(0,i.jsx)(e.strong,{children:"顺时针螺旋顺序"}),"\xa0，返回矩阵中的所有元素。"]}),"\n",(0,i.jsxs)(e.h3,{id:"代码-18",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#代码-18",children:"#"}),"代码"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"class Solution {\npublic:\n    vector<int> spiralOrder(vector<vector<int>>& matrix) {\n        int n = matrix.size();\n        if (!n)\n            return {};\n        if (n == 1)\n            return matrix[0];\n        int m = matrix[0].size();\n        if (m == 1) {\n            vector<int> v;\n            for (int i = 0; i < n; i++)\n                v.emplace_back(matrix[i][0]);\n            return v;\n        }\n        int x = 0, y = 0, k = 0;\n        vector<pair<int, int>> dxy = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        vector<int> v = {matrix[x][y]};\n        matrix[x][y] = -101;\n        while (v.size() < n * m) {\n            int px = x + dxy[k].first, py = y + dxy[k].second;\n            if (px < 0 || px >= n || py < 0 || py >= m ||\n                matrix[px][py] == -101) {\n                k = (k + 1) % 4;\n                px = x + dxy[k].first, py = y + dxy[k].second;\n            }\n            v.push_back(matrix[px][py]);\n            matrix[px][py] = -101;\n            x = px, y = py;\n        }\n\n        return v;\n    }\n};\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"48-旋转图像",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#48-旋转图像",children:"#"}),"48. 旋转图像"]}),"\n",(0,i.jsxs)(e.h3,{id:"题意-19",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#题意-19",children:"#"}),"题意"]}),"\n",(0,i.jsxs)(e.p,{children:["给定一个 \xa0",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{children:"n"}),(0,i.jsx)(e.mo,{children:"\xd7"}),(0,i.jsx)(e.mi,{children:"n"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"n\\times n"})]})})}),(0,i.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.jsx)(e.span,{className:"mbin",children:"\xd7"}),(0,i.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"0.4306em"}}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"n"})]})]})]})," 的二维矩阵 \xa0",(0,i.jsx)(e.code,{children:"matrix"}),"\xa0 表示一个图像。请你将图像顺时针旋转 90 度。"]}),"\n",(0,i.jsxs)(e.p,{children:["你必须在 \xa0",(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.a,{href:"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95",rel:"noopener noreferrer",target:"_blank",children:"原地"})}),"\xa0 旋转图像，这意味着你需要直接修改输入的二维矩阵。",(0,i.jsx)(e.strong,{children:"请不要"}),"\xa0 使用另一个矩阵来旋转图像。"]}),"\n",(0,i.jsxs)(e.h2,{id:"240-搜索二维矩阵-ii",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#240-搜索二维矩阵-ii",children:"#"}),"240. 搜索二维矩阵 II"]})]})}function h(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(d,n)})):d(n)}let c=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["posts%2Falgorithm%2Flchot100.md"]={toc:[{id:"1-两数之和",text:"1. 两数之和",depth:2},{id:"题意",text:"题意",depth:3},{id:"代码",text:"代码",depth:3},{id:"49-字母异位词分组",text:"49. 字母异位词分组",depth:2},{id:"题意-1",text:"题意",depth:3},{id:"代码-1",text:"代码",depth:3},{id:"128-最长连续序列",text:"128. 最长连续序列",depth:2},{id:"题意-2",text:"题意",depth:3},{id:"代码-2",text:"代码",depth:3},{id:"283-移动零",text:"283. 移动零",depth:2},{id:"题意-3",text:"题意",depth:3},{id:"代码-3",text:"代码",depth:3},{id:"11-盛最多水的容器",text:"11. 盛最多水的容器",depth:2},{id:"题意-4",text:"题意",depth:3},{id:"代码-4",text:"代码",depth:3},{id:"15-三数之和",text:"15. 三数之和",depth:2},{id:"题意-5",text:"题意",depth:3},{id:"代码-5",text:"代码",depth:3},{id:"42-接雨水",text:"42. 接雨水",depth:2},{id:"题意-6",text:"题意",depth:3},{id:"代码-6",text:"代码",depth:3},{id:"3-无重复字符的最长子串",text:"3. 无重复字符的最长子串",depth:2},{id:"题意-7",text:"题意",depth:3},{id:"代码-7",text:"代码",depth:3},{id:"438-找到字符串中所有字母异位词",text:"438. 找到字符串中所有字母异位词",depth:2},{id:"题意-8",text:"题意",depth:3},{id:"代码-8",text:"代码",depth:3},{id:"560-和为-k-的子数组",text:"560. 和为 K 的子数组",depth:2},{id:"题意-9",text:"题意",depth:3},{id:"代码-9",text:"代码",depth:3},{id:"239-滑动窗口最大值",text:"239. 滑动窗口最大值",depth:2},{id:"题意-10",text:"题意",depth:3},{id:"代码-10",text:"代码",depth:3},{id:"76-最小覆盖子串",text:"76. 最小覆盖子串",depth:2},{id:"题意-11",text:"题意",depth:3},{id:"代码-11",text:"代码",depth:3},{id:"53-最大子数组和",text:"53. 最大子数组和",depth:2},{id:"题意-12",text:"题意",depth:3},{id:"代码-12",text:"代码",depth:3},{id:"56-合并区间",text:"56. 合并区间",depth:2},{id:"题意-13",text:"题意",depth:3},{id:"代码-13",text:"代码",depth:3},{id:"57-轮转数组",text:"57. 轮转数组",depth:2},{id:"题意-14",text:"题意",depth:3},{id:"代码-14",text:"代码",depth:3},{id:"58-除自身以外数组的乘积",text:"58. 除自身以外数组的乘积",depth:2},{id:"题意-15",text:"题意",depth:3},{id:"代码-15",text:"代码",depth:3},{id:"59-缺失的第一个正数",text:"59. 缺失的第一个正数",depth:2},{id:"题意-16",text:"题意",depth:3},{id:"代码-16",text:"代码",depth:3},{id:"73-矩阵置零",text:"73. 矩阵置零",depth:2},{id:"题意-17",text:"题意",depth:3},{id:"代码-17",text:"代码",depth:3},{id:"54-螺旋矩阵",text:"54. 螺旋矩阵",depth:2},{id:"题意-18",text:"题意",depth:3},{id:"代码-18",text:"代码",depth:3},{id:"48-旋转图像",text:"48. 旋转图像",depth:2},{id:"题意-19",text:"题意",depth:3},{id:"240-搜索二维矩阵-ii",text:"240. 搜索二维矩阵 II",depth:2}],title:"LeetCode Hot 100记录（19/100）",headingTitle:"哈希(3/3)",frontmatter:{title:"LeetCode Hot 100记录（19/100）",subtitle:"",date:"2025-03-13T06:13:22.000Z",lastmod:"2025-03-13T06:13:22.000Z",draft:!1,authors:null,description:null,tags:["算法","LeetCode"],categories:["在学算法的日子里"],series:["题解记录"],hiddenFromHomePage:!1,hiddenFromSearch:!1,featuredImage:"https://img.dodolalorc.cn/i/2025/03/03/67c55994b7733.jpg",featuredImagePreview:"https://img.dodolalorc.cn/i/2025/03/03/67c55994b7733.jpg",toc:{enable:!0},math:{enable:!0},lightgallery:!1,license:""}}},5523:function(n,e,r){r.d(e,{Z:()=>c});var i=r(2676),s=r(5271),a=r(2815);r(7995);let d={"zh-CN":n=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${n.minutes>=1?`${Math.ceil(n.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":n=>`Estimated reading time: ${n.minutes>=1?`${Math.ceil(n.minutes)} minutes`:"less than 1 minute"}`};function h(n,e,r){let i=Object.keys(d).includes(e)?e:r;return d[i](n)}let c=n=>{let{defaultLocale:e="en-US"}=n,r=(0,a.Vi)().page.readingTimeData,d=(0,a.Jr)(),c=(0,a.e7)(),[t,l]=(0,s.useState)(h(r,d,e));return(0,s.useEffect)(()=>{l(h(r,d,e))},[d,r]),(0,i.jsx)("span",{"data-dark":String(c),className:"rp-reading-time",children:t})}}}]);