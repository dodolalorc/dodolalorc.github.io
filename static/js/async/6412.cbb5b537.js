"use strict";(self.webpackChunkblogsite_rspress=self.webpackChunkblogsite_rspress||[]).push([["6412"],{2751:function(e,n,r){r.r(n),r.d(n,{default:()=>c});var s=r(2676),t=r(453),i=r(5523);function o(e){let n=Object.assign({p:"p",a:"a",h2:"h2",code:"code",pre:"pre",h3:"h3",img:"img"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["初始化环境可以阅读",(0,s.jsx)(n.a,{href:"/posts/build_electron/index.html",children:"这篇"}),"。"]}),"\n",(0,s.jsx)(n.p,{children:"上接之前的构建过程，经过第一次构建之后，后续修改源码添加 api 等都不会再构建那么久了。"}),"\n",(0,s.jsxs)(n.h2,{id:"添加简单的-api",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#添加简单的-api",children:"#"}),"添加简单的 API"]}),"\n",(0,s.jsx)(i.Z,{defaultLocale:"zh-CN"}),"\n",(0,s.jsxs)(n.p,{children:["当前目录在构建时相同的目录下，其下包含",(0,s.jsx)(n.code,{children:"src"}),"、",(0,s.jsx)(n.code,{children:".gclient"}),"、",(0,s.jsx)(n.code,{children:"node_modules"}),"等。"]}),"\n",(0,s.jsxs)(n.p,{children:["找到",(0,s.jsx)(n.code,{children:"src/electron"}),"目录，在",(0,s.jsx)(n.code,{children:"lib/browser/api/app.ts"}),"添加："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"app.getElectronVersion = () => { // This is for test\n  return 'dodola test demo' + process.versions.electron;\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["再到",(0,s.jsx)(n.code,{children:"electron.d.ts"}),"中更新添加："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"declare namespace Electron {\n  const NodeEventEmitter: typeof import('events').EventEmitter;\n\n  type Accelerator = string;\n  type Event<Params extends object = {}> = {\n    preventDefault: () => void;\n    readonly defaultPrevented: boolean;\n  } & Params;\n\n  interface App extends NodeJS.EventEmitter {\n    getElectronVersion(): string; // This is for test\n...\n"})}),"\n",(0,s.jsx)(n.p,{children:"然后在命令行重新构建一遍："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'e build\nINFO Auto-updates disabled - skipping update check\nRunning "autoninja.bat -j 200 electron" in D:\\playground\\Projects\\electron-coins\\electron\\src\\out\\Testing\nProxy started successfully.\n[4/4] LINK electron.exe electron.exe.pdb\nRBE Stats: down 0 B, up 0 B, 1 local fallback\n'})}),"\n",(0,s.jsx)(n.p,{children:"这样就准备好了测试用的自定义 electron 啦"}),"\n",(0,s.jsxs)(n.h2,{id:"测试-demo",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#测试-demo",children:"#"}),"测试 demo"]}),"\n",(0,s.jsxs)(n.p,{children:["找到一个测试用的小 electron demo，可以参考",(0,s.jsx)(n.a,{href:"https://www.electronjs.org/zh/docs/latest/tutorial/tutorial-first-app",rel:"noopener noreferrer",target:"_blank",children:"Electron 教程"}),"。"]}),"\n",(0,s.jsxs)(n.h3,{id:"修改启动命令",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#修改启动命令",children:"#"}),"修改启动命令"]}),"\n",(0,s.jsxs)(n.p,{children:["在",(0,s.jsx)(n.code,{children:"package.json"}),"中修改启动脚本",(0,s.jsx)(n.code,{children:"start"}),"的部分，原来是",(0,s.jsx)(n.code,{children:"electron ."}),"启动，将",(0,s.jsx)(n.code,{children:"electron"}),"改为构建的",(0,s.jsx)(n.code,{children:"electron.exe"}),"路径："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "name": "electron-demo",\n  "version": "1.0.0",\n  "main": "main.js",\n  "scripts": {\n    "start": "chcp 65001 &&  ..\\\\electron\\\\src\\\\out\\\\Testing\\\\electron.exe .",\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "author": "dodola",\n  "license": "MIT",\n  "devDependencies": {\n    "electron": "^35.2.0"\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:['{{< admonition type=info title="不重要的小说明" open=false >}}\n',(0,s.jsx)(n.code,{children:"chcp 65001"}),"只是为了在命令行中能够正常显示中文字符用的\n{{< /admonition >}}"]}),"\n",(0,s.jsxs)(n.h3,{id:"调用-api",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#调用-api",children:"#"}),"调用 Api"]}),"\n",(0,s.jsxs)(n.p,{children:["在",(0,s.jsx)(n.code,{children:"main.js"}),"中添加 console.log 语句："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"console.log(`Custom Electron version: ${app.getElectronVersion()}`)\n"})}),"\n",(0,s.jsx)(n.p,{children:"之后正常启动测试的项目即可："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npm start\n"})}),"\n",(0,s.jsx)(n.p,{children:"可以看到命令行对应的输出："}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://img.dodolalorc.cn/i/2025/04/27/680df4e196674.png",alt:"image.png"})}),"\n",(0,s.jsxs)(n.h2,{id:"小-demo-的代码",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#小-demo-的代码",children:"#"}),"小 demo 的代码"]}),"\n",(0,s.jsxs)(n.h3,{id:"mainjs",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#mainjs",children:"#"}),(0,s.jsx)(n.code,{children:"main.js"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const { app, BrowserWindow, ipcMain } = require('electron/main')\nconst path = require('node:path')\nconst { dialog } = require('electron/main')\n\nlet mainWindow;\nconst createWindow = () => {\n  mainWindow = new BrowserWindow({\n    width: 1000,\n    height: 800,\n    title: 'Just a little demo',\n    icon: path.join(__dirname, 'icon.png'),\n    webPreferences: {\n      contextIsolation: true,\n      preload: path.join(__dirname, 'preload.js')\n    }\n  })\n  mainWindow.setMenu(null)\n  mainWindow.loadFile('index.html')\n\n  let wc = mainWindow.webContents;\n\n  // wc.openDevTools();\n\n  wc.on('dom-ready', (e) => {\n    dialog.showMessageBox(options = {\n      title: 'Hello',\n      message: 'This is a message box',\n    }).then((result) => {\n      console.log(result);\n    });\n  });\n}\n\n\napp.whenReady().then(() => {\n  ipcMain.handle('ping', () => 'pong');\n\n  createWindow();\n  mainWindow.maximize();\n\n  app.on('activate', () => {\n    if (BrowserWindow.getAllWindows().length === 0) createWindow()\n  })\n})\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit()\n});\n\nconsole.log(`Custom Electron version: ${app.getElectronVersion()}`)\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"preloadjs",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#preloadjs",children:"#"}),(0,s.jsx)(n.code,{children:"preload.js"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const { contextBridge, ipcRenderer } = require('electron/renderer')\n\ncontextBridge.exposeInMainWorld('versions', {\n  node: () => process.versions.node,\n  chrome: () => process.versions.chrome,\n  electron: () => process.versions.electron,\n  ping: () => ipcRenderer.invoke('ping')\n})\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"rendererjs",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rendererjs",children:"#"}),(0,s.jsx)(n.code,{children:"renderer.js"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const information = document.getElementById('info')\ninformation.innerText = `This app is using Chrome (v${window.versions.chrome()}), Node.js (v${window.versions.node()}), and Electron (v${window.versions.electron()})`;\n\nconst pingButton = document.getElementById('ping');\nconst pingMsg = document.getElementById('ping-msg');\npingButton.addEventListener('click', () => {\n  window.versions.ping().then((response) => {\n    console.log(response) // prints out 'pong'\n    pingMsg.innerText = response\n  })\n})\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"indexhtml",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#indexhtml",children:"#"}),(0,s.jsx)(n.code,{children:"index.html"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset="UTF-8" />\n  <meta http-equiv="Content-Security-Policy" content="default-src \'self\'; script-src \'self\'" />\n  <meta http-equiv="X-Content-Security-Policy" content="default-src \'self\'; script-src \'self\'" />\n</head>\n\n<body>\n  <h1>Hello from Electron renderer!</h1>\n  <p>\uD83D\uDC4B</p>\n  <p id="info"></p>\n  <button id="ping">ping</button>\n  <p>Message from ping is: <span id="ping-msg"></span></p>\n</body>\n<script src="./renderer.js"><\/script>\n\n</html>\n'})})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(o,e)})):o(e)}let c=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["posts%2Felectronjs%2Fcustom_electron_demo.md"]={toc:[{id:"添加简单的-api",text:"添加简单的 API",depth:2},{id:"测试-demo",text:"测试 demo",depth:2},{id:"修改启动命令",text:"修改启动命令",depth:3},{id:"调用-api",text:"调用 Api",depth:3},{id:"小-demo-的代码",text:"小 demo 的代码",depth:2},{id:"mainjs",text:"`main.js`",depth:3},{id:"preloadjs",text:"`preload.js`",depth:3},{id:"rendererjs",text:"`renderer.js`",depth:3},{id:"indexhtml",text:"`index.html`",depth:3}],title:"自定义Electron.exe的使用",headingTitle:"",frontmatter:{title:"自定义Electron.exe的使用",subtitle:"",date:"2025-04-27T08:51:01.000Z",lastmod:"2025-04-27T08:51:01.000Z",draft:!1,authors:null,description:"只是一个本地测试的小流程记录",tags:["前端","Electron","Chromium"],categories:["在前端搬砖的日子里"],series:["Electron学习笔记"],hiddenFromHomePage:!1,hiddenFromSearch:!1,featuredImage:"https://img.dodolalorc.cn/i/2025/04/26/680c601796399.png",featuredImagePreview:"https://img.dodolalorc.cn/i/2025/04/26/680c601796399.png",toc:{enable:!0},math:{enable:!0},lightgallery:!1,license:""}}},5523:function(e,n,r){r.d(n,{Z:()=>c});var s=r(2676),t=r(5271),i=r(2815);r(7995);let o={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function d(e,n,r){let s=Object.keys(o).includes(n)?n:r;return o[s](e)}let c=e=>{let{defaultLocale:n="en-US"}=e,r=(0,i.Vi)().page.readingTimeData,o=(0,i.Jr)(),c=(0,i.e7)(),[a,l]=(0,t.useState)(d(r,o,n));return(0,t.useEffect)(()=>{l(d(r,o,n))},[o,r]),(0,s.jsx)("span",{"data-dark":String(c),className:"rp-reading-time",children:a})}}}]);