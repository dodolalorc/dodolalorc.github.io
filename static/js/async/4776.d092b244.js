"use strict";(self.webpackChunkblogsite_rspress=self.webpackChunkblogsite_rspress||[]).push([["4776"],{5421:function(n,e,i){i.r(e),i.d(e,{default:()=>v});var d=i(2676),t=i(453),r=i(7622),s=i(3208);function c(n){let e=Object.assign({h3:"h3",a:"a",p:"p",code:"code",pre:"pre",h4:"h4",ul:"ul",li:"li",del:"del",h5:"h5"},(0,t.ah)(),n.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(e.h3,{id:"11图的定义",children:[(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#11图的定义",children:"#"}),"1.1图的定义"]}),"\n",(0,d.jsx)(s.Z,{defaultLocale:"zh-CN"}),"\n",(0,d.jsx)(e.p,{children:"上课讲过一大堆这里不再赘述，直接学习代码实现。"}),"\n",(0,d.jsxs)(e.h3,{id:"12图的存储",children:[(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#12图的存储",children:"#"}),"1.2图的存储"]}),"\n",(0,d.jsx)(e.p,{children:"例图展示："}),"\n",(0,d.jsx)(r.Z,Object.assign({code:"graph LR\nv1((v1))--4--\x3ev2((v2))\nv1((v1))--9--\x3ev6((v6))\nv3((v3))--19--\x3ev2((v2))\nv3((v3))--22--\x3ev1((v1))\nv4((v4))--17--\x3ev3((v3))\nv5((v5))--29--\x3ev8((v8))\nv6((v6))--12--\x3ev1((v1))\nv6((v6))--9--\x3ev5((v5))\nv6((v6))--4--\x3ev7((v7))\nv7((v7))--25--\x3ev4((v4))\nv8((v8))--7--\x3ev7((v7))\nv8((v8))--11--\x3ev3((v3))"},{config:{theme:"forest"}})),"\n",(0,d.jsx)(e.p,{children:(0,d.jsx)(e.code,{children:"设n个点，m条边"})}),"\n",(0,d.jsx)(e.p,{children:"上图的数据（按照 起点-终点-权值）："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-plaintext",children:"8 12\n5 8 29\n6 1 12\n8 3 11\n1 2 4\n3 1 22\n4 3 17\n7 4 25\n6 5 9\n8 7 7\n1 6 9\n3 2 19\n6 7 4\n"})}),"\n",(0,d.jsxs)(e.h4,{id:"邻接矩阵",children:[(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#邻接矩阵",children:"#"}),"邻接矩阵"]}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsxs)(e.li,{children:["遍历效率低、不能存重边、初始化效率低",(0,d.jsx)(e.code,{children:"初始化O(n^2)时间，建图O(m)时间"}),"、空间开销大",(0,d.jsx)(e.code,{children:"O(n^2)"})]}),"\n",(0,d.jsx)(e.li,{children:"对于稀疏图来说大部分是INF，空间利用效率也不高"}),"\n"]}),"\n",(0,d.jsxs)(e.h4,{id:"前向星",children:[(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#前向星",children:"#"}),"前向星"]}),"\n",(0,d.jsxs)(e.p,{children:["前向星涉及排序，所以其时间复杂度和排序算法有关，一般情况下时间复杂度为",(0,d.jsx)(e.code,{children:"O(mlog m)"}),"，空间上需要两个数组（记录边的边数组、记录各点在边数组中起始位置的head数组），空间复杂度为",(0,d.jsx)(e.code,{children:"O(m+n)"})]}),"\n",(0,d.jsx)(e.p,{children:"优点：在点特别多时可以存储重边"}),"\n",(0,d.jsx)(e.p,{children:"缺点：不能直接判断任意两个点之间是否有边。排序和初始化数组费时间。"}),"\n",(0,d.jsx)(e.p,{children:"需要的数据结构如下："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-cpp",children:"int head[maxn];\nstruct NODE{\n    int from;	// 起点\n    int to;		// 终点\n    int w;		// 权值\n};\nNODE edge[maxm];\n"})}),"\n",(0,d.jsxs)(e.p,{children:["NODE用来存储每条边的信息，边按照输入读取后再排序，排序之后使用",(0,d.jsx)(e.code,{children:"head[maxn]"}),"来储存各个点的在",(0,d.jsx)(e.code,{children:"edge[maxm]"}),"里的起始位置。"]}),"\n",(0,d.jsx)(e.p,{children:"排序方式："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-cpp",children:"bool cmp(NODE a, NODE b){\n    if(a.from==b.from&&a.to==b.to)\n        return a.w<b.w;\n    if(a.from==b.from)\n        return a.to<b.to;\n    return a.from<b.from;\n}\n"})}),"\n",(0,d.jsx)(e.p,{children:"完整代码："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\nusing namespace std;\nconst long long maxn = 1e5 + 50, maxm = 1e7 + 50;\n\n\nstruct NODE {\n	int from, to, w;\n}edge[maxm];\n\nint head[maxn];\n\nbool cmp(NODE a, NODE b) {\n	if (a.from == b.from && a.to == b.to)\n		return a.w < b.w;\n	if (a.from == b.from)\n		return a.to < b.to;\n	return a.from < b.from;\n}\n\nint main() {\n	int n, m;\n	cin >> n >> m;\n	\n	// 读入数据\n	for (int i = 0;i < m;i++)\n		cin >> edge[i].from >> edge[i].to >> edge[i].w;\n	\n	// 排序\n	sort(edge, edge + m, cmp);\n\n	// 初始化head\n	memset(head, -1, sizeof(head));\n\n	// 制成点位数组\n	head[edge[0].from] = 0;	// 初始化\n	// edge数组中起点为点i的在数组里的第一条边在下标head[i]处\n	for (int i = 1;i < m;i++)\n		if (edge[i].from != edge[i - 1].from)\n			// 表明是新的起始点\n			head[edge[i].from] = i;\n\n	// 遍历输出各边信息（按点位输出）\n	for (int i = 1;i <= n;i++) {\n		cout << "以点v" << i << "为起点的边：" << endl;\n		for (int j = head[i];j < m && edge[j].from == i;j++) {\n			cout << "v" << edge[j].from << "--\x3ev" << edge[j].to << " 权值为：" << edge[j].w << " 该边在数组edge中的序号为" << j << endl;\n		}\n		cout << endl;\n	}\n\n	return 0;\n}\n\n// Output：\n/*\n以点v1为起点的边：\nv1--\x3ev2 权值为：4 该边在数组edge中的序号为0\nv1--\x3ev6 权值为：9 该边在数组edge中的序号为1\n\n以点v2为起点的边：\n\n以点v3为起点的边：\nv3--\x3ev1 权值为：22 该边在数组edge中的序号为2\nv3--\x3ev2 权值为：19 该边在数组edge中的序号为3\n\n以点v4为起点的边：\nv4--\x3ev3 权值为：17 该边在数组edge中的序号为4\n\n以点v5为起点的边：\nv5--\x3ev8 权值为：29 该边在数组edge中的序号为5\n\n以点v6为起点的边：\nv6--\x3ev1 权值为：12 该边在数组edge中的序号为6\nv6--\x3ev5 权值为：9 该边在数组edge中的序号为7\nv6--\x3ev7 权值为：4 该边在数组edge中的序号为8\n\n以点v7为起点的边：\nv7--\x3ev4 权值为：25 该边在数组edge中的序号为9\n\n以点v8为起点的边：\nv8--\x3ev3 权值为：11 该边在数组edge中的序号为10\nv8--\x3ev7 权值为：7 该边在数组edge中的序号为11\n\n*/\n'})}),"\n",(0,d.jsxs)(e.h4,{id:"邻接表",children:[(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#邻接表",children:"#"}),"邻接表"]}),"\n",(0,d.jsxs)(e.p,{children:["图的一种链式存储结构，把图G中所有邻接于v",(0,d.jsx)(e.del,{children:"i"}),"的顶点链接成为一个v",(0,d.jsx)(e.del,{children:"i"}),"的单链表。"]}),"\n",(0,d.jsx)(e.p,{children:"三种实现方法："}),"\n",(0,d.jsxs)(e.h5,{id:"1-动态建表",children:[(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1-动态建表",children:"#"}),"1. 动态建表"]}),"\n",(0,d.jsxs)(e.p,{children:["动态建表的时间效率是",(0,d.jsx)(e.code,{children:"O(m)"}),"，空间效率是",(0,d.jsx)(e.code,{children:"O(m)"}),"，主要的时间损耗在于不断地申请新空间，且判断任意两个点之间是否有边相连的效率也低（需要搜索各个点的单链表）(感觉还好？)。"]}),"\n",(0,d.jsx)(e.p,{children:"数据结构："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-cpp",children:"struct EdgeNode {\n	int to;		// 终点\n	int w;		// 权值\n	EdgeNode* next;		// 下一边的指针\n};\n\nstruct VNode {\n	int from;	// 起点（这个数据结构中from没有传值，我们以遍历Adjlist时的遍历时序用于指定起点）\n	EdgeNode* first;	// 邻接表的头指针\n};\n"})}),"\n",(0,d.jsx)(e.p,{children:"完整代码："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\nusing namespace std;\nconst long long maxn = 1e5 + 50, maxm = 1e7 + 50;\n\nstruct EdgeNode {\n	int to;		// 终点\n	int w;		// 权值\n	EdgeNode* next;		// 下一边的指针\n};\n\nstruct VNode {\n	int from;	// 起点（这个数据结构中from没有传值，我们以遍历Adjlist时的遍历时序用于指定起点）\n	EdgeNode* first;	// 邻接表的头指针\n};\n\nVNode Adjlist[maxn];	// 全图\n\nint main() {\n	int n, m;\n	cin >> n >> m;\n	\n	// 读入数据\n	for (int i = 0;i < m;i++) {\n		int fi, ti, wi;\n		cin >> fi >> ti >> wi;\n		// 创建一个新的边结构数据\n		EdgeNode* p = new EdgeNode();\n		// 给该数据传值\n		p->to = ti;\n		p->w = wi;\n        \n		// 该新边的next指针指向上一个链接到起点为fi的单链表中的起点\n        /*\n        （相当于在前面插入，这点可以观察遍历输出部分发现，比如先读入的v1--\x3ev2后读入的v1--\x3ev6，但在储存时我们将后来的v1--\x3ev6插入在了v1--\x3ev2前面）\n        */\n		p->next = Adjlist[fi].first;\n\n		// 将起点为fi的单链表的指针更新为这个新传入边的地址\n		Adjlist[fi].first = p;\n	}\n\n	// 遍历\n	for (int i = 1;i <= n;i++) {\n		cout << "点v" << i << "为起点的边：" << endl;\n		int ind = 0;\n		for (EdgeNode* k = Adjlist[i].first;k != NULL;k = k->next) {\n			// 指针遍历该链表至结束\n			cout << "v" << i << " --\x3ev" << k->to << " 权值为：" << k->w << " 该边记录在点v" << i << "的单链表的第" << ind++ << "个" << endl;\n		}\n		cout << "点v" << i << "为的度数为：" << ind << endl;\n		cout << endl;\n	}\n\n	return 0;\n}\n\n// Output:\n/*\n点v1为起点的边：\nv1 --\x3ev6 权值为：9 该边记录在点v1的单链表的第0个\nv1 --\x3ev2 权值为：4 该边记录在点v1的单链表的第1个\n点v1为的度数为：2\n\n点v2为起点的边：\n点v2为的度数为：0\n\n点v3为起点的边：\nv3 --\x3ev2 权值为：19 该边记录在点v3的单链表的第0个\nv3 --\x3ev1 权值为：22 该边记录在点v3的单链表的第1个\n点v3为的度数为：2\n\n点v4为起点的边：\nv4 --\x3ev3 权值为：17 该边记录在点v4的单链表的第0个\n点v4为的度数为：1\n\n点v5为起点的边：\nv5 --\x3ev8 权值为：29 该边记录在点v5的单链表的第0个\n点v5为的度数为：1\n\n点v6为起点的边：\nv6 --\x3ev7 权值为：4 该边记录在点v6的单链表的第0个\nv6 --\x3ev5 权值为：9 该边记录在点v6的单链表的第1个\nv6 --\x3ev1 权值为：12 该边记录在点v6的单链表的第2个\n点v6为的度数为：3\n\n点v7为起点的边：\nv7 --\x3ev4 权值为：25 该边记录在点v7的单链表的第0个\n点v7为的度数为：1\n\n点v8为起点的边：\nv8 --\x3ev7 权值为：7 该边记录在点v8的单链表的第0个\nv8 --\x3ev3 权值为：11 该边记录在点v8的单链表的第1个\n点v8为的度数为：2\n*/\n'})}),"\n",(0,d.jsxs)(e.p,{children:["注意到，无向图中各点的度正好是各点的单链表中链节的个数，也就是上述代码中",(0,d.jsx)(e.code,{children:"ind"}),"最后的结果值，而之余有向图，",(0,d.jsx)(e.code,{children:"ind"}),"就是对应顶点的出度。"]}),"\n",(0,d.jsxs)(e.p,{children:["若要求得入度则必须遍历整个邻接表或者建立一个逆链接表（以v",(0,d.jsx)(e.del,{children:"i"}),"边为终边的链接表）。"]}),"\n",(0,d.jsx)(e.p,{children:"注意：一个图 的邻接表不是唯一的，其具体的邻接次序与边的输入次序有关。"}),"\n",(0,d.jsxs)(e.h5,{id:"2-vector模拟链表实现",children:[(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2-vector模拟链表实现",children:"#"}),"2. vector模拟链表实现"]}),"\n",(0,d.jsx)(e.p,{children:"vector模拟链表的实现方式与前一种区别不大（前插入和后插入的区别？反正基本没有质变）"}),"\n",(0,d.jsx)(e.p,{children:"不过这种方式代码量少，不容易出错，也不用指针指来指去。也不需要我们来考虑内存的申请和释放。比较友好（qwq）"}),"\n",(0,d.jsx)(e.p,{children:"需要数据结构："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-cpp",children:"struct EdgeNode {\n	int to;		// 终点\n	int w;		// 权值\n};\nvector<EdgeNode>mp[maxn];\n"})}),"\n",(0,d.jsx)(e.p,{children:"完整代码："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\nusing namespace std;\nconst long long maxn = 1e5 + 50, maxm = 1e7 + 50;\n\nstruct EdgeNode {\n	int to;		// 终点\n	int w;		// 权值\n};\nvector<EdgeNode>mp[maxn];\nint main() {\n	int n, m;\n	cin >> n >> m;\n\n	// 读入数据\n	for (int i = 0;i < m;i++) {\n		EdgeNode e;\n		int fi, ti, wi;\n		cin >> fi >> ti >> wi;\n		\n		e.to = ti;\n		e.w = wi;\n		mp[fi].push_back(e);\n	}\n\n	// 遍历\n	for (int i = 1;i <= n;i++) {\n		cout << "点v" << i << "为起点的边：" << endl;\n		\n		vector<EdgeNode>::iterator it = mp[i].begin();\n		int ind = 0;\n		for (;it != mp[i].end();it++) {\n			cout << "v" << i << "--\x3ev" << (*it).to << " 权值为：" << (*it).w << " 该边在所有以点v" << i << "为起点的边中序号为" << ind++ << endl;\n		}\n		cout << "点v" << i << "的度数为：" << ind << endl;\n		cout << endl;\n	}\n	\n\n	return 0;\n}\n// Output:\n/*\n点v1为起点的边：\nv1--\x3ev2 权值为：4 该边在所有以点v1为起点的边中序号为0\nv1--\x3ev6 权值为：9 该边在所有以点v1为起点的边中序号为1\n点v1的度数为：2\n\n点v2为起点的边：\n点v2的度数为：0\n\n点v3为起点的边：\nv3--\x3ev1 权值为：22 该边在所有以点v3为起点的边中序号为0\nv3--\x3ev2 权值为：19 该边在所有以点v3为起点的边中序号为1\n点v3的度数为：2\n\n点v4为起点的边：\nv4--\x3ev3 权值为：17 该边在所有以点v4为起点的边中序号为0\n点v4的度数为：1\n\n点v5为起点的边：\nv5--\x3ev8 权值为：29 该边在所有以点v5为起点的边中序号为0\n点v5的度数为：1\n\n点v6为起点的边：\nv6--\x3ev1 权值为：12 该边在所有以点v6为起点的边中序号为0\nv6--\x3ev5 权值为：9 该边在所有以点v6为起点的边中序号为1\nv6--\x3ev7 权值为：4 该边在所有以点v6为起点的边中序号为2\n点v6的度数为：3\n\n点v7为起点的边：\nv7--\x3ev4 权值为：25 该边在所有以点v7为起点的边中序号为0\n点v7的度数为：1\n\n点v8为起点的边：\nv8--\x3ev3 权值为：11 该边在所有以点v8为起点的边中序号为0\nv8--\x3ev7 权值为：7 该边在所有以点v8为起点的边中序号为1\n点v8的度数为：2\n\n*/\n'})}),"\n",(0,d.jsxs)(e.h5,{id:"3-静态建表链式前向星",children:[(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3-静态建表链式前向星",children:"#"}),"3. ★★★静态建表（链式前向星）"]}),"\n",(0,d.jsx)(e.p,{children:"邻接表的静态建表存储图的方式也称链式前向星，基于前向星，以提高构造效率为目的设计的存储方式，最终形成的数据是一个变形的邻接表。"}),"\n",(0,d.jsxs)(e.p,{children:["链式前向星采用数组模拟链表的方式实现邻接表的功能，使用很少的额外空间，","是目前建图和遍历效率最高的存储方式。"]}),"\n",(0,d.jsx)(e.p,{children:"数据结构："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-cpp",children:"struct EdgeNode {\n	int to;		// 终点\n	int w;		// 权值\n	int next;	// 下一位置\n};\nEdgeNode Edge[maxm];\nint head[maxn];\n"})}),"\n",(0,d.jsx)(e.p,{children:"数组模拟链表的主要方式是记录下一节点的位置在整个数组的位置坐标，并将这个标志坐标存在一个head数组中，遍历时根据输入的边的信息更新head对应的更新位置，并将原来的节点信息存在此时读入的边的next数据中。"}),"\n",(0,d.jsx)(e.p,{children:"存值方式："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-cpp",children:"// 读入数据\nfor (int i = 0;i < m;i++) {\n    int fi, ti, wi;\n    cin >> fi >> ti >> wi;\n    Edge[i].to = ti;\n    Edge[i].w = wi;\n\n    Edge[i].next = head[fi];\n    head[fi] = i;\n}\n"})}),"\n",(0,d.jsx)(e.p,{children:"完整代码："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\nusing namespace std;\nconst long long maxn = 1e5 + 50, maxm = 1e7 + 50;\n\nstruct EdgeNode {\n	int to;		// 终点\n	int w;		// 权值\n	int next;	// 下一位置\n};\nEdgeNode Edge[maxm];\nint head[maxn];\n\nint main() {\n	int n, m;\n	cin >> n >> m;\n\n	// 初始化head\n	memset(head, -1, sizeof(head));\n	\n	// 读入数据\n	for (int i = 0;i < m;i++) {\n		int fi, ti, wi;\n		cin >> fi >> ti >> wi;\n		Edge[i].to = ti;\n		Edge[i].w = wi;\n		\n		Edge[i].next = head[fi];\n		head[fi] = i;\n	}\n\n	\n	// 遍历\n	for (int i = 1;i <= n;i++) {\n		cout << "点v" << i << "为起点的边：" << endl;\n		\n		int ind = 0;\n		for (int j = head[i];j != -1;j = Edge[j].next) {\n			cout << "v" << i << "--\x3ev" << Edge[j].to << " 权值为：" << Edge[j].w << " 该边在所有以点v" << i << "为起点的边中序号为" << ind++ << endl;\n		}\n		cout << "点v" << i << "的度数为：" << ind << endl;\n		cout << endl;\n	}\n\n	// 展示一下head数组里的内容：\n	cout << "----------head数组里的内容----------" << endl;\n	for (int i = 1;i <= n;i++)\n		cout << "head[" << i << "]=" << head[i] << endl;\n	cout << endl;\n\n	return 0;\n}\n\n// Output:\n/*\n点v1为起点的边：\nv1--\x3ev6 权值为：9 该边在所有以点v1为起点的边中序号为0\nv1--\x3ev2 权值为：4 该边在所有以点v1为起点的边中序号为1\n点v1的度数为：2\n\n点v2为起点的边：\n点v2的度数为：0\n\n点v3为起点的边：\nv3--\x3ev2 权值为：19 该边在所有以点v3为起点的边中序号为0\nv3--\x3ev1 权值为：22 该边在所有以点v3为起点的边中序号为1\n点v3的度数为：2\n\n点v4为起点的边：\nv4--\x3ev3 权值为：17 该边在所有以点v4为起点的边中序号为0\n点v4的度数为：1\n\n点v5为起点的边：\nv5--\x3ev8 权值为：29 该边在所有以点v5为起点的边中序号为0\n点v5的度数为：1\n\n点v6为起点的边：\nv6--\x3ev7 权值为：4 该边在所有以点v6为起点的边中序号为0\nv6--\x3ev5 权值为：9 该边在所有以点v6为起点的边中序号为1\nv6--\x3ev1 权值为：12 该边在所有以点v6为起点的边中序号为2\n点v6的度数为：3\n\n点v7为起点的边：\nv7--\x3ev4 权值为：25 该边在所有以点v7为起点的边中序号为0\n点v7的度数为：1\n\n点v8为起点的边：\nv8--\x3ev7 权值为：7 该边在所有以点v8为起点的边中序号为0\nv8--\x3ev3 权值为：11 该边在所有以点v8为起点的边中序号为1\n点v8的度数为：2\n\n----------head数组里的内容----------\nhead[1]=9\nhead[2]=-1\nhead[3]=10\nhead[4]=5\nhead[5]=0\nhead[6]=11\nhead[7]=6\nhead[8]=8\n*/\n'})}),"\n",(0,d.jsx)(e.p,{children:"除了不能直接用起点终点确定是否有边外，链式前向星几乎是完美的。"}),"\n",(0,d.jsxs)(e.h3,{id:"13图的遍历",children:[(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#13图的遍历",children:"#"}),"1.3图的遍历"]}),"\n",(0,d.jsxs)(e.p,{children:["从v",(0,d.jsx)(e.del,{children:"0"}),"出发系统的访问图G中所有的顶点，每个顶点访问一次，称为图的遍历。"]}),"\n",(0,d.jsxs)(e.h4,{id:"深度优先遍历",children:[(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#深度优先遍历",children:"#"}),"深度优先遍历"]}),"\n",(0,d.jsx)(e.p,{children:"从一个节点开始，按照连接，访问到最后一个没有被访问的顶点，然后再从顺序上没有被访问的分路继续访问到最深处，如此循环至全部被访问。"}),"\n",(0,d.jsx)(e.p,{children:"深度优先样例代码："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-cpp",children:'// 用一个布尔型数组来标记是否被遍历到\nbool s[maxn] = { 0 };\n\nvoid dfs(int x) {\n	// 传入节点名x\n	s[x] = true;	// 标记被访问\n	cout << x << " ";\n	for (int i = head[x];i != -1;i = Edge[i].next) {\n		// 找到该节点为起点的头位置，然后按顺序去遍历下一个和节点x相连的节点位置，并标记访问\n		if (!s[Edge[i].to])\n			// 如果当前边的终点未被访问，我们就去访问它\n			dfs(Edge[i].to);\n		\n		// 当前边的终点如果已被访问，我们就访问和节点x的下一条边，即给i赋值为Edge[i].next\n	}\n}\n'})}),"\n",(0,d.jsx)(e.p,{children:"完整代码："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\nusing namespace std;\nconst long long maxn = 1e5 + 50, maxm = 1e7 + 50;\n\nstruct EdgeNode {\n	int to;		// 终点\n	int w;		// 权值\n	int next;	// 下一位置\n};\nEdgeNode Edge[maxm];\nint head[maxn];\n\n// 用一个布尔型数组来标记是否被遍历到\nbool s[maxn] = { 0 };\n\nvoid dfs(int x) {\n	// 传入节点名x\n	s[x] = true;	// 标记被访问\n	cout << x << " ";	// 输出被标记的点（观察顺序）\n	for (int i = head[x];i != -1;i = Edge[i].next) {\n		// 找到该节点为起点的头位置，然后按顺序去遍历下一个和节点x相连的节点位置，并标记访问\n		if (!s[Edge[i].to])\n			// 如果当前边的终点未被访问，我们就去访问它\n			dfs(Edge[i].to);\n		\n		// 当前边的终点如果已被访问，我们就访问和节点x的下一条边，即给i赋值为Edge[i].next\n	}\n}\n\nint main() {\n	int n, m;\n	cin >> n >> m;\n\n	// 初始化head\n	memset(head, -1, sizeof(head));\n	\n	// 读入数据\n	for (int i = 0;i < m;i++) {\n		int fi, ti, wi;\n		cin >> fi >> ti >> wi;\n		Edge[i].to = ti;\n		Edge[i].w = wi;\n		\n		Edge[i].next = head[fi];\n		head[fi] = i;\n	}\n\n	// 深度优先访问，从顶点1开始（没有点0啦）\n	dfs(1);\n	// Output:\n	/*\n		1 6 7 4 3 2 5 8\n	*/\n	// 可以结合图去观察这个顺序，便于理解深度优先搜索\n\n\n	return 0;\n}\n\n'})}),"\n",(0,d.jsxs)(e.p,{children:["注意：这里还是使用强推的","链式前向星","数据结构来储存图，因为边在读入的时候是前插入，所以后读入的边会先被遍历。"]}),"\n",(0,d.jsxs)(e.h4,{id:"广度优先遍历",children:[(0,d.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#广度优先遍历",children:"#"}),"广度优先遍历"]}),"\n",(0,d.jsxs)(e.p,{children:["广度优先就是先访问顶点v",(0,d.jsx)(e.del,{children:"0"}),"的所有边的终点，然后再访问第一条边往下延续的未被访问的顶点（第一条边往下没有就第二条边...如此搜索）"]}),"\n",(0,d.jsx)(e.p,{children:"广度优先用到了队列来记录遍历某顶点广度时，遍历的这个终点的下一点(next)是否被遍历，如果未被遍历则标记入队，等待当前顶点按照广度优先被遍历完终点后从该队列中获得下一轮被遍历的点。"}),"\n",(0,d.jsx)(e.p,{children:"广度优先样例代码："}),"\n",(0,d.jsx)(e.p,{children:"（啊啊啊突然发现拼错单词了，其实队列的单词是queue，不过在c++里引用了stl容器还用queue命名不太好吧(虽然没影响)...不管了！算了，还是改过来吧QAQ）"}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-cpp",children:'// 用一个布尔型数组来标记是否被遍历到\nbool s[maxn] = { 0 };\n\nvoid bfs(int x) {\n	int queue[maxn];\n	int iq = 0;		// 遍历以x为顶点的起始状态时，队列是空的\n	queue[iq++] = x;	// 给当前队列添加被访问的这个顶点x\n	\n	for (int i = 0;i < iq;i++) {\n		\n		// 这个队列按序输出可以反应搜索顺序\n		cout << queue[i] << " ";\n		\n		// 按照广度优先构造顺序队列(入队的都算作被访问了，下次执行当前循环(i++)将会输出最后入队的该顶点)\n		\n		for (int k = head[queue[i]];k != -1;k = Edge[k].next) {\n			// 遍历当前节点x相连的节点，即当前边的终点，如果该点没有被访问过，则入队，标记已访问，队长++\n			if (!s[Edge[k].to]) {\n				s[Edge[k].to] = true;\n				queue[iq++] = Edge[k].to;\n			}\n		}\n	}\n\n}\n'})}),"\n",(0,d.jsx)(e.p,{children:"完整代码："}),"\n",(0,d.jsx)(e.pre,{children:(0,d.jsx)(e.code,{className:"language-cpp",children:'#include<bits/stdc++.h>\nusing namespace std;\nconst long long maxn = 1e5 + 50, maxm = 1e7 + 50;\n\nstruct EdgeNode {\n	int to;		// 终点\n	int w;		// 权值\n	int next;	// 下一位置\n};\nEdgeNode Edge[maxm];\nint head[maxn];\n\n// 用一个布尔型数组来标记是否被遍历到\nbool s[maxn] = { 0 };\n\nvoid bfs(int x) {\n	int queue[maxn];\n	int iq = 0;		// 遍历以x为顶点的起始状态时，队列是空的\n	queue[iq++] = x;	// 给当前队列添加被访问的这个顶点x\n	\n	for (int i = 0;i < iq;i++) {\n		\n		// 这个队列按序输出可以反应搜索顺序\n		cout << queue[i] << " ";\n		\n		// 按照广度优先构造顺序队列(入队的都算作被访问了，下次执行当前循环(i++)将会输出最后入队的该顶点)\n		\n		for (int k = head[queue[i]];k != -1;k = Edge[k].next) {\n			// 遍历当前节点x相连的节点，即当前边的终点，如果该点没有被访问过，则入队，标记已访问，队长++\n			if (!s[Edge[k].to]) {\n				s[Edge[k].to] = true;\n				queue[iq++] = Edge[k].to;\n			}\n		}\n	}\n\n}\n\nint main() {\n	int n, m;\n	cin >> n >> m;\n\n	// 初始化head\n	memset(head, -1, sizeof(head));\n	\n	// 读入数据\n	for (int i = 0;i < m;i++) {\n		int fi, ti, wi;\n		cin >> fi >> ti >> wi;\n		Edge[i].to = ti;\n		Edge[i].w = wi;\n		\n		Edge[i].next = head[fi];\n		head[fi] = i;\n	}\n\n	bfs(1);\n	// Output:\n	/*\n		1 6 2 7 5 1 4 8 3\n	*/\n	// 结合图去观察该顺序，便于理解广度优先搜索\n\n	return 0;\n}\n\n'})}),"\n",(0,d.jsxs)(e.ul,{children:["\n",(0,d.jsx)(e.li,{children:"深度优先和广度优先都是通过边来搜索检查邻边是否被遍历到，所以时间复杂度相同，不过访问序列不同。"}),"\n"]})]})}function a(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,t.ah)(),n.components);return e?(0,d.jsx)(e,Object.assign({},n,{children:(0,d.jsx)(c,n)})):c(n)}let v=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["posts%2Falgorithm%2Fgraph_basic.md"]={toc:[{id:"11图的定义",text:"1.1图的定义",depth:3},{id:"12图的存储",text:"1.2图的存储",depth:3},{id:"邻接矩阵",text:"邻接矩阵",depth:4},{id:"前向星",text:"前向星",depth:4},{id:"邻接表",text:"邻接表",depth:4},{id:"13图的遍历",text:"1.3图的遍历",depth:3},{id:"深度优先遍历",text:"深度优先遍历",depth:4},{id:"广度优先遍历",text:"广度优先遍历",depth:4}],title:"图论基础||存储图||DFS、BFS(图论)",headingTitle:"",frontmatter:{title:"图论基础||存储图||DFS、BFS(图论)",date:"2024-01-06T06:15:17.000Z",draft:!1,tags:["图论","算法","算法模板"],categories:["在学算法的日子里"],series:["算法模板笔记"],hiddenFromHomePage:!1,hiddenFromSearch:!1,featuredImage:"",featuredImagePreview:"",toc:{enable:!0},math:{enable:!0},lightgallery:!1,license:""}}}}]);