"use strict";(self.webpackChunkblogsite_rspress=self.webpackChunkblogsite_rspress||[]).push([["2172"],{3347:function(s,e,n){n.r(e),n.d(e,{default:()=>m});var a=n(2676),r=n(453),l=n(3208);function c(s){let e=Object.assign({h3:"h3",a:"a",p:"p",code:"code",h4:"h4",blockquote:"blockquote",ol:"ol",li:"li",span:"span",math:"math",semantics:"semantics",mrow:"mrow",mi:"mi",annotation:"annotation",mo:"mo",mn:"mn",pre:"pre",msup:"msup",strong:"strong",img:"img",h5:"h5"},(0,r.ah)(),s.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.h3,{id:"线段树segment-tree",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#线段树segment-tree",children:"#"}),"线段树(segment tree)"]}),"\n",(0,a.jsx)(l.Z,{defaultLocale:"zh-CN"}),"\n",(0,a.jsxs)(e.p,{children:["线段树主要用于维护区间信息，与传统的树状数组相比，可以实现",(0,a.jsx)(e.code,{children:"O(log n)"}),"的区间修改，还可以同时支持多种操作(加、乘)，更具通用性。"]}),"\n",(0,a.jsx)(e.p,{children:"还是一样，为了方便测试，我们引入一个例题中的数据来演示。"}),"\n",(0,a.jsxs)(e.h4,{id:"模板线段树",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#模板线段树",children:"#"}),"【模板】线段树"]}),"\n",(0,a.jsxs)(e.p,{children:["题目链接：[线段树 1](#",(0,a.jsx)(e.a,{href:"https://www.luogu.com.cn/problem/P3372",rel:"noopener noreferrer",target:"_blank",children:"P3372 【模板】线段树 1 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)"}),")"]}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsx)(e.p,{children:"==题目描述=="}),"\n",(0,a.jsx)(e.p,{children:"如题，已知一个数列，你需要进行下面两种操作："}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["将某区间每一个数加上 ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsx)(e.mrow,{children:(0,a.jsx)(e.mi,{children:"k"})}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"k"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.6944em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"})]})})]}),"。"]}),"\n",(0,a.jsx)(e.li,{children:"求出某区间每一个数的和。"}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"==输入格式=="}),"\n",(0,a.jsxs)(e.p,{children:["第一行包含两个整数 ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mi,{children:"n"}),(0,a.jsx)(e.mo,{separator:"true",children:","}),(0,a.jsx)(e.mi,{children:"m"})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"n, m"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(e.span,{className:"mpunct",children:","}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"m"})]})})]}),"，分别表示该数列数字的个数和操作的总个数。"]}),"\n",(0,a.jsxs)(e.p,{children:["第二行包含 ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsx)(e.mrow,{children:(0,a.jsx)(e.mi,{children:"n"})}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.4306em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"n"})]})})]})," 个用空格分隔的整数，其中第 ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsx)(e.mrow,{children:(0,a.jsx)(e.mi,{children:"i"})}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"i"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.6595em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"i"})]})})]})," 个数字表示数列第 ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsx)(e.mrow,{children:(0,a.jsx)(e.mi,{children:"i"})}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"i"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.6595em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"i"})]})})]})," 项的初始值。"]}),"\n",(0,a.jsxs)(e.p,{children:["接下来 ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsx)(e.mrow,{children:(0,a.jsx)(e.mi,{children:"m"})}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"m"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.4306em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"m"})]})})]})," 行每行包含 ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsx)(e.mrow,{children:(0,a.jsx)(e.mn,{children:"3"})}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"3"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(e.span,{className:"mord",children:"3"})]})})]})," 或 ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsx)(e.mrow,{children:(0,a.jsx)(e.mn,{children:"4"})}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"4"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(e.span,{className:"mord",children:"4"})]})})]})," 个整数，表示一个操作，具体如下："]}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"1 x y k"}),"：将区间 ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mo,{stretchy:"false",children:"["}),(0,a.jsx)(e.mi,{children:"x"}),(0,a.jsx)(e.mo,{separator:"true",children:","}),(0,a.jsx)(e.mi,{children:"y"}),(0,a.jsx)(e.mo,{stretchy:"false",children:"]"})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"[x, y]"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(e.span,{className:"mopen",children:"["}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"x"}),(0,a.jsx)(e.span,{className:"mpunct",children:","}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"y"}),(0,a.jsx)(e.span,{className:"mclose",children:"]"})]})})]})," 内每个数加上 ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsx)(e.mrow,{children:(0,a.jsx)(e.mi,{children:"k"})}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"k"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.6944em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03148em"},children:"k"})]})})]}),"。"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"2 x y"}),"：输出区间 ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mo,{stretchy:"false",children:"["}),(0,a.jsx)(e.mi,{children:"x"}),(0,a.jsx)(e.mo,{separator:"true",children:","}),(0,a.jsx)(e.mi,{children:"y"}),(0,a.jsx)(e.mo,{stretchy:"false",children:"]"})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"[x, y]"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,a.jsx)(e.span,{className:"mopen",children:"["}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"x"}),(0,a.jsx)(e.span,{className:"mpunct",children:","}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",style:{marginRight:"0.03588em"},children:"y"}),(0,a.jsx)(e.span,{className:"mclose",children:"]"})]})})]})," 内每个数的和。"]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"==输出格式=="}),"\n",(0,a.jsx)(e.p,{children:"输出包含若干行整数，即为所有操作 2 的结果。"}),"\n",(0,a.jsx)(e.p,{children:"==样例 #1=="}),"\n",(0,a.jsxs)(e.p,{children:["样例输入"," #1"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-plaintext",children:"5 5\r\n1 5 4 2 3\r\n2 2 4\r\n1 2 3 2\r\n2 3 4\r\n1 1 5 1\r\n2 1 4\n"})}),"\n",(0,a.jsxs)(e.p,{children:["样例输出"," #1"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-plaintext",children:"11\r\n8\r\n20\n"})}),"\n",(0,a.jsx)(e.p,{children:"==提示=="}),"\n",(0,a.jsxs)(e.p,{children:["对于 ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mn,{children:"30"}),(0,a.jsx)(e.mi,{mathvariant:"normal",children:"%"})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"30\\%"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.8056em",verticalAlign:"-0.0556em"}}),(0,a.jsx)(e.span,{className:"mord",children:"30%"})]})})]})," 的数据：",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mi,{children:"n"}),(0,a.jsx)(e.mo,{children:"≤"}),(0,a.jsx)(e.mn,{children:"8"})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"n \\le 8"})]})})}),(0,a.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.7719em",verticalAlign:"-0.136em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,a.jsx)(e.span,{className:"mrel",children:"≤"}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(e.span,{className:"mord",children:"8"})]})]})]}),"，",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mi,{children:"m"}),(0,a.jsx)(e.mo,{children:"≤"}),(0,a.jsx)(e.mn,{children:"10"})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"m \\le 10"})]})})}),(0,a.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.7719em",verticalAlign:"-0.136em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"m"}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,a.jsx)(e.span,{className:"mrel",children:"≤"}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.6444em"}}),(0,a.jsx)(e.span,{className:"mord",children:"10"})]})]})]}),"。\r\n对于 ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mn,{children:"70"}),(0,a.jsx)(e.mi,{mathvariant:"normal",children:"%"})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"70\\%"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.8056em",verticalAlign:"-0.0556em"}}),(0,a.jsx)(e.span,{className:"mord",children:"70%"})]})})]})," 的数据：",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mi,{children:"n"}),(0,a.jsx)(e.mo,{children:"≤"}),(0,a.jsxs)(e.msup,{children:[(0,a.jsx)(e.mn,{children:"10"}),(0,a.jsx)(e.mn,{children:"3"})]})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"n \\le {10}^3"})]})})}),(0,a.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.7719em",verticalAlign:"-0.136em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,a.jsx)(e.span,{className:"mrel",children:"≤"}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.8484em"}}),(0,a.jsxs)(e.span,{className:"mord",children:[(0,a.jsx)(e.span,{className:"mord",children:(0,a.jsx)(e.span,{className:"mord",children:"10"})}),(0,a.jsx)(e.span,{className:"msupsub",children:(0,a.jsx)(e.span,{className:"vlist-t",children:(0,a.jsx)(e.span,{className:"vlist-r",children:(0,a.jsx)(e.span,{className:"vlist",style:{height:"0.8484em"},children:(0,a.jsxs)(e.span,{style:{top:"-3.0973em",marginRight:"0.05em"},children:[(0,a.jsx)(e.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(e.span,{className:"mord mtight",children:"3"})})]})})})})})]})]})]})]}),"，",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mi,{children:"m"}),(0,a.jsx)(e.mo,{children:"≤"}),(0,a.jsxs)(e.msup,{children:[(0,a.jsx)(e.mn,{children:"10"}),(0,a.jsx)(e.mn,{children:"4"})]})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"m \\le {10}^4"})]})})}),(0,a.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.7719em",verticalAlign:"-0.136em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"m"}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,a.jsx)(e.span,{className:"mrel",children:"≤"}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.8484em"}}),(0,a.jsxs)(e.span,{className:"mord",children:[(0,a.jsx)(e.span,{className:"mord",children:(0,a.jsx)(e.span,{className:"mord",children:"10"})}),(0,a.jsx)(e.span,{className:"msupsub",children:(0,a.jsx)(e.span,{className:"vlist-t",children:(0,a.jsx)(e.span,{className:"vlist-r",children:(0,a.jsx)(e.span,{className:"vlist",style:{height:"0.8484em"},children:(0,a.jsxs)(e.span,{style:{top:"-3.0973em",marginRight:"0.05em"},children:[(0,a.jsx)(e.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(e.span,{className:"mord mtight",children:"4"})})]})})})})})]})]})]})]}),"。\r\n对于 ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mn,{children:"100"}),(0,a.jsx)(e.mi,{mathvariant:"normal",children:"%"})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"100\\%"})]})})}),(0,a.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.8056em",verticalAlign:"-0.0556em"}}),(0,a.jsx)(e.span,{className:"mord",children:"100%"})]})})]})," 的数据：",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mn,{children:"1"}),(0,a.jsx)(e.mo,{children:"≤"}),(0,a.jsx)(e.mi,{children:"n"}),(0,a.jsx)(e.mo,{separator:"true",children:","}),(0,a.jsx)(e.mi,{children:"m"}),(0,a.jsx)(e.mo,{children:"≤"}),(0,a.jsxs)(e.msup,{children:[(0,a.jsx)(e.mn,{children:"10"}),(0,a.jsx)(e.mn,{children:"5"})]})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"1 \\le n, m \\le {10}^5"})]})})}),(0,a.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.7804em",verticalAlign:"-0.136em"}}),(0,a.jsx)(e.span,{className:"mord",children:"1"}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,a.jsx)(e.span,{className:"mrel",children:"≤"}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.8304em",verticalAlign:"-0.1944em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,a.jsx)(e.span,{className:"mpunct",children:","}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.1667em"}}),(0,a.jsx)(e.span,{className:"mord mathnormal",children:"m"}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,a.jsx)(e.span,{className:"mrel",children:"≤"}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.8484em"}}),(0,a.jsxs)(e.span,{className:"mord",children:[(0,a.jsx)(e.span,{className:"mord",children:(0,a.jsx)(e.span,{className:"mord",children:"10"})}),(0,a.jsx)(e.span,{className:"msupsub",children:(0,a.jsx)(e.span,{className:"vlist-t",children:(0,a.jsx)(e.span,{className:"vlist-r",children:(0,a.jsx)(e.span,{className:"vlist",style:{height:"0.8484em"},children:(0,a.jsxs)(e.span,{style:{top:"-3.0973em",marginRight:"0.05em"},children:[(0,a.jsx)(e.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(e.span,{className:"mord mtight",children:"5"})})]})})})})})]})]})]})]}),"。"]}),"\n",(0,a.jsxs)(e.p,{children:["保证任意时刻数列中所有元素的绝对值之和 ",(0,a.jsxs)(e.span,{className:"katex",children:[(0,a.jsx)(e.span,{className:"katex-mathml",children:(0,a.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,a.jsxs)(e.semantics,{children:[(0,a.jsxs)(e.mrow,{children:[(0,a.jsx)(e.mo,{children:"≤"}),(0,a.jsxs)(e.msup,{children:[(0,a.jsx)(e.mn,{children:"10"}),(0,a.jsx)(e.mn,{children:"18"})]})]}),(0,a.jsx)(e.annotation,{encoding:"application/x-tex",children:"\\le {10}^{18}"})]})})}),(0,a.jsxs)(e.span,{className:"katex-html","aria-hidden":"true",children:[(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.7719em",verticalAlign:"-0.136em"}}),(0,a.jsx)(e.span,{className:"mrel",children:"≤"}),(0,a.jsx)(e.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,a.jsxs)(e.span,{className:"base",children:[(0,a.jsx)(e.span,{className:"strut",style:{height:"0.8484em"}}),(0,a.jsxs)(e.span,{className:"mord",children:[(0,a.jsx)(e.span,{className:"mord",children:(0,a.jsx)(e.span,{className:"mord",children:"10"})}),(0,a.jsx)(e.span,{className:"msupsub",children:(0,a.jsx)(e.span,{className:"vlist-t",children:(0,a.jsx)(e.span,{className:"vlist-r",children:(0,a.jsx)(e.span,{className:"vlist",style:{height:"0.8484em"},children:(0,a.jsxs)(e.span,{style:{top:"-3.0973em",marginRight:"0.05em"},children:[(0,a.jsx)(e.span,{className:"pstrut",style:{height:"2.7em"}}),(0,a.jsx)(e.span,{className:"sizing reset-size6 size3 mtight",children:(0,a.jsx)(e.span,{className:"mord mtight",children:(0,a.jsx)(e.span,{className:"mord mtight",children:"18"})})})]})})})})})]})]})]})]}),"。"]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"【样例解释】"})}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{src:"https://cdn.luogu.com.cn/upload/pic/2251.png",alt:""})}),"\n"]}),"\n",(0,a.jsxs)(e.h4,{id:"线段树的建立",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#线段树的建立",children:"#"}),"线段树的建立"]}),"\n",(0,a.jsx)(e.p,{children:"线段树的每个节点对应一个区间，最小的区间(最底下的叶子)只包含1个数，从node=1(根节点)往下逐渐二分，且每一层的区间并不重合。"}),"\n",(0,a.jsx)(e.p,{children:"我们如此设置节点（简单概念）："}),"\n",(0,a.jsx)(e.p,{children:"每个节点p的左右子节点分别是2p和2p+1，假如节点p储存的是[l, r]的和，我们取mid=(l+r)/2 （一般就是向下取整啦，数组从索引0开始）则其子节点恰是分别储存[l, mid]和[mid+1, r]的和，可以发现这样可以使得做节点对应的区间长度恰好与右节点对应的区间长度相同或恰好多1。"}),"\n",(0,a.jsx)(e.p,{children:"草履虫都会的递归建图："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:"// 简单的建树过程\r\nvoid buildtree(ll l, ll r, ll p) {\r\n	if (l == r)\r\n		// 二分到终点了，给线段树的叶子节点赋值为a[l]\r\n		tree[p] = a[l];\r\n	else {\r\n		ll mid = (l + r) / 2;\r\n\r\n		// 先创造左节点p*2\r\n		buildtree(l, mid, p * 2);\r\n		// 再创造右节点p*2+1\r\n		buildtree(mid + 1, r, p * 2 + 1);\r\n\r\n		// 左右节点创造完毕之后给他们的父节点，也就是本轮递归中的p节点赋值\r\n		tree[p] = tree[p * 2] + tree[p * 2 + 1];\r\n	}\r\n}\n"})}),"\n",(0,a.jsxs)(e.h4,{id:"如何更新数据",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#如何更新数据",children:"#"}),"如何更新数据？"]}),"\n",(0,a.jsx)(e.p,{children:"朴素的想法或许是在改变数组中的某值之后再次递归来同步线段树，就像建树过程一样，但可以预见的是，这样做的时间复杂度比较高，因为当数组中的某值改变，我们需要update的节点是叶子节点，修改一个点会需要连锁修改上方所有包含该点的父节点、祖节点...etc，所以我们引入==懒标记法==进行线段树的区间修改。"}),"\n",(0,a.jsxs)(e.h5,{id:"懒标记延迟标记",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#懒标记延迟标记",children:"#"}),"懒标记（延迟标记）"]}),"\n",(0,a.jsx)(e.p,{children:"这是线段树的精髓所在qwq，递归的复杂度主要在于一层套一层然后再一层一层出来，有没有一种可能，我们给我们要修改的区间(将会对应一个唯一的节点)做上标记，只需要在将来用到某个节点的时候将变化传递下去就行。这样将会大大减少我们的时间。"}),"\n",(0,a.jsx)(e.p,{children:"相当于啊，本来某个变化是变动整个树来更新的，现在我们懒一懒，把工作做到确定哪些区间是全部变化了的，给它标记上（带上变化的内容），只有等到需要找它的子区间的时候才把变化落实下去。"}),"\n",(0,a.jsx)(e.p,{children:"还是看代码来理解吧："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:"void update(ll l, ll r, ll curl, ll curr, ll addnum, ll curpos) {\r\n	// 从目标的区间(要更新的范围)[l, r]开始\r\n	// 当前操作的区间是[curl, curr](对应curpos)\r\n	// 要做的操作是加一个数addnum(显然同理也可以是其他操作)\r\n	if (curl > r || curr < l)\r\n		// 当前要操作的区间和大区间没有交集，剪枝\r\n		return;\r\n	else if (curl >= l && curr <= r) {\r\n		// 当前区间完全包含在大区间里\r\n		tree[curpos] += (curr - curl + 1) * addnum;\r\n		\r\n		if (curl != curr)\r\n			// 不是叶子节点，则标记它\r\n			mark[curpos] += addnum;\r\n\r\n		// 这里就很懒标记了qwq\r\n	}\r\n	else {\r\n		// 有交集但不包含，则需要再分出包含的部分和不包含的部分进行update\r\n\r\n		// 因为当前区间点已经不能实现代表它下面的所有小弟啦，所以我们把原来有的标记往下传递一层，也就是分开，直到分到区间都是:要么都有变化，要么都不变化\r\n		\r\n		// 将标记点向下传递\r\n		mark[curpos * 2] += mark[curpos];\r\n		mark[curpos * 2 + 1] += mark[curpos];\r\n\r\n		// 接下来往下更新一层\r\n		ll mid = (curl + curr) / 2;\r\n		tree[curpos * 2] += mark[curpos] * (mid - curl + 1);\r\n		tree[curpos * 2 + 1] += mark[curpos] * (curr - mid);\r\n\r\n		// 清除当前的区间点的标记（因为已经下达了）\r\n		mark[curpos] = 0;	// 这里改成0是因为我们假设的操作变化是加法，如果是乘法呢做法相似\r\n\r\n		// 将懒标记递归下去\r\n		update(l, r, curl, mid, addnum, curpos * 2);	// 左\r\n		update(l, r, mid + 1, curr, addnum, curpos * 2 + 1);	// 右\r\n\r\n		// 传递结束之后更新当前节点的值(变化到这)\r\n		tree[curpos] = tree[curpos * 2] + tree[curpos * 2 + 1];\r\n	}\r\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"整个过程看着还是有递归，但是并不像建树时一样递归到底层才结束，我们在中间随时可以结束，只要找到一个可以代表它下面的所有小弟的大哥，然后告诉大哥要这样...那样...然后我们的任务就完成了，意思已经传达到了。"}),"\n",(0,a.jsxs)(e.p,{children:["那么如何把我们的标记翻译下去呢，这个就更简单了，我们上面使用了一个",(0,a.jsx)(e.code,{children:"mark[]"}),"数组记录变化，我们只需要吧mark里的指令传递到目标即可。"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:"// 将mark[]里要落实到底的指令落实下去\r\nvoid impleMarks(ll pos, ll len) {\r\n	// 实现目标：把mark[pos]里的指令向下传递一层\r\n	// 方便起见我们把pos对应的区间长度也传入，在使用这个函数的时候直接将curr-curl+1传入len即可\r\n	mark[pos * 2] += mark[pos];	// 左\r\n	mark[pos * 2 + 1] += mark[pos];	// 右\r\n	tree[pos * 2] += mark[pos] * (len - len / 2);\r\n	tree[pos * 2 + 1] += mark[pos] * (len / 2);\r\n	// 右边区间可能短一点，这会和最初生成线段树时结余出的地方一致，所以影响不大\r\n\r\n	mark[pos] = 0;\r\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"接下来，我们如果想要更新到所有叶子结点，只要调用这个落实函数就好。"}),"\n",(0,a.jsxs)(e.h4,{id:"查询区间",children:[(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#查询区间",children:"#"}),"查询区间"]}),"\n",(0,a.jsxs)(e.p,{children:["上面我们已经有了修改区间的方法，其实查询已经讲进去了吧，","不会查怎么做修改"]}),"\n",(0,a.jsx)(e.p,{children:"简单的写一个模板函数："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:"// 查询区间里的数据（也就是查询节点里的数据）\r\nll ask(ll l, ll r, ll pos, ll curl, ll curr) {\r\n	// 目标区间和已经在查的区间，以及对应在线段树里的坐标\r\n	if (curl > r || curr < l)\r\n		// 现在在查的不在大区间里\r\n		return 0;\r\n	else if (curl >= l && curr <= r)\r\n		// 当前查的区间就在待查区间里，返回值\r\n		return tree[pos];\r\n	else {\r\n		// 进行二分\r\n		ll mid = (curl + curr) / 2;\r\n		// 把当前节点的更新信息往下传递一层\r\n		impleMarks(pos, curr - curl + 1);\r\n		// 返回左右查询信息的和\r\n		return ask(l, r, pos * 2, curl, mid) + ask(l, r, pos * 2 + 1, mid + 1, curr);\r\n	}\r\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"最后给上例题的参考代码："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:"#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int maxn = 1e5 + 50, maxm = 1e5 + 50;\r\nll a[maxn];\r\n\r\nll tree[maxn * 4];	// 一般线段树的大小开到原数组范围的4倍应该差不多了\r\n\r\n// 简单的建树过程\r\nvoid buildtree(ll l, ll r, ll p) {\r\n	if (l == r)\r\n		// 二分到终点了，给线段树的叶子节点赋值为a[l]\r\n		tree[p] = a[l];\r\n	else {\r\n		ll mid = (l + r) / 2;\r\n\r\n		// 先创造左节点p*2\r\n		buildtree(l, mid, p * 2);\r\n		// 再创造右节点p*2+1\r\n		buildtree(mid + 1, r, p * 2 + 1);\r\n\r\n		// 左右节点创造完毕之后给他们的父节点，也就是本轮递归中的p节点赋值\r\n		tree[p] = tree[p * 2] + tree[p * 2 + 1];\r\n	}\r\n}\r\n\r\nll mark[maxn * 4];\r\n\r\nvoid update(ll l, ll r, ll curl, ll curr, ll addnum, ll curpos) {\r\n	// 从目标的区间(要更新的范围)[l, r]开始\r\n	// 当前操作的区间是[curl, curr](对应curpos)\r\n	// 要做的操作是加一个数addnum(显然同理也可以是其他操作)\r\n	if (curl > r || curr < l)\r\n		// 当前要操作的区间和大区间没有交集，剪枝\r\n		return;\r\n	else if (curl >= l && curr <= r) {\r\n		// 当前区间完全包含在大区间里\r\n		tree[curpos] += (curr - curl + 1) * addnum;\r\n		\r\n		if (curl != curr)\r\n			// 不是叶子节点，则标记它\r\n			mark[curpos] += addnum;\r\n\r\n		// 这里就很懒标记了qwq\r\n	}\r\n	else {\r\n		// 有交集但不包含，则需要再分出包含的部分和不包含的部分进行update\r\n\r\n		// 因为当前区间点已经不能实现代表它下面的所有小弟啦，所以我们把原来有的标记往下传递一层，也就是分开，直到分到区间都是:要么都有变化，要么都不变化\r\n		\r\n		// 将标记点向下传递\r\n		mark[curpos * 2] += mark[curpos];\r\n		mark[curpos * 2 + 1] += mark[curpos];\r\n\r\n		// 接下来往下更新一层\r\n		ll mid = (curl + curr) / 2;\r\n		tree[curpos * 2] += mark[curpos] * (mid - curl + 1);\r\n		tree[curpos * 2 + 1] += mark[curpos] * (curr - mid);\r\n\r\n		// 清除当前的区间点的标记（因为已经下达了）\r\n		mark[curpos] = 0;	// 这里改成0是因为我们假设的操作变化是加法，如果是乘法呢做法相似\r\n\r\n		// 将懒标记递归下去\r\n		update(l, r, curl, mid, addnum, curpos * 2);	// 左\r\n		update(l, r, mid + 1, curr, addnum, curpos * 2 + 1);	// 右\r\n\r\n		// 传递结束之后更新当前节点的值(变化到这)\r\n		tree[curpos] = tree[curpos * 2] + tree[curpos * 2 + 1];\r\n	}\r\n}\r\n\r\n// 将mark[]里要落实到底的指令落实下去\r\nvoid impleMarks(ll pos, ll len) {\r\n	// 实现目标：把mark[pos]里的指令向下传递一层\r\n	// 方便起见我们把pos对应的区间长度也传入，在使用这个函数的时候直接将curr-curl+1传入len即可\r\n	mark[pos * 2] += mark[pos];	// 左\r\n	mark[pos * 2 + 1] += mark[pos];	// 右\r\n	tree[pos * 2] += mark[pos] * (len - len / 2);\r\n	tree[pos * 2 + 1] += mark[pos] * (len / 2);\r\n	// 右边区间可能短一点，这会和最初生成线段树时结余出的地方一致，所以影响不大\r\n\r\n	mark[pos] = 0;\r\n}\r\n\r\n// 查询区间里的数据（也就是查询节点里的数据）\r\nll ask(ll l, ll r, ll pos, ll curl, ll curr) {\r\n	// 目标区间和已经在查的区间，以及对应在线段树里的坐标\r\n	if (curl > r || curr < l)\r\n		// 现在在查的不在大区间里\r\n		return 0;\r\n	else if (curl >= l && curr <= r)\r\n		// 当前查的区间就在待查区间里，返回值\r\n		return tree[pos];\r\n	else {\r\n		// 进行二分\r\n		ll mid = (curl + curr) / 2;\r\n		// 把当前节点的更新信息往下传递一层\r\n		impleMarks(pos, curr - curl + 1);\r\n		// 返回左右查询信息的和\r\n		return ask(l, r, pos * 2, curl, mid) + ask(l, r, pos * 2 + 1, mid + 1, curr);\r\n	}\r\n}\r\n\r\nint main() {\r\n	// 读入数据\r\n	ll n, m;cin >> n >> m;\r\n	for (ll i = 1;i <= n;i++)cin >> a[i];\r\n	\r\n	// 用数据建树，从节点1（也就是根节点）开始递归\r\n	buildtree(1, n, 1);\r\n\r\n	while (m--) {\r\n		\r\n		int how;cin >> how;\r\n		if (how == 1) {\r\n			ll x, y, k;cin >> x >> y >> k;\r\n			update(x, y, 1, n, k, 1);\r\n		}\r\n		else if (how == 2) {\r\n			ll x, y;cin >> x >> y;\r\n			cout << ask(x, y, 1, 1, n) << endl;\r\n		}\r\n	}\r\n\r\n	return 0;\r\n}\n"})})]})}function i(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,r.ah)(),s.components);return e?(0,a.jsx)(e,Object.assign({},s,{children:(0,a.jsx)(c,s)})):c(s)}let m=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["posts%2Falgorithm%2Fseg_tree.md"]={toc:[{id:"线段树segment-tree",text:"线段树(segment tree)",depth:3},{id:"模板线段树",text:"【模板】线段树",depth:4},{id:"线段树的建立",text:"线段树的建立",depth:4},{id:"如何更新数据",text:"如何更新数据？",depth:4},{id:"查询区间",text:"查询区间",depth:4}],title:"线段树模板",headingTitle:"",frontmatter:{title:"线段树模板",date:"2024-01-06T13:53:21.000Z",draft:!1,authors:[],description:"",tags:["算法","线段树","数据结构","算法模板"],categories:["在学算法的日子里"],series:["算法模板笔记"],hiddenFromHomePage:!1,hiddenFromSearch:!1,featuredImage:"",featuredImagePreview:"",toc:{enable:!0},math:{enable:!0},lightgallery:!1,license:""}}},3208:function(s,e,n){n.d(e,{Z:()=>m});var a=n(2676),r=n(5271),l=n(2815);n(2791);let c={"zh-CN":s=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${s.minutes>=1?`${Math.ceil(s.minutes)} \u{5206}\u{949F}`:"小于 1 分钟"}`,"en-US":s=>`Estimated reading time: ${s.minutes>=1?`${Math.ceil(s.minutes)} minutes`:"less than 1 minute"}`};function i(s,e,n){let a=Object.keys(c).includes(e)?e:n;return c[a](s)}let m=s=>{let{defaultLocale:e="en-US"}=s,n=(0,l.Vi)().page.readingTimeData,c=(0,l.Jr)(),m=(0,l.e7)(),[t,h]=(0,r.useState)(i(n,c,e));return(0,r.useEffect)(()=>{h(i(n,c,e))},[c,n]),(0,a.jsx)("span",{"data-dark":String(m),className:"rp-reading-time",children:t})}}}]);